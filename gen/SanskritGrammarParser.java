// Generated from /Users/sushil/IdeaProjects/SanskritParser/src/main/antlr4/com/ottego/sanskritparser/SanskritGrammar.g4 by ANTLR 4.12.0
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast", "CheckReturnValue"})
public class SanskritGrammarParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.12.0", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		PRATHMA_VIBHAKTI=1, PRATHMA_EKVACHAN=2, PRATHMA_DWIVACHAN=3, PRATHMA_BAHUVACHAN=4, 
		DWITIYA_VIBHAKTI=5, DWITIYA_EKVACHAN=6, DWITIYA_DWIVACHAN=7, DWITIYA_BAHUVACHAN=8, 
		TRITIYA_VIBHAKTI=9, TRITIYA_EKVACHAN=10, TRITIYA_DWIVACHAN=11, TRITIYA_BAHUVACHAN=12, 
		CHATURTHI_VIBHAKTI=13, CHATURTHI_EKVACHAN=14, CHATURTHI_DWIVACHAN=15, 
		CHATURTHI_BAHUVACHAN=16, PANCHAMI_VIBHAKTI=17, PANCHAMI_EKVACHAN=18, PANCHAMI_DWIVACHAN=19, 
		PANCHAMI_BAHUVACHAN=20, SHASTI_VIBHAKTI=21, SHASTI_EKVACHAN=22, SHASTI_DWIVACHAN=23, 
		SHASTI_BAHUVACHAN=24, SAPTAMI_VIBHAKTI=25, SAPTAMI_EKVACHAN=26, SAPTAMI_DWIVACHAN=27, 
		SAPTAMI_BAHUVACHAN=28, SHAP_VIKARAN=29, LUK_VIKARAN=30, SHLU_VIKARAN=31, 
		SHYAN_VIKARAN=32, SHNU_VIKARAN=33, SH_VIKARAN=34, SHNAM_VIKARAN=35, U_VIKARAN=36, 
		SHNA_VIKARAN=37, NICH_VIKARAN=38, YAK_VIKARAN=39, TAT_VIKARAN=40, KRIYA_VISHESAN_ABYAY=41, 
		KAL_VACHAK_ABYAY=42, STHAN_VACHAK_ABYAY=43, RITI_VACHAK_ABYAY=44, PARIMAN_VACHAK_ABYAY=45, 
		PRSHN_VACHAK_ABYAY=46, SAMUCCHYA_BODHAK_ABYAY=47, SAMBANDH_BODHAK_ABYAY=48, 
		VISMYADI_BODHAK_ABYAY=49, UPSARG=50, UP_MARTHA_NIPAT=51, KARMO_PASANGRAH_NIPAT=52, 
		PAD_PURNA_NARTHAK_NIPAT=53, ATIDESHIK_DHATU_PRATYAY=54, APTYARTH_TADHT_PRATYAY=55, 
		DEVTARTH_TADHT_PRATYAY=56, READ_KNOW_TADHT_PRATYAY=57, SAMUHARTH_TADHT_PRATYAY=58, 
		ISKA_HAI_ARTH_TADHT_PRATYAY=59, HONEWALE_BHAVARTH_TADHT_PRATYAY=60, VIKARARTHAK_TADHT_PRATYAY=61, 
		BHAVVACHAK_TADHT_PRATYAY=62, TULNARTHAK_TADHT_PRATYAY=63, ATYANT_BODHAK_TADHT_PRATYAY=64, 
		PANCHMYARTHAK_TADHT_PRATYAY=65, SAPTMYARTHAK_TADHT_PRATYAY=66, PRAKARVACHAK_TADHT_PRATYAY=67, 
		PURAN_TADHT_PRATYAY=68, STRI_PRATYAY=69, ATIDESHAK_DHATU_PRATYAY=70, SARVANAMA=71, 
		AVYAYA=72, SVARADI_AVYAYA=73, NIPAT_AVYAYA=74, CADI=75, PRADI=76, KARMAPRAVACHANIYA=77, 
		GATI=78, SAMASA_PRATIPADIKA=79, LAT_LAKAR=80, LIT_LAKAR=81, LUT_LAKAR=82, 
		LRIT_LAKAR=83, LET_LAKAR=84, LOT_LAKAR=85, LANG_LAKAR=86, LING_LAKAR=87, 
		LUNG_LAKAR=88, LRING_LAKAR=89, PR_PRS_EK_VACHAN_PP=90, PR_PRS_DWI_VACHAN_PP=91, 
		PR_PRS_BAHU_VACHAN_PP=92, MD_PRS_EK_VACHAN_PP=93, MD_PRS_DWI_VACHAN_PP=94, 
		MD_PRS_BAHU_VACHAN_PP=95, UTM_PRS_EK_VACHAN_PP=96, UTM_DWI_VACHAN_PP=97, 
		UTM_BAHU_VACHAN_PP=98, PR_PRS_EK_VACHAN_AP=99, PR_PRS_DWI_VACHAN_AP=100, 
		PR_PRS_BAHU_VACHAN_AP=101, MD_PRS_EK_VACHAN_AP=102, MD_PRS_DWI_VACHAN_AP=103, 
		MD_PRS_BAHU_VACHAN_AP=104, UTM_PRS_EK_VACHAN_AP=105, UTM_DWI_VACHAN_AP=106, 
		UTM_BAHU_VACHAN_AP=107, TUMUN_KRIT_PRATYAYA=108, ANEYYAR_KRIT_PRATYAYA=109, 
		TAVYAT_KRIT_PRATYAYA=110, KTVAA_KRIT_PRATYAYA=111, SHAANACH_KRIT_PRATYAYA=112, 
		SHATRU_KRIT_PRATYAYA=113, LYUT_KRIT_PRATYAYA=114, NVUUL_KRIT_PRATYAYA=115, 
		NAMUL_KRIT_PRATYAYA=116, TRACH_KRIT_PRATYAYA=117, KTA_KRIT_PRATYAYA=118, 
		KTAVATU_KRIT_PRATYAYA=119, LYAP_KRIT_PRATYAYA=120, KTIN_KRIT_PRATYAYA=121, 
		KELIMER_KRIT_PRATYAYA=122, KYAP_KRIT_PRATYAYA=123, KVASU_KRIT_PRATYAYA=124, 
		KAANACH_KRIT_PRATYAYA=125, SYATRU_KRIT_PRATYAYA=126, SYAMAAN_KRIT_PRATYAYA=127, 
		GHYN_KRIT_PRATYAYA=128, DHATU=129, BHVADI=130, ADADI=131, JUHOTYADI=132, 
		DIVADI=133, SWADI=134, TUDADI=135, RUDHADI=136, TANADI=137, KRIYADI=138, 
		CHURADI=139, RAMUM=140, GAMAM=141, AHIM=142, AKAM=143, AKSHUM=144, AGAM=145, 
		AKIM=146, AGIM=147, AGHIM=148, ACHUM=149, ANJAM=150, ACHIM=151, ANCHUMN=152, 
		ANCCHUM=153, ATAM=154, ANTTAM=155, ANDAM=156, ADDAM=157, ANNAM=158, ATHIM=159, 
		ANTAM=160, ANDDAM=161, ATIM=162, ADIM=163, ABRAM=164, ANMAM=165, ABIM=166, 
		ABHIM=167, AYAM=168, ANYAM=169, ARGHAM=170, ANRCHAM=171, ANRJAM=172, ANRDAM=173, 
		ARBAM=174, ARVAM=175, ANNRHAM=176, ALAM=177, AVAM=178, ASHHAM=179, ANSHAM=180, 
		AACHIM=181, AASHASI=182, IKHAM=183, IKHIM=184, IGIM=185, ITAM=186, IDIM=187, 
		IVIM=188, IKSHEM=189, INKHAM=190, INKHIM=191, IJAM=192, IJIM=193, IRKSHYAM=194, 
		IRSHYAM=195, IISHAM=196, IINSHAM=197, IEEHAM=198, UN=199, UKSHAM=200, 
		UKHAM=201, UKHIM=202, OKSHIM=203, OKHIM=204, OTHAM=205, ONTHAM=206, URDAM=207, 
		URVIM=208, USHAM=209, UHIMAR=210, OOTHAM=211, OOYIM=212, OOSHAM=213, OOHAM=214, 
		R=215, RJAM=216, RJIM=217, EJRAM=218, ENJRAM=219, ETHAM=220, EDHAM=221, 
		ESHAM=222, EESHAM=223, OOKSHIM=224, OONAM=225, REMAINING_BHAVADI=226, 
		ADAM=227, IIN=228, IK=229, ANAM=230, ASAM=231, AASHASUM=232, AASUM=233, 
		IINN=234, IIDAM=235, IIRAM=236, INSHAM=237, UURNUN=238, KASIN=239, KASAM=240, 
		KASAN=241, KUU=242, TUKSHU=243, KSHNU=244, KHYYA=245, CHAKAASURNUN=246, 
		CHAKSHINN=247, JAKSHAN=248, JAAGRUN=249, TUU=250, DARIDRAAM=251, DAAP=252, 
		DIHAN=253, DIIDHIINN=254, DUHAN=255, DYUU=256, DRAA=257, DVISHINN=258, 
		NNISHINN=259, NNIJINN=260, NNUN=261, PAA=262, PIJINN=263, PRIICHINN=264, 
		PRIJINN=265, PRAA=266, PSAA=267, BRUUUN=268, BHA=269, MAAA=270, MRRUJUUN=271, 
		YAA=272, YUU=273, RAA=274, RUU=275, RUDHINN=276, LAA=277, LIHINN=278, 
		VACHINN=279, VASHINN=280, VASAN=281, VAA=282, VIIDAN=283, VII=284, VRIJUUN=285, 
		VRIJINN=286, VEVEEN=287, SHAASUM=288, SHIJINN=289, SHIIN=290, SHRAA=291, 
		SHVASHINN=292, SHTIGHINN=293, SHASNN=294, SHUU=295, SHUUN=296, SHTUJINN=297, 
		SHTNA=298, SHTNU=299, NISHVAPAM=300, HANAM=301, HNUUN=302, KUTHAM=303, 
		KUPAM=304, KUSHAM=305, KUSAM=306, KRISHAM=307, KNASUM=308, KRUDHAM=309, 
		KLAMUM=310, KLIDUM=311, KLISHAM=312, KSHAMUM=313, KSIPAM=314, KSHUDHAM=315, 
		KSHUBHAM=316, NIKSVIDAM=317, KHIDAM=318, GUDHAM=319, GUPAM=320, GOORIM=321, 
		GRUDHAM=322, GHURIM=323, CHURIM=324, CHO=325, JANIM=326, JASUM=327, JURIM=328, 
		JRUH=329, JHRUH=330, DIPAM=331, DIM=332, TAPAM=333, TAMUM=334, TASUM=335, 
		TIMAM=336, TEEMAN=337, TUBHAM=338, TUSHAM=339, TOORI=340, TRUPAM=341, 
		NITRISHAM=342, TRASIM=343, DAMUM=344, DASUM=345, DIVUM=346, DIPIM=347, 
		DIPIN=348, DUSHAM=349, DUH=350, DRUH=351, DOO=352, DHURIM=353, NABHAM=354, 
		NASHAM=355, NAHAM=356, NRITIM=357, PADAM=358, PING=359, PUTHAM=360, PUSHAM=361, 
		PUSAM=362, PUSHPAM=363, PURIM=364, PYUSHAM=365, PYUSAM=366, PRING=367, 
		PLUSHAM=368, BASUM=369, VISUM=370, BUDHAM=371, BUSAM=372, BYUSAM=373, 
		BHASUM=374, BHRISHUM=375, BHRASHUM=376, BHRAUM=377, MADIM=378, MANAM=379, 
		MASIM=380, MAAM=381, NIMIDAM=382, MI=383, MUSAM=384, MUHAM=385, MRISHAM=386, 
		YASUM=387, YUJAM=388, YUDHAM=389, YUPAM=390, RANJAM=391, RADHAM=392, RADHO=393, 
		RISHAM=394, RIMNG=395, RUPAM=396, RUSHAM=397, LISHAM=398, LI=399, LUTAM=400, 
		LUTHAM=401, LUPAM=402, LUBHAM=403, VASUM=404, VAVRITUM=405, VASHRAM=406, 
		ISHUCHIR=407, SHUDHAM=408, SHUSHAM=409, SHO=410, SHRAMUM=411, SHLISHAM=412, 
		STHIVUM=413, SAMIM=414, SHAHAN=415, SHIDHAM=416, SHIVUM=417, SHUHAM=418, 
		SHUNG=419, SRUJAM=420, SHTIMAM=421, SHTUPAM=422, SHNASUM=423, SHNIHAM=424, 
		SHNUHAM=425, SRIVUM=426, SHVIDAM=427, HRISHAM=428, ILM=429, ISHM=430, 
		UCHHM=431, UJHM=432, UCHIM=433, UBJM=434, UBHM=435, UMBHM=436, RICHM=437, 
		RICHHM=438, RIFHM=439, RIMFHM=440, RINSHM=441, KADHM=442, KILM=443, KUNGM=444, 
		KUCHM=445, KUTM=446, KUDM=447, KUNM=448, KURM=449, KUM=450, KRIDHM=451, 
		KRITIM=452, KRISHN=453, KRM=454, KRUDHM=455, KSHIM=456, KSHIPM=457, KSHURM=458, 
		KHIDHM=459, KHUDHM=460, KHURM=461, GUM=462, GUJHM=463, GUDHM=464, GUFHM=465, 
		GUMFHM=466, GURIM=467, GRR=468, GHUTM=469, GHUNM=470, GHURM=471, GHURNM=472, 
		CHARCHM=473, CHALM=474, CHILM=475, CHUTM=476, CHUDM=477, CHRITIM=478, 
		CHHUTM=479, CHHUDM=480, CHHUPM=481, CHHURM=482, JARJHM=483, JUTM=484, 
		JUDM=485, JUNDM=486, JUNM=487, JUSHIM=488, JHARJHM=489, DIPM=490, TILM=491, 
		TUTM=492, TUDM=493, TUNM=494, TUDHM=495, TUPM=496, TUFHM=497, TUMPM=498, 
		TUMPHM=499, TRINHUM=500, TRIPM=501, TRIFHM=502, TRIMPM=503, TRIMPHM=504, 
		TRIHUM=505, TRUTM=506, TVACHM=507, THUDM=508, DISHM=509, DRINGM=510, DRIPM=511, 
		DRIFHM=512, DRIBHIM=513, DRIMPM=514, DRIMPHM=515, DRUNM=516, DHIM=517, 
		DHUM=518, DHRINGM=519, DHRUM=520, NIM=521, NUUM=522, NUDUM=523, NIDUM=524, 
		PIM=525, PISHM=526, PUTM=527, PUDM=528, PUNM=529, PURM=530, PRINGM=531, 
		PRIPM=532, PRINM=533, PRACHHM=534, BILM=535, BRINGM=536, BHJOM=537, BRINGMU=538, 
		BHRASJM=539, TUMUSJM=540, MICHM=541, MILAM=542, MILM=543, MISHM=544, MUCHM=545, 
		MUTM=546, MUNM=547, MURM=548, MRINGM=549, MRIPM=550, MRINM=551, MRISHM=552, 
		RIM=553, RINFHM=554, RISHM=555, RIHAM=556, RUJOM=557, RUSHM=558, OLAJIM=559, 
		OLASJM=560, LIKHM=561, LIPM=562, LISHM=563, LUTM=564, LUTHM=565, LUDM=566, 
		LUPM=567, LUBHM=568, VICHM=569, OVIJIM=570, VIDM=571, VIDHM=572, VILM=573, 
		VISHM=574, VRINM=575, VRIHUM=576, VYACHM=577, OVRASHCHUM=578, VRUM=579, 
		SHADHM=580, SHILM=581, SHUNM=582, SHUBHM=583, SHUMPHM=584, SHADHUM=585, 
		SHICHM=586, SHHILM=587, SHURM=588, SHUM=589, SRINGM=590, STRIHUM=591, 
		STHUDM=592, SPRISHM=593, SPHARHUM=594, SPHALM=595, SPHUTM=596, SPHUDM=597, 
		SPHURM=598, SPHULM=599, HILM=600, HUDM=601, ANJUM=602, NINDHIM=603, UNDHIM=604, 
		KRINTIM=605, KSHUDIR=606, KHIDIR=607, CHIDIR=608, UCHHRDIR=609, TANCHUM=610, 
		UTRUDIR=611, TRUHUM=612, PISHUM=613, PRICHIM=614, BHAMJOM=615, BHIDIR=616, 
		BHUGUM=617, YUJIR=618, RICHIR=619, RUDHIR=620, VICHIR=621, OMVIJIM=622, 
		VIDIR=623, VRUJIM=624, SHISHUM=625, HISIR=626, RINUM=627, DUKRINM=628, 
		KSHANUM=629, KSHINUM=630, GHRINUM=631, TANUM=632, TRINUM=633, MANUM=634, 
		VANUM=635, SHANUM=636, ASHAM=637, ISHAM=638, RUKRIN=639, KUNTHAM=640, 
		KUSHHAM=641, KRRIN=642, KRRM=643, KNUUN=644, DUKRIINM=645, KLISHUM=646, 
		KSHISH=647, KSHUNBHAM=648, KHACHAM=649, KHAVAM=650, GUNDHAM=651, GRRIN=652, 
		GRANTHAM=653, GRAHAM=654, JRRI=655, JNAA=656, JYAA=657, JHRRIN=658, TUNBHAM=659, 
		DRRIN=660, DRUUN=661, DHUUN=662, DHRRI=663, UDHRASAM=664, NANBHAM=665, 
		NRRIN=666, PUNSHAM=667, PURRRIN=668, PRIKRRIN=669, PRIIN=670, PRUSHAM=671, 
		PLII=672, PLUUSHAM=673, BANDHAM=674, BLII=675, BHRRI=676, BHRRII=677, 
		MANTHAM=678, MIIKRRIN=679, MUSHAM=680, MUURRRIN=681, MRIDHAM=682, MRRIDHAM=683, 
		MRRIN=684, YUN=685, RII=686, LII=687, LUURRRIN=688, VISHAM=689, VRIN=690, 
		VRRIN=691, VRRM=692, VRII=693, VLII=694, SHRRIN=695, SHRANTHAM=696, SHRANTHAM_2=697, 
		SHRII=698, SHISHI=699, SKAMBHAM=700, SKUUN=701, SKUMBHAM=702, STAMBHAM=703, 
		STUMBHUM=704, STRRIN=705, HETTHAM=706, HEDHAM=707, RU=708, KI=709, KITAM=710, 
		GA=711, GHRI=712, JANA=713, TURA=714, DUDAAK=715, DHANA=716, DUDHAAK=717, 
		DHISHA=718, NJIJR=719, PRA=720, PRI=721, BHASA=722, NIBHI=723, DUBHRI=724, 
		MAA=725, VIJIR=726, VISHAIM=727, SRA=728, OHAAH=729, OHAAK=730, HU=731, 
		HRI=732, HRII=733, ASHUUM=734, AHAH=735, AAPUM=736, RR=737, RDHUM=738, 
		KRN=739, KSHI=740, KSHII=741, CHAMUM=742, CHIN=743, CHIRI=744, JIRI=745, 
		TIKAM=746, TIGAM=747, TRIPAM=748, DDGHAM=749, DAMBHUM=750, DAASHUM=751, 
		TUDU=752, DR=753, DHUN=754, DHUUM=755, NJIDHRISHAM=756, PR=757, DDUMIN=758, 
		RAADHAM=759, RI=760, VRI=761, SHAKUM=762, SHIN=763, SHAGHAM=764, SAADHAM=765, 
		SHHIN=766, SHUN=767, SHTIGHAM=768, STRIN=769, SPR=770, SMR=771, HAM=772, 
		ANSAM=773, ANHIM=774, ANKAM=775, ANGAM=776, ANCHUM=777, AJIM=778, ATTAM=779, 
		ANDHAM=780, AMAM=781, ARKAM=782, ARCHAM=783, ARJAM=784, ARTHA=785, ARDAM=786, 
		ARHAM=787, ANRHAM=788, AAKRANDAM=789, AAPLIRAM=790, AASHADAM=791, ILAM=792, 
		IDAM=793, IRAM=794, UGHRSAM=795, UNAM=796, URJAM=797, OMLADIM=798, KANAM=799, 
		KATHIM=800, KADAM=801, KATRA=802, KATHA=803, KARNAM=804, KARTAM=805, KALAM=806, 
		KAMLAM=807, KAAMLAM=808, KINTAM=809, KUSIM=810, KUNSIM=811, KUTAM=812, 
		KUTTAM=813, KUNTTAM=814, KUNAM=815, KUTHIM=816, KUDIM=817, KUNDIM=818, 
		KUTSAM=819, KUDRIM=820, KUNDRIM=821, KUNPAM=822, KUMARAM=823, KUBIM=824, 
		KUBHIM=825, KUSMAM=826, KUHAM=827, KOOTAM=828, KOONTAM=829, KOONAM=830, 
		KOONAMN=831, KRUPA=832, KRPAM=833, KRITAM=834, KETAM=835, KLAPAM=836, 
		KSHAJIM=837, KSHAPAM=838, KSHAPIM=839, KSHALAM=840, KSHOTAM=841, KHATTAM=842, 
		KHANDAM=843, KHANDIM=844, KHUDIM=845, KHETAM=846, KHEDAM=847, KHOTAM=848, 
		GAJAM=849, GANAM=850, GADAM=851, GANDHAM=852, GARJAM=853, GARDAM=854, 
		GARDHAM=855, GARVAM=856, GARHAM=857, GALAM=858, GAVESHAM=859, GUNAM=860, 
		REMAINING_CHURADI=861, PUNCTUATION=862, WS=863, PLUS=864;
	public static final int
		RULE_sentences = 0, RULE_vakya = 1, RULE_subantPada = 2, RULE_subantam = 3, 
		RULE_tingantPada = 4, RULE_tingatam = 5, RULE_atideshakDhatu = 6, RULE_kridanta = 7, 
		RULE_taddhitantata = 8, RULE_supPratyay = 9, RULE_vibhakti = 10, RULE_vikaran = 11, 
		RULE_abayaPada = 12, RULE_abayay = 13, RULE_nipatAbyaya = 14, RULE_taddhitPratyay = 15, 
		RULE_pratipadika = 16, RULE_lakar = 17, RULE_titLakar = 18, RULE_ngitLakar = 19, 
		RULE_tingPratyaya = 20, RULE_parasamaiPadam = 21, RULE_atmnePadam = 22, 
		RULE_kritPrtaya = 23;
	private static String[] makeRuleNames() {
		return new String[] {
			"sentences", "vakya", "subantPada", "subantam", "tingantPada", "tingatam", 
			"atideshakDhatu", "kridanta", "taddhitantata", "supPratyay", "vibhakti", 
			"vikaran", "abayaPada", "abayay", "nipatAbyaya", "taddhitPratyay", "pratipadika", 
			"lakar", "titLakar", "ngitLakar", "tingPratyaya", "parasamaiPadam", "atmnePadam", 
			"kritPrtaya"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, null, "'\\u0938\\u0941\\u0901'", "'\\u0914'", "'\\u091C\\u0938\\u094D'", 
			null, "'\\u0905\\u092E\\u094D'", "'\\u0914\\u091F\\u094D'", "'\\u0936\\u0938\\u094D'", 
			null, "'\\u091F\\u093E'", null, "'\\u092D\\u093F\\u0938\\u094D'", null, 
			"'\\u0919\\u0947'", null, "'\\u092D\\u094D\\u092F\\u0938\\u094D'", null, 
			"'\\u0919\\u0938\\u093F\\u0901'", null, "'\\u092D\\u094D\\u092F\\u092E\\u094D\\u200C'", 
			null, "'\\u0919\\u0938\\u094D'", "'\\u0913\\u0938\\u094D'", "'\\u0906\\u092E\\u094D'", 
			null, "'\\u0919\\u093F'", "'\\u0913\\u0938'", "'\\u0938\\u0941\\u092A\\u094D'", 
			"'\\u0936\\u092A\\u094D'", "'\\u0932\\u0941\\u0915\\u094D'", "'\\u0936\\u094D\\u0932\\u0941'", 
			"'\\u0936\\u094D\\u092F\\u0928\\u094D'", "'\\u0936\\u094D\\u0928\\u0941'", 
			"'\\u0936'", "'\\u0936\\u094D\\u0928\\u092E\\u094D'", "'\\u0909'", "'\\u0936\\u094D\\u0928\\u093E'", 
			"'\\u0923\\u093F\\u091A\\u094D'", "'\\u092F\\u0915\\u094D'", "'\\u0924\\u0924\\u094D'", 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, "'\\u0932\\u091F\\u094D'", "'\\u0932\\u093F\\u091F\\u094D'", 
			"'\\u0932\\u0941\\u091F\\u094D'", "'\\u0932\\u0943\\u091F\\u094D'", "'\\u0932\\u0947\\u091F\\u094D'", 
			"'\\u0932\\u094B\\u091F\\u094D'", "'\\u0932\\u0919\\u094D'", "'\\u0932\\u093F\\u0919\\u094D'", 
			"'\\u0932\\u0941\\u0919\\u094D'", "'\\u0932\\u0943\\u0919\\u094D'", "'\\u0924\\u093F\\u092A\\u094D'", 
			"'\\u0924\\u0938\\u094D'", "'\\u091D\\u093F'", "'\\u0938\\u093F\\u092A\\u094D'", 
			"'\\u0925\\u0938\\u094D'", "'\\u0925'", "'\\u092E\\u093F\\u092A\\u094D'", 
			"'\\u0935\\u0938\\u094D'", "'\\u092E\\u0938\\u094D'", "'\\u0924'", "'\\u0906\\u0924\\u093E\\u092E\\u094D'", 
			"'\\u091D'", "'\\u0925\\u093E\\u0938\\u094D'", "'\\u0906\\u0925\\u093E\\u092E\\u094D'", 
			"'\\u0927\\u094D\\u0935\\u092E\\u094D'", "'\\u0907\\u091F\\u094D'", "'\\u0935\\u0939\\u093F'", 
			"'\\u092E\\u0939\\u093F\\u0919\\u094D'", "'\\u0924\\u0941\\u092E\\u0941\\u0928\\u094D'", 
			"'\\u0905\\u0928\\u0940\\u092F\\u0930\\u094D'", "'\\u0924\\u0935\\u094D\\u092F\\u0924\\u094D'", 
			"'\\u0915\\u094D\\u0924\\u094D\\u0935\\u093E'", "'\\u0936\\u093E\\u0928\\u091A\\u094D'", 
			"'\\u0936\\u0924\\u0943'", "'\\u0932\\u094D\\u092F\\u0941\\u091F\\u094D'", 
			"'\\u0923\\u094D\\u0935\\u0942\\u0932\\u094D'", "'\\u0923\\u092E\\u0941\\u0932\\u094D'", 
			"'\\u0924\\u0943\\u091A\\u094D'", "'\\u0915\\u094D\\u0924\\u094D'", "'\\u0915\\u094D\\u0924\\u0935\\u0924\\u0941'", 
			"'\\u0932\\u094D\\u092F\\u092A\\u094D'", "'\\u0915\\u094D\\u0924\\u093F\\u0928\\u094D'", 
			"'\\u0915\\u0947\\u0932\\u093F\\u092E\\u0947\\u0930\\u094D'", "'\\u0915\\u094D\\u092F\\u092A\\u094D'", 
			"'\\u0915\\u094D\\u0935\\u0938\\u0941'", "'\\u0915\\u093E\\u0928\\u091A\\u094D'", 
			"'\\u0938\\u094D\\u092F\\u0924\\u0943'", "'\\u0938\\u094D\\u092F\\u092E\\u093E\\u0928\\u094D'", 
			"'\\u0918\\u091E\\u094D'", null, null, null, null, null, null, null, 
			null, null, null, null, "'\\u0930\\u0952\\u092E\\u0941\\u0901\\u0952'", 
			"'\\u0917\\u0952\\u092E\\u0962\\u0901\\u0951'", "'\\u0905\\u0951\\u0939\\u093F\\u0901\\u0952'", 
			"'\\u0905\\u0951\\u0915\\u0901\\u0951'", "'\\u0905\\u0951\\u0915\\u094D\\u0937\\u0942\\u0901\\u0951'", 
			"'\\u0905\\u0951\\u0917\\u0901\\u0951'", "'\\u0905\\u0951\\u0915\\u093F\\u0901\\u0952'", 
			"'\\u0905\\u0951\\u0917\\u093F\\u0901\\u0951'", "'\\u0905\\u0951\\u0918\\u093F\\u0901\\u0952'", 
			"'\\u0905\\u0951\\u091A\\u0941\\u0901\\u0951\\u0952'", "'\\u0905\\u0951\\u091C\\u0901\\u0951'", 
			"'\\u0905\\u0951\\u091A\\u093F\\u0901\\u0951'", "'\\u0905\\u0951\\u091E\\u094D\\u091A\\u0941\\u0901\\u0951'", 
			"'\\u0905\\u0951\\u091E\\u094D\\u091A\\u0941\\u0901\\u0951\\u0952'", 
			"'\\u0905\\u0951\\u091F\\u0901\\u0951'", "'\\u0905\\u0951\\u091F\\u094D\\u091F\\u0901\\u0951'", 
			"'\\u0905\\u0951\\u0921\\u0901\\u0951'", "'\\u0905\\u0951\\u0921\\u094D\\u0921\\u0901\\u0951'", 
			"'\\u0905\\u0951\\u0923\\u0901\\u0951'", "'\\u0905\\u0951\\u0920\\u093F\\u0901\\u0952'", 
			"'\\u0905\\u0951\\u0924\\u0901\\u0951'", "'\\u0905\\u0951\\u0926\\u094D\\u0921\\u0901\\u0951'", 
			"'\\u0905\\u0951\\u0924\\u093F\\u0901\\u0951'", "'\\u0905\\u0951\\u0926\\u093F\\u0901\\u0951'", 
			"'\\u0905\\u0951\\u092D\\u094D\\u0930\\u0901\\u0951'", "'\\u0905\\u0951\\u092E\\u0901\\u0951'", 
			"'\\u0905\\u0951\\u092C\\u093F\\u0901\\u0952'", "'\\u0905\\u0951\\u092D\\u093F\\u0901\\u0951'", 
			"'\\u0905\\u0951\\u092F\\u0901\\u0952'", "'\\u0905\\u0951\\u092F\\u0901\\u0951\\u0952'", 
			"'\\u0905\\u0951\\u0930\\u094D\\u0918\\u0901\\u0951'", "'\\u0905\\u0951\\u0930\\u094D\\u091A\\u0901\\u0951'", 
			"'\\u0905\\u0951\\u0930\\u094D\\u091C\\u0901\\u0951'", "'\\u0905\\u0951\\u0930\\u094D\\u0926\\u0901\\u0951'", 
			"'\\u0905\\u0951\\u0930\\u094D\\u092C\\u0901\\u0951'", "'\\u0905\\u0951\\u0930\\u094D\\u0935\\u0901\\u0951'", 
			"'\\u0905\\u0951\\u0930\\u094D\\u0939\\u0901\\u0951'", "'\\u0905\\u0951\\u0932\\u0901\\u0951'", 
			"'\\u0905\\u0951\\u0935\\u0901\\u0951'", "'\\u0905\\u0951\\u0937\\u0901\\u0951\\u0952'", 
			"'\\u0905\\u0951\\u0938\\u0901\\u0951\\u0952'", "'\\u0906\\u0951\\u091B\\u093F\\u0901\\u0951'", 
			"'\\u0906\\u0951\\u0936\\u0952\\u0938\\u093F'", "'\\u0907\\u0951\\u0916\\u0901\\u0951'", 
			"'\\u0907\\u0951\\u0916\\u093F\\u0901\\u0951'", "'\\u0907\\u0951\\u0917\\u093F\\u0901\\u0951'", 
			"'\\u0907\\u0951\\u091F\\u0901\\u0951'", "'\\u0907\\u0951\\u0926\\u093F\\u0901\\u0951'", 
			"'\\u0907\\u0951\\u0935\\u093F\\u0901\\u0951'", "'\\u0908\\u0951\\u0915\\u094D\\u0937\\u0901\\u0952'", 
			"'\\u0908\\u0951\\u0916\\u0901\\u0951'", "'\\u0908\\u0951\\u0916\\u093F\\u0901\\u0951'", 
			"'\\u0908\\u0951\\u091C\\u0952\\u0901'", "'\\u0908\\u0951\\u091C\\u093F\\u0901\\u0952'", 
			"'\\u0908\\u0951\\u0930\\u094D\\u0915\\u094D\\u0937\\u094D\\u092F\\u0901\\u0951'", 
			"'\\u0908\\u0951\\u0930\\u094D\\u0937\\u094D\\u092F\\u0901\\u0951'", 
			"'\\u0908\\u0951\\u0937\\u0901\\u0951'", "'\\u0908\\u0951\\u0937\\u0901\\u0952'", 
			"'\\u0908\\u0951\\u0939\\u0901\\u0952'", "'\\u0909\\u0952\\u0919\\u094D'", 
			"'\\u0909\\u0951\\u0915\\u094D\\u0937\\u0901\\u0951'", "'\\u0909\\u0951\\u0916\\u0901\\u0951'", 
			"'\\u0909\\u0951\\u0916\\u093F\\u0901\\u0951'", "'\\u0913\\u0951\\u0915\\u094D\\u0937\\u0941\\u0901\\u0951'", 
			"'\\u0913\\u0951\\u0923\\u0941\\u0901\\u0951'", null, null, "'\\u0909\\u0951\\u0930\\u094D\\u0926\\u0901\\u0952'", 
			"'\\u0909\\u0951\\u0930\\u094D\\u0935\\u0940\\u0901\\u0951'", "'\\u0909\\u0951\\u0937\\u0901\\u0951'", 
			"'\\u0909\\u0951\\u0939\\u093F\\u0901\\u0951\\u0930\\u094D'", "'\\u090A\\u0951\\u0920\\u0901\\u0951'", 
			"'\\u090A\\u0951\\u092F\\u0940\\u0901\\u0952'", "'\\u090A\\u0951\\u0937\\u0901\\u0951'", 
			"'\\u090A\\u0951\\u0939\\u0901\\u0951'", null, "'\\u090B\\u0951\\u091C\\u0901\\u0951'", 
			"'\\u090B\\u0951\\u091C\\u093F\\u0901\\u0951'", null, null, "'\\u090F\\u0951\\u0920\\u0901\\u0951'", 
			"'\\u090F\\u0951\\u0927\\u0901\\u0951'", null, null, "'\\u0913\\u0951\\u0916\\u0943\\u0901\\u0951'", 
			"'\\u0913\\u0951\\u0923\\u0943\\u0901\\u0951'", null, "'\\u0905\\u0952\\u0926\\u0901\\u0951'", 
			"'\\u0907\\u0952\\u0919\\u094D'", "'\\u0907\\u0952\\u0915\\u094D'", "'\\u0905\\u0951\\u0928\\u0901\\u0951'", 
			"'\\u0905\\u0951\\u0938\\u0901\\u0951'", "'\\u0906\\u0951\\u0936\\u093E\\u0952\\u0938\\u0941\\u0901'", 
			"'\\u0906\\u0951\\u0938\\u0901\\u0952'", "'\\u0907\\u0952\\u0923\\u094D'", 
			"'\\u0908\\u0951\\u0921\\u0901\\u0952'", "'\\u0908\\u0951\\u0930\\u0901\\u0952'", 
			"'\\u0908\\u0951\\u0936\\u0901\\u0952'", "'\\u090A\\u0951\\u0930\\u0923\\u0941\\u0951\\u091E\\u094D'", 
			"'\\u0915\\u0951\\u0938\\u093F\\u0901\\u0952'", "'\\u0915\\u0951\\u0936\\u0901\\u0951'", 
			"'\\u0915\\u0951\\u0938\\u0901\\u0952'", "'\\u0915\\u0941\\u0952'", "'\\u091F\\u0941\\u0951\\u0915\\u094D\\u0937\\u0941\\u0951'", 
			"'\\u0915\\u094D\\u0937\\u094D\\u0923\\u0941\\u0951'", "'\\u0916\\u094D\\u092F\\u093E\\u0952'", 
			"'\\u091A\\u0951\\u0915\\u093E\\u0951\\u0938\\u0943\\u0901\\u0951'", 
			"'\\u091A\\u0952\\u0915\\u094D\\u0937\\u093F\\u0901\\u0952\\u0919\\u094D'", 
			"'\\u091C\\u0951\\u0915\\u094D\\u0937\\u0901\\u0951'", "'\\u091C\\u093E\\u0951\\u0917\\u0943\\u0951'", 
			"'\\u0924\\u0941\\u0951'", "'\\u0926\\u0951\\u0930\\u093F\\u0951\\u0926\\u094D\\u0930\\u093E\\u0951'", 
			"'\\u0926\\u093E\\u0952\\u092A\\u094D'", "'\\u0926\\u093F\\u0952\\u0939\\u0901\\u0951\\u0952'", 
			"'\\u0926\\u0940\\u0951\\u0927\\u0940\\u0951\\u0919\\u094D'", "'\\u0926\\u0941\\u0952\\u0939\\u0901\\u0951\\u0952'", 
			"'\\u0926\\u094D\\u092F\\u0941\\u0952'", "'\\u0926\\u094D\\u0930\\u093E\\u0952'", 
			"'\\u0926\\u094D\\u0935\\u093F\\u0952\\u0937\\u093F\\u0901\\u0952'", 
			"'\\u0923\\u093F\\u0951\\u0938\\u093F\\u0901\\u0952'", "'\\u0923\\u093F\\u0951\\u091C\\u093F\\u0901\\u0952'", 
			"'\\u0923\\u0941\\u0951'", "'\\u092A\\u093E\\u0952'", "'\\u092A\\u093F\\u0951\\u091C\\u093F\\u0901\\u0952'", 
			"'\\u092A\\u0943\\u0951\\u091A\\u0940\\u0901\\u0952'", "'\\u092A\\u0943\\u0951\\u091C\\u093F\\u0901\\u0952'", 
			null, null, "'\\u092C\\u094D\\u0930\\u0942\\u0951\\u091E\\u094D'", "'\\u092D\\u093E\\u0952'", 
			null, "'\\u092E\\u0943\\u0951\\u091C\\u0942\\u0901\\u0951'", "'\\u092F\\u093E\\u0952'", 
			"'\\u092F\\u0941\\u0951'", "'\\u0930\\u093E\\u0952'", "'\\u0930\\u0941\\u0951'", 
			"'\\u0930\\u0941\\u0951\\u0926\\u093F\\u0901\\u0951\\u0930\\u094D'", 
			"'\\u0932\\u093E\\u0952'", "'\\u0932\\u093F\\u0952\\u0939\\u0901\\u0951\\u0952'", 
			"'\\u0935\\u0952\\u091A\\u0901\\u0951'", "'\\u0935\\u0951\\u0936\\u0901\\u0951'", 
			"'\\u0935\\u0951\\u0938\\u0901\\u0952'", "'\\u0935\\u093E\\u0952'", "'\\u0935\\u093F\\u0951\\u0926\\u0901\\u0951'", 
			"'\\u0935\\u0940\\u0952'", "'\\u0935\\u0943\\u0951\\u091C\\u0940\\u0901\\u0952'", 
			"'\\u0935\\u0943\\u0951\\u091C\\u093F\\u0901\\u0952'", "'\\u0935\\u0947\\u0951\\u0935\\u0940\\u0951\\u0919\\u094D'", 
			"'\\u0936\\u093E\\u0951\\u0938\\u0941\\u0901\\u0951'", "'\\u0936\\u093F\\u0951\\u091C\\u093F\\u0901\\u0952'", 
			"'\\u0936\\u0940\\u0951\\u0919\\u094D'", "'\\u0936\\u094D\\u0930\\u093E\\u0952'", 
			"'\\u0936\\u094D\\u0935\\u0951\\u0938\\u0901\\u0951'", "'\\u0937\\u0951\\u0938\\u094D\\u0924\\u093F\\u0901\\u0951'", 
			"'\\u0937\\u0951\\u0938\\u0901\\u0951'", "'\\u0937\\u0941\\u0952'", null, 
			"'\\u0937\\u094D\\u091F\\u0941\\u0952\\u091E\\u094D'", "'\\u0937\\u094D\\u0923\\u093E\\u0952'", 
			"'\\u0937\\u094D\\u0923\\u0941\\u0951'", "'\\u091E\\u093F\\u0937\\u094D\\u0935\\u0952\\u092A\\u0901\\u0951'", 
			"'\\u0939\\u0952\\u0928\\u0901\\u0951'", "'\\u0939\\u094D\\u0928\\u0941\\u0952\\u0919\\u094D'", 
			"'\\u0915\\u0941\\u0951\\u0925\\u0901\\u0951'", null, "'\\u0915\\u0941\\u0951\\u0936\\u0901\\u0951'", 
			"'\\u0915\\u0941\\u0951\\u0938\\u0901\\u0951'", "'\\u0915\\u0943\\u0951\\u0936\\u0901\\u0951'", 
			"'\\u0915\\u094D\\u0928\\u0951\\u0938\\u0941\\u0901\\u0951'", "'\\u0915\\u094D\\u0930\\u0941\\u0952\\u0927\\u0901\\u0951'", 
			"'\\u0915\\u094D\\u0932\\u0951\\u092E\\u0941\\u0901\\u0951'", "'\\u0915\\u094D\\u0932\\u093F\\u0951\\u0926\\u0942\\u0901\\u0951'", 
			"'\\u0915\\u094D\\u0932\\u093F\\u0951\\u0936\\u0901\\u0952'", "'\\u0915\\u094D\\u0937\\u0951\\u092E\\u0942\\u0901\\u0951'", 
			"'\\u0915\\u094D\\u0937\\u093F\\u0952\\u092A\\u0901\\u0951'", "'\\u0915\\u094D\\u0937\\u0941\\u0952\\u0927\\u0901\\u0951'", 
			null, "'\\u091E\\u093F\\u0915\\u094D\\u0937\\u094D\\u0935\\u093F\\u0951\\u0926\\u093E\\u0901\\u0951'", 
			null, null, "'\\u0917\\u0941\\u0951\\u092A\\u0901\\u0951'", "'\\u0917\\u0942\\u0951\\u0930\\u0940\\u0901\\u0952'", 
			"'\\u0917\\u0943\\u0951\\u0927\\u0941\\u0901\\u0951'", "'\\u0918\\u0942\\u0951\\u0930\\u0940\\u0952\\u0901'", 
			"'\\u091A\\u0942\\u0951\\u0930\\u0940\\u0901\\u0952'", "'\\u091B\\u094B\\u0952'", 
			"'\\u091C\\u0951\\u0928\\u0940\\u0901\\u0951'", "'\\u091C\\u0951\\u0938\\u0941\\u0901\\u0951'", 
			"'\\u091C\\u0942\\u0951\\u0930\\u0940\\u0901\\u0952'", "'\\u091C\\u0944\\u0951\\u0937\\u094D'", 
			"'\\u091D\\u0944\\u0951\\u0937\\u094D'", null, "'\\u0921\\u0940\\u0952\\u0919\\u094D'", 
			"'\\u0924\\u0952\\u092A\\u0901\\u0952'", "'\\u0924\\u0951\\u092E\\u0941\\u0901\\u0951'", 
			"'\\u0924\\u0951\\u0938\\u0941\\u0901\\u0951'", "'\\u0924\\u093F\\u0951\\u092E\\u0901\\u0951'", 
			"'\\u0924\\u0940\\u0951\\u092E\\u0901\\u0951'", null, "'\\u0924\\u0941\\u0952\\u0937\\u0901\\u0951'", 
			"'\\u0924\\u0942\\u0951\\u0930\\u0940\\u0901\\u0952'", "'\\u0924\\u0943\\u0952\\u092A\\u0901\\u0951'", 
			"'\\u091E\\u093F\\u0924\\u0943\\u0951\\u0937\\u0901\\u0951'", "'\\u0924\\u094D\\u0930\\u0951\\u0938\\u0940\\u0901\\u0951'", 
			"'\\u0926\\u0951\\u092E\\u0941\\u0901\\u0951'", "'\\u0926\\u0951\\u0938\\u0941\\u0901\\u0951'", 
			"'\\u0926\\u093F\\u0951\\u0935\\u0941\\u0901\\u0951'", "'\\u0926\\u0940\\u0951\\u0919\\u094D'", 
			"'\\u0926\\u0940\\u0951\\u092A\\u0940\\u0901\\u0952'", "'\\u0926\\u0941\\u0952\\u0937\\u0901\\u0951'", 
			"'\\u0926\\u0942\\u0951\\u0919\\u094D'", "'\\u0926\\u0943\\u0952\\u092A\\u0901\\u0951'", 
			"'\\u0926\\u094B\\u0952'", "'\\u0926\\u094D\\u0930\\u0941\\u0952\\u0939\\u0901\\u0951'", 
			null, "'\\u0923\\u0952\\u0936\\u0901\\u0951'", "'\\u0923\\u0952\\u0939\\u0901\\u0951\\u0952'", 
			"'\\u0928\\u0943\\u0951\\u0924\\u0940\\u0901\\u0951'", "'\\u092A\\u0952\\u0926\\u0901\\u0952'", 
			"'\\u092A\\u0940\\u0952\\u0919\\u094D'", "'\\u092A\\u0941\\u0951\\u0925\\u0901\\u0951'", 
			null, "'\\u092A\\u0941\\u0952\\u0937\\u0901\\u0951'", "'\\u092A\\u0941\\u0951\\u0937\\u094D\\u092A\\u0901\\u0951'", 
			"'\\u092A\\u0942\\u0951\\u0930\\u0940\\u0901\\u0952'", "'\\u092A\\u094D\\u092F\\u0941\\u0951\\u0937\\u0901\\u0951'", 
			"'\\u092A\\u094D\\u092F\\u0941\\u0951\\u0938\\u0901\\u0951'", "'\\u092A\\u094D\\u0930\\u0940\\u0952\\u0919\\u094D'", 
			null, "'\\u092C\\u0951\\u0938\\u0941\\u0901\\u0951'", "'\\u0935\\u093F\\u0951\\u0938\\u0901\\u0951'", 
			"'\\u092C\\u0941\\u0952\\u0927\\u0901\\u0952'", "'\\u092C\\u0941\\u0951\\u0938\\u0901\\u0951'", 
			"'\\u092C\\u094D\\u092F\\u0941\\u0951\\u0938\\u0901\\u0951'", "'\\u092D\\u0951\\u0938\\u0941\\u0901\\u0951'", 
			"'\\u092D\\u0943\\u0902\\u0951\\u0936\\u0941\\u0901\\u0951'", "'\\u092D\\u094D\\u0930\\u0902\\u0951\\u0936\\u0941\\u0901\\u0951'", 
			"'\\u092D\\u094D\\u0930\\u0951\\u092E\\u0941\\u0901\\u0951'", "'\\u092E\\u0951\\u0926\\u0940\\u0901\\u0951'", 
			"'\\u092E\\u0952\\u0928\\u0901\\u0952'", "'\\u092E\\u0951\\u0938\\u0940\\u0901\\u0951'", 
			"'\\u092E\\u093E\\u0952\\u0919\\u094D'", "'\\u091E\\u093F\\u092E\\u093F\\u0951\\u0926\\u093E\\u0901\\u0951'", 
			"'\\u092E\\u0940\\u0952\\u0919\\u094D'", "'\\u092E\\u0941\\u0951\\u0938\\u0901\\u0951'", 
			"'\\u092E\\u0941\\u0952\\u0939\\u0901\\u0951'", "'\\u092E\\u0943\\u0951\\u0937\\u0901\\u0951\\u0952'", 
			"'\\u092F\\u0951\\u0938\\u0941\\u0901\\u0951'", "'\\u092F\\u0941\\u0952\\u091C\\u0901\\u0951\\u0952'", 
			"'\\u092F\\u0941\\u0952\\u0927\\u0901\\u0951'", "'\\u092F\\u0941\\u0951\\u092A\\u0901\\u0951'", 
			"'\\u0930\\u0952\\u091E\\u094D\\u091C\\u0901\\u0951\\u0952'", "'\\u0930\\u0952\\u0927\\u0901\\u0951'", 
			"'\\u0930\\u093E\\u0927\\u094B\\u0901\\u0951'", "'\\u0930\\u093F\\u0951\\u0937\\u0901\\u0951'", 
			"'\\u0930\\u0940\\u0952\\u0919\\u094D'", "'\\u0930\\u0941\\u0951\\u092A\\u0901\\u0951'", 
			"'\\u0930\\u0941\\u0951\\u0937\\u0901\\u0951'", "'\\u0932\\u093F\\u0952\\u0936\\u0901\\u0952'", 
			"'\\u0932\\u0940\\u0952\\u0919\\u094D'", null, null, "'\\u0932\\u0941\\u0951\\u092A\\u0901\\u0951'", 
			null, "'\\u0935\\u0951\\u0938\\u0941\\u0901\\u0951'", "'\\u0935\\u093E\\u0951\\u0935\\u0943\\u0951\\u0924\\u0941\\u0901\\u0952'", 
			"'\\u0935\\u093E\\u0951\\u0936\\u0943\\u0901\\u0952'", "'\\u0908\\u0901\\u0951\\u0936\\u0941\\u0951\\u091A\\u093F\\u0901\\u0951\\u0952\\u0930\\u094D'", 
			"'\\u0936\\u0941\\u0952\\u0927\\u0901\\u0951'", "'\\u0936\\u0941\\u0952\\u0937\\u0901\\u0951'", 
			"'\\u0936\\u094B\\u0952'", "'\\u0936\\u094D\\u0930\\u0951\\u092E\\u0941\\u0901\\u0951'", 
			"'\\u0936\\u094D\\u0932\\u093F\\u0952\\u0937\\u0901\\u0951'", "'\\u0937\\u094D\\u0920\\u093F\\u0951\\u0935\\u0941\\u0901\\u0951'", 
			"'\\u0938\\u0951\\u092E\\u0940\\u0901\\u0951'", "'\\u0937\\u0951\\u0939\\u0901\\u0951'", 
			"'\\u0937\\u093F\\u0952\\u0927\\u0941\\u0901\\u0951'", "'\\u0937\\u093F\\u0951\\u0935\\u0941\\u0901\\u0951'", 
			"'\\u0937\\u0941\\u0951\\u0939\\u0901\\u0951'", null, "'\\u0937\\u094D\\u0930\\u0941\\u091C\\u0951\\u0901'", 
			"'\\u0937\\u094D\\u091F\\u093F\\u0951\\u092E\\u0901\\u0951'", "'\\u0937\\u094D\\u091F\\u0941\\u0951\\u092A\\u0901\\u0951'", 
			"'\\u0937\\u094D\\u0923\\u0951\\u0938\\u0941\\u0901\\u0951'", "'\\u0937\\u094D\\u0923\\u093F\\u0903\\u0951'", 
			"'\\u0937\\u094D\\u0923\\u0941\\u0952\\u0939\\u0901\\u0951'", "'\\u0937\\u094D\\u0930\\u093F\\u0935\\u0941\\u0901\\u0951'", 
			"'\\u0937\\u094D\\u0935\\u093F\\u0952\\u0926\\u093E\\u0901\\u0951'", 
			"'\\u0939\\u0943\\u0951\\u0937\\u0901\\u0951'", null, null, "'\\u0909\\u0951\\u091B\\u0940\\u0901\\u0951'", 
			"'\\u0909\\u0951\\u091C\\u094D\\u091D\\u0901\\u0951'", "'\\u0909\\u0951\\u091B\\u093F\\u0901\\u0951'", 
			"'\\u0909\\u0951\\u092C\\u0901\\u0951'", "'\\u0909\\u0951\\u092D\\u0901\\u0951'", 
			"'\\u0909\\u0951\\u092E\\u094D\\u092D\\u0901\\u0951'", "'\\u090B\\u0951\\u091A\\u0901\\u0951'", 
			"'\\u090B\\u0951\\u091B\\u0901\\u0951'", "'\\u090B\\u0951\\u092B\\u0901\\u0951'", 
			"'\\u090B\\u0951\\u092E\\u094D\\u092B\\u0901\\u0951'", "'\\u090B\\u0951\\u0937\\u0940\\u0901\\u0951'", 
			"'\\u0915\\u0951\\u0921\\u0901\\u0951'", "'\\u0915\\u093F\\u0951\\u0932\\u0901\\u0951'", 
			"'\\u0915\\u0941\\u0951\\u0919\\u094D\\u092E\\u094D'", "'\\u0915\\u0941\\u0951\\u091A\\u0901\\u0951'", 
			"'\\u0915\\u0941\\u0951\\u091F\\u0901\\u0951'", "'\\u0915\\u0941\\u0951\\u0921\\u0901\\u0951'", 
			null, "'\\u0915\\u0941\\u0951\\u0930\\u0901\\u0951'", "'\\u0915\\u0942\\u0951\\u0919\\u094D'", 
			"'\\u0915\\u0943\\u0951\\u0921\\u0901\\u0951'", null, "'\\u0915\\u0943\\u0952\\u0937\\u0901\\u0951\\u0952'", 
			null, "'\\u0915\\u094D\\u0930\\u0941\\u0951\\u0921\\u0901\\u0951'", "'\\u0915\\u094D\\u0937\\u093F\\u0952'", 
			"'\\u0915\\u094D\\u0937\\u093F\\u0952\\u092A\\u0901\\u0951\\u0952'", 
			"'\\u0915\\u094D\\u0937\\u0941\\u0951\\u0930\\u0901\\u0951'", "'\\u0916\\u093F\\u0952\\u0926\\u0901\\u0951'", 
			"'\\u0916\\u0941\\u0951\\u0921\\u0901\\u0951'", "'\\u0916\\u0941\\u0951\\u0930\\u0901\\u0951'", 
			"'\\u0917\\u0941\\u0952'", "'\\u0917\\u0941\\u0951\\u091C\\u0901\\u0951'", 
			"'\\u0917\\u0941\\u0951\\u0921\\u0901\\u0951'", "'\\u0917\\u0941\\u0951\\u092B\\u0901\\u0951'", 
			"'\\u0917\\u0941\\u0951\\u092E\\u094D\\u092B\\u0901\\u0951'", "'\\u0917\\u0941\\u0951\\u0930\\u0940\\u0901\\u0952'", 
			null, "'\\u0918\\u0941\\u0951\\u091F\\u0901\\u0951'", "'\\u0918\\u0941\\u0951\\u0923\\u0901\\u0951'", 
			"'\\u0918\\u0941\\u0951\\u0930\\u0901\\u0951'", "'\\u0918\\u0942\\u0951\\u0930\\u094D\\u0923\\u0901\\u0951'", 
			"'\\u091A\\u0951\\u0930\\u094D\\u091A\\u0901\\u0951'", "'\\u091A\\u0951\\u0932\\u0901\\u0951'", 
			"'\\u091A\\u093F\\u0951\\u0932\\u0901\\u0951'", "'\\u091A\\u0941\\u0951\\u091F\\u0901\\u0951'", 
			"'\\u091A\\u0941\\u0951\\u0921\\u0901\\u0951'", "'\\u091A\\u0943\\u0951\\u0924\\u0940\\u0901\\u0951'", 
			"'\\u091B\\u0941\\u0951\\u091F\\u0901\\u0951'", "'\\u091B\\u0941\\u0951\\u0921\\u0901\\u0951'", 
			"'\\u091B\\u0941\\u0952\\u092A\\u0901\\u0951'", "'\\u091B\\u0941\\u0951\\u0930\\u0901\\u0951'", 
			"'\\u091C\\u0951\\u0930\\u094D\\u091C\\u0901\\u0951'", "'\\u091C\\u0941\\u0951\\u091F\\u0901\\u0951'", 
			null, null, "'\\u091C\\u0941\\u0951\\u0928\\u0901\\u0951'", "'\\u091C\\u0941\\u0951\\u0937\\u0940\\u0901\\u0952'", 
			"'\\u091D\\u0951\\u0930\\u094D\\u091D\\u0901\\u0951'", null, "'\\u0924\\u093F\\u0951\\u0932\\u0901\\u0951'", 
			"'\\u0924\\u0941\\u0951\\u091F\\u0901\\u0951'", "'\\u0924\\u0941\\u0951\\u0921\\u0901\\u0951'", 
			"'\\u0924\\u0941\\u0951\\u0923\\u0901\\u0951'", "'\\u0924\\u0941\\u0952\\u0926\\u0901\\u0951\\u0952'", 
			"'\\u0924\\u0941\\u0951\\u092A\\u0901\\u0951'", "'\\u0924\\u0941\\u0951\\u092B\\u0901\\u0951'", 
			"'\\u0924\\u0941\\u0951\\u092E\\u094D\\u092A\\u0901\\u0951'", "'\\u0924\\u0941\\u0951\\u092E\\u094D\\u092B\\u0901\\u0951'", 
			"'\\u0924\\u0943\\u0902\\u0951\\u0939\\u0942\\u0901\\u0951'", null, "'\\u0924\\u0943\\u0951\\u092B\\u0901\\u0951'", 
			"'\\u0924\\u0943\\u0951\\u092E\\u094D\\u092A\\u0901\\u0951'", "'\\u0924\\u0943\\u0951\\u092E\\u094D\\u092B\\u0901\\u0951'", 
			"'\\u0924\\u0943\\u0951\\u0939\\u0942\\u0901\\u0951'", "'\\u0924\\u094D\\u0930\\u0941\\u0951\\u091F\\u0901\\u0951'", 
			"'\\u0924\\u094D\\u0935\\u0951\\u091A\\u0901\\u0951'", "'\\u0925\\u0941\\u0951\\u0921\\u0901\\u0951'", 
			"'\\u0926\\u093F\\u0952\\u0936\\u0901\\u0951\\u0952'", "'\\u0926\\u0943\\u0952\\u0919\\u094D'", 
			"'\\u0926\\u0943\\u0951\\u092A\\u0901\\u0951'", "'\\u0926\\u0943\\u0951\\u092B\\u0901\\u0951'", 
			"'\\u0926\\u0943\\u0951\\u092D\\u0940\\u0901\\u0951'", "'\\u0926\\u0943\\u0951\\u092E\\u094D\\u092A\\u0901\\u0951'", 
			"'\\u0926\\u0943\\u0951\\u092E\\u094D\\u092B\\u0901\\u0951'", "'\\u0926\\u094D\\u0930\\u0941\\u0951\\u0923\\u0901\\u0951'", 
			"'\\u0927\\u093F\\u0952'", "'\\u0927\\u0942\\u0951'", "'\\u0927\\u0943\\u0952\\u0919\\u094D'", 
			"'\\u0927\\u094D\\u0930\\u0941\\u0952'", "'\\u0923\\u093F\\u0951'", "'\\u0923\\u0942\\u0951'", 
			"'\\u0923\\u0941\\u0952\\u0926\\u0951'", "'\\u0923\\u0941\\u0952\\u0926\\u0901\\u0951\\u0952'", 
			"'\\u092A\\u093F\\u0951'", "'\\u092A\\u093F\\u0951\\u0936\\u0901\\u0951'", 
			"'\\u092A\\u0941\\u0951\\u091F\\u0901\\u0951'", "'\\u092A\\u0941\\u0951\\u0921\\u0901\\u0951'", 
			"'\\u092A\\u0941\\u0951\\u0923\\u0901\\u0951'", "'\\u092A\\u0941\\u0951\\u0930\\u0901\\u0951'", 
			"'\\u092A\\u0943\\u0952\\u0919\\u094D'", "'\\u092A\\u0943\\u0951\\u0921\\u0901\\u0951'", 
			"'\\u092A\\u0943\\u0951\\u0923\\u0901\\u0951'", "'\\u092A\\u094D\\u0930\\u0952\\u091B\\u0901\\u0951'", 
			"'\\u092C\\u093F\\u0951\\u0932\\u0901\\u0951'", null, "'\\u092D\\u0941\\u0952\\u091C\\u094B\\u0901\\u0951'", 
			null, "'\\u092D\\u094D\\u0930\\u0952\\u0938\\u0901\\u0951\\u0952'", "'\\u091F\\u0941\\u092E\\u0952\\u0938\\u0901\\u0951\\u0952'", 
			"'\\u092E\\u093F\\u0951\\u091B\\u0901\\u0951'", "'\\u092E\\u093F\\u0951\\u0932\\u0901\\u0951'", 
			"'\\u092E\\u093F\\u0951\\u0932\\u0901\\u0951\\u0952'", "'\\u092E\\u093F\\u0951\\u0937\\u0901\\u0951'", 
			"'\\u092E\\u0941\\u0952\\u091A\\u0962\\u0901\\u0951\\u0951'", "'\\u092E\\u0941\\u0951\\u091F\\u0901\\u0951'", 
			"'\\u092E\\u0941\\u0951\\u0923\\u0901\\u0951'", "'\\u092E\\u0941\\u0951\\u0930\\u0901\\u0951'", 
			"'\\u092E\\u0943\\u0952\\u0919\\u094D'", null, "'\\u092E\\u0943\\u0951\\u0923\\u0901\\u0951'", 
			"'\\u092E\\u0943\\u0952\\u0936\\u0901\\u0951'", "'\\u0930\\u093F\\u0952'", 
			"'\\u0930\\u093F\\u0951\\u092B\\u0901\\u0951'", "'\\u0930\\u093F\\u0952\\u0936\\u0901\\u0951'", 
			"'\\u0930\\u093F\\u0951\\u0939\\u0901\\u0951'", "'\\u0930\\u0941\\u0952\\u091C\\u094B\\u0901\\u0951'", 
			"'\\u0930\\u0941\\u0952\\u0936\\u0901\\u0951'", "'\\u0913\\u0901\\u0951\\u0932\\u0951\\u091C\\u0940\\u0901\\u0952'", 
			"'\\u0913\\u0901\\u0951\\u0932\\u0951\\u0938\\u094D\\u091C\\u0940\\u0901\\u0952'", 
			"'\\u0932\\u093F\\u0951\\u0916\\u0901\\u0951'", "'\\u0932\\u093F\\u0952\\u092A\\u0901\\u0951\\u0952'", 
			"'\\u0932\\u093F\\u0952\\u0936\\u0901\\u0951'", null, null, "'\\u0932\\u0941\\u0951\\u0921\\u0901\\u0951'", 
			"'\\u0932\\u0941\\u0951\\u092B\\u0901\\u0951'", null, "'\\u0935\\u093F\\u0951\\u091B\\u0901\\u0951'", 
			"'\\u0913\\u0901\\u0951\\u0935\\u093F\\u0951\\u091C\\u0940\\u0901\\u0952'", 
			"'\\u0935\\u093F\\u0951\\u0926\\u0962\\u0901\\u0951\\u0951\\u0952'", 
			"'\\u0935\\u093F\\u0951\\u0927\\u0901\\u0951'", "'\\u0935\\u093F\\u0951\\u0932\\u0901\\u0951'", 
			"'\\u0935\\u093F\\u0952\\u0936\\u0901\\u0951'", "'\\u0935\\u0943\\u0951\\u0923\\u0901\\u0951'", 
			"'\\u0935\\u0943\\u0951\\u0939\\u0942\\u0901\\u0951'", "'\\u0935\\u094D\\u092F\\u0951\\u091A\\u0901\\u0951'", 
			"'\\u0913\\u0901\\u0951\\u0935\\u094D\\u0930\\u0951\\u0936\\u094D\\u091A\\u0942\\u0901\\u0951'", 
			"'\\u0935\\u094D\\u0930\\u0941\\u0951\\u0921\\u0901\\u0951'", "'\\u0936\\u0952\\u0926\\u0962\\u0901\\u0951'", 
			"'\\u0936\\u093F\\u0951\\u0932\\u0901\\u0951'", "'\\u0936\\u0941\\u0951\\u0928\\u0901\\u0951'", 
			"'\\u0936\\u0941\\u0951\\u092D\\u0901\\u0951'", "'\\u0936\\u0941\\u0951\\u092E\\u094D\\u092D\\u0901\\u0951'", 
			"'\\u0937\\u0952\\u0926\\u0962\\u0901\\u0951'", "'\\u0937\\u093F\\u0952\\u091A\\u0901\\u0951\\u0952'", 
			"'\\u0937\\u093F\\u0951\\u0932\\u0901\\u0951'", "'\\u0937\\u0941\\u0951\\u0930\\u0901\\u0951'", 
			"'\\u0937\\u0942\\u0951'", "'\\u0938\\u0943\\u0952\\u091C\\u0901\\u0951'", 
			"'\\u0938\\u094D\\u0924\\u0943\\u0951\\u0939\\u0942\\u0901\\u0951'", 
			"'\\u0938\\u094D\\u0925\\u0941\\u0951\\u0921\\u0901\\u0951'", "'\\u0938\\u094D\\u092A\\u0943\\u0952\\u0936\\u0901\\u0951'", 
			"'\\u0938\\u094D\\u092B\\u0951\\u0930\\u0901\\u0951'", "'\\u0938\\u094D\\u092B\\u0951\\u0932\\u0901\\u0951'", 
			"'\\u0938\\u094D\\u092B\\u0941\\u0951\\u091F\\u0901\\u0951'", "'\\u0938\\u094D\\u092B\\u0941\\u0951\\u0921\\u0901\\u0951'", 
			"'\\u0938\\u094D\\u092B\\u0941\\u0951\\u0930\\u0901\\u0951'", "'\\u0938\\u094D\\u092B\\u0941\\u0951\\u0932\\u0901\\u0951'", 
			"'\\u0939\\u093F\\u0951\\u0932\\u0901\\u0951'", "'\\u0939\\u0941\\u0951\\u0921\\u0901\\u0951'", 
			"'\\u0905\\u0951\\u091E\\u094D\\u091C\\u0942\\u0901\\u0951'", "'\\u091E\\u093F\\u0907\\u0952\\u0928\\u094D\\u0927\\u0940\\u0901\\u0951'", 
			"'\\u0909\\u0951\\u0928\\u094D\\u0926\\u0940\\u0901\\u0951'", null, "'\\u0915\\u094D\\u0937\\u0941\\u0952\\u0926\\u093F\\u0901\\u0951\\u0952\\u0930\\u094D'", 
			null, "'\\u091B\\u093F\\u0952\\u0926\\u093F\\u0901\\u0951\\u0952\\u0930\\u094D'", 
			"'\\u0909\\u0901\\u0951\\u091B\\u0943\\u0951\\u0926\\u093F\\u0901\\u0951\\u0952\\u0930\\u094D'", 
			"'\\u0924\\u0951\\u091E\\u094D\\u091A\\u0942\\u0901\\u0951'", "'\\u0909\\u0901\\u0951\\u0924\\u0943\\u0951\\u0926\\u093F\\u0901\\u0951\\u0952\\u0930\\u094D'", 
			"'\\u0924\\u0943\\u0951\\u0939\\u0901\\u0951'", "'\\u092A\\u093F\\u0952\\u0937\\u0962\\u0901\\u0951'", 
			"'\\u092A\\u0943\\u0951\\u091A\\u0940\\u0901\\u0951'", "'\\u092D\\u0952\\u091E\\u094D\\u091C\\u094B\\u0901\\u0951'", 
			"'\\u092D\\u093F\\u0952\\u0926\\u093F\\u0901\\u0951\\u0952\\u0930\\u094D'", 
			"'\\u092D\\u0941\\u0952\\u091C\\u0901\\u0951'", "'\\u092F\\u0941\\u0952\\u091C\\u093F\\u0901\\u0951\\u0952\\u0930\\u094D'", 
			"'\\u0930\\u093F\\u0952\\u091A\\u093F\\u0901\\u0951\\u0952\\u0930\\u094D'", 
			"'\\u0930\\u0941\\u0952\\u0927\\u093F\\u0901\\u0951\\u0952\\u0930\\u094D'", 
			"'\\u0935\\u093F\\u0952\\u091A\\u093F\\u0901\\u0951\\u0952\\u0930\\u094D'", 
			"'\\u0913\\u0901\\u0951\\u0935\\u093F\\u0951\\u091C\\u0940\\u0901\\u0951'", 
			"'\\u0935\\u093F\\u0952\\u0926\\u0901\\u0952'", "'\\u0935\\u0943\\u0951\\u091C\\u0940\\u0901\\u0951'", 
			"'\\u0936\\u093F\\u0952\\u0937\\u0962\\u0901\\u0951'", "'\\u0939\\u093F\\u0951\\u0938\\u093F\\u0901\\u0951'", 
			"'\\u090B\\u0951\\u0923\\u0941\\u0901\\u0951\\u0952'", "'\\u0921\\u0941\\u0915\\u0943\\u0952\\u091E\\u094D'", 
			"'\\u0915\\u094D\\u0937\\u0951\\u0923\\u0941\\u0901\\u0951\\u0952'", 
			"'\\u0915\\u094D\\u0937\\u093F\\u0951\\u0923\\u0941\\u0901\\u0951\\u0952'", 
			"'\\u0918\\u0943\\u0951\\u0923\\u0941\\u0901\\u0951\\u0952'", "'\\u0924\\u0951\\u0928\\u0941\\u0901\\u0951\\u0952'", 
			"'\\u0924\\u0943\\u0951\\u0923\\u0941\\u0901\\u0951\\u0952'", "'\\u092E\\u0951\\u0928\\u0941\\u0901\\u0952'", 
			"'\\u0935\\u0951\\u0928\\u0941\\u0901\\u0951\\u0952'", "'\\u0937\\u0951\\u0928\\u0941\\u0901\\u0951\\u0952'", 
			"'\\u0905\\u0951\\u0936\\u0901\\u0951'", null, "'\\u0960'", "'\\u0915\\u0941\\u0951\\u0928\\u094D\\u0925\\u0901\\u0951'", 
			"'\\u0915\\u0941\\u0951\\u0937\\u0901\\u0951'", "'\\u0915\\u0944\\u0951\\u091E\\u094D'", 
			null, "'\\u0915\\u094D\\u0928\\u0942\\u0951\\u091E\\u094D'", "'\\u0921\\u0941\\u0915\\u094D\\u0930\\u0940\\u0952\\u091E\\u094D'", 
			"'\\u0915\\u094D\\u0932\\u093F\\u0951\\u0936\\u0942\\u0901\\u0951'", 
			"'\\u0915\\u094D\\u0937\\u0940\\u0952\\u0937\\u094D'", null, "'\\u0916\\u0951\\u091A\\u0901\\u0951'", 
			"'\\u0916\\u0951\\u0935\\u0901\\u0951'", null, null, "'\\u0917\\u094D\\u0930\\u0951\\u0928\\u094D\\u0925\\u0901\\u0951'", 
			"'\\u0917\\u094D\\u0930\\u0951\\u0939\\u0901\\u0951\\u0952'", "'\\u091C\\u0944\\u0951'", 
			"'\\u091C\\u094D\\u091E\\u093E\\u0952'", "'\\u091C\\u094D\\u092F\\u093E\\u0952'", 
			"'\\u091D\\u0944\\u0951'", null, "'\\u0926\\u0944\\u0951'", "'\\u0926\\u094D\\u0930\\u0942\\u0951\\u091E\\u094D'", 
			null, "'\\u0927\\u0944\\u0951'", "'\\u0909\\u0901\\u0951\\u0927\\u094D\\u0930\\u0952\\u0938\\u0901\\u0951'", 
			null, "'\\u0928\\u0944\\u0951'", null, "'\\u092A\\u0942\\u0951'", null, 
			"'\\u092A\\u094D\\u0930\\u0940\\u0952\\u091E\\u094D'", "'\\u092A\\u094D\\u0930\\u0941\\u0951\\u0937\\u0901\\u0951'", 
			"'\\u092A\\u094D\\u0932\\u0940\\u0952'", null, "'\\u092C\\u0952\\u0928\\u094D\\u0927\\u0901\\u0951'", 
			"'\\u092C\\u094D\\u0932\\u0940\\u0952'", "'\\u092D\\u0944\\u0951'", "'\\u092D\\u094D\\u0930\\u0940\\u0952'", 
			"'\\u092E\\u0951\\u0928\\u094D\\u0925\\u0901\\u0951'", "'\\u092E\\u0940\\u0952\\u091E\\u094D'", 
			"'\\u092E\\u0941\\u0951\\u0937\\u0901\\u0951'", "'\\u092E\\u0942\\u0951\\u091E\\u094D'", 
			null, "'\\u092E\\u0943\\u0951\\u0926\\u0901\\u0951'", "'\\u092E\\u0944\\u0951'", 
			"'\\u092F\\u0941\\u0952\\u091E\\u094D'", "'\\u0930\\u0940\\u0952'", "'\\u0932\\u0940\\u0952'", 
			"'\\u0932\\u0942\\u0951\\u091E\\u094D'", "'\\u0935\\u093F\\u0952\\u0937\\u0901\\u0951'", 
			"'\\u0935\\u0943\\u0951\\u0919\\u094D'", "'\\u0935\\u0944\\u0951\\u091E\\u094D'", 
			"'\\u0935\\u0944\\u0951'", "'\\u0935\\u094D\\u0930\\u0940\\u0952'", "'\\u0935\\u094D\\u0932\\u0940\\u0952'", 
			"'\\u0936\\u0944\\u0951'", null, null, "'\\u0936\\u094D\\u0930\\u0940\\u0952\\u091E\\u094D'", 
			null, "'\\u0938\\u094D\\u0915\\u0952\\u092E\\u094D\\u092D\\u0941\\u0901\\u0951'", 
			"'\\u0938\\u094D\\u0915\\u0941\\u0952\\u091E\\u094D'", "'\\u0938\\u094D\\u0915\\u0941\\u0952\\u092E\\u094D\\u092D\\u0941\\u0901\\u0951'", 
			"'\\u0938\\u094D\\u0924\\u0952\\u092E\\u094D\\u092D\\u0941\\u0901\\u0951'", 
			"'\\u0938\\u094D\\u0924\\u0941\\u0952\\u092E\\u094D\\u092D\\u0941\\u0901\\u0951'", 
			"'\\u0938\\u094D\\u0924\\u0944\\u0951\\u091E\\u094D'", "'\\u0939\\u0947\\u0951\\u0920\\u0901\\u0951'", 
			"'\\u0939\\u0947\\u0951\\u0922\\u0901\\u0951'", null, "'\\u0915\\u093F\\u0952'", 
			"'\\u0915\\u093F\\u0924\\u0901'", "'\\u0917\\u093E\\u0952'", "'\\u0918\\u0943\\u0952'", 
			"'\\u091C\\u0928\\u0901\\u0951'", "'\\u0924\\u0941\\u0930\\u0901\\u0951'", 
			"'\\u0921\\u0941\\u0926\\u093E\\u0952\\u0919\\u094D'", "'\\u0927\\u0928\\u0901\\u0951'", 
			"'\\u0921\\u0941\\u0927\\u093E\\u0952\\u0919\\u094D'", "'\\u0927\\u093F\\u0937\\u0901\\u0951'", 
			"'\\u0923\\u093F\\u0952\\u091C\\u093F\\u0901\\u0951\\u0952\\u0930\\u094D'", 
			null, null, "'\\u092D\\u0951\\u0938\\u0901\\u0951'", "'\\u091E\\u093F\\u092D\\u0940\\u0952'", 
			"'\\u0921\\u0941\\u092D\\u0943\\u0952\\u091E\\u094D'", null, "'\\u0935\\u093F\\u0952\\u091C\\u093F\\u0901\\u0951\\u0952\\u0930\\u094D'", 
			"'\\u0935\\u093F\\u0937\\u0948\\u0901'", "'\\u0938\\u0943\\u0952'", "'\\u0913\\u0939\\u093E\\u0952\\u0939'", 
			"'\\u0913\\u0939\\u093E\\u0952\\u0915\\u094D'", "'\\u0939\\u0941\\u0952'", 
			"'\\u0939\\u0943\\u0952'", "'\\u0939\\u094D\\u0930\\u0940\\u0952'", "'\\u0905\\u0951\\u0936\\u0942\\u0901\\u0952'", 
			"'\\u0905\\u0951\\u0939\\u0901\\u0951'", "'\\u0906\\u0952\\u092A\\u0962\\u0901\\u0951'", 
			"'\\u090B\\u0951'", "'\\u090B\\u0951\\u0927\\u0941\\u0901\\u0951'", "'\\u0915\\u0943\\u0952\\u091E\\u094D'", 
			"'\\u0915\\u094D\\u0937\\u093F\\u0951'", "'\\u0915\\u094D\\u0937\\u0940\\u0951'", 
			"'\\u091A\\u0951\\u092E\\u0941\\u0901\\u0951'", "'\\u091A\\u093F\\u0952\\u091E\\u094D'", 
			"'\\u091A\\u093F\\u0951\\u0930\\u093F\\u0951'", "'\\u091C\\u093F\\u0951\\u0930\\u093F\\u0951'", 
			"'\\u0924\\u093F\\u0951\\u0915\\u0901\\u0951'", "'\\u0924\\u093F\\u0951\\u0917\\u0901\\u0951'", 
			null, "'\\u0926\\u0951\\u0918\\u0901\\u0951'", "'\\u0926\\u0951\\u092E\\u094D\\u092D\\u0941\\u0901\\u0951'", 
			"'\\u0926\\u093E\\u0951\\u0936\\u0901\\u0951'", "'\\u091F\\u0941\\u0951\\u0926\\u0941\\u0952'", 
			"'\\u0926\\u0943\\u0951'", "'\\u0927\\u0941\\u0952\\u091E\\u094D'", null, 
			"'\\u091E\\u093F\\u0927\\u0943\\u0951\\u0937\\u093E\\u0901\\u0951'", 
			null, "'\\u0921\\u0941\\u092E\\u093F\\u0952\\u091E\\u094D'", "'\\u0930\\u093E\\u0952\\u0927\\u0901\\u0951'", 
			"'\\u0930\\u093F\\u0951'", "'\\u0935\\u0943\\u0951'", "'\\u0936\\u0952\\u0915\\u0962\\u0901\\u0951'", 
			"'\\u0936\\u093F\\u0952\\u091E\\u094D'", "'\\u0937\\u0951\\u0918\\u0901\\u0951'", 
			"'\\u0938\\u093E\\u0952\\u0927\\u0901\\u0951'", null, "'\\u0937\\u0941\\u0952\\u091E\\u094D'", 
			"'\\u0937\\u094D\\u091F\\u093F\\u0951\\u0918\\u0901\\u0952'", "'\\u0938\\u094D\\u0924\\u0943\\u0952\\u091E\\u094D'", 
			"'\\u0938\\u094D\\u092A\\u0943\\u0952'", "'\\u0938\\u094D\\u092E\\u0943\\u0952'", 
			"'\\u0939\\u093F\\u0952'", "'\\u0905\\u0902\\u0951\\u0938\\u0951'", "'\\u0905\\u0902\\u0951\\u0939\\u093F\\u0901\\u0951'", 
			"'\\u0905\\u0902\\u0951\\u0919\\u094D\\u0915\\u0951'", "'\\u0905\\u0902\\u0951\\u0919\\u094D\\u0917\\u0951'", 
			"'\\u0905\\u0902\\u0951\\u091E\\u094D\\u091A\\u0941\\u0901\\u0951'", 
			"'\\u0905\\u0902\\u0951\\u091C\\u093F\\u0901\\u0951'", "'\\u0905\\u0902\\u0951\\u091F\\u094D\\u091F\\u0901\\u0951'", 
			"'\\u0905\\u0902\\u0951\\u0928\\u094D\\u0927\\u0951'", "'\\u0905\\u0902\\u0951\\u092E\\u0901\\u0951'", 
			"'\\u0905\\u0902\\u0951\\u0930\\u094D\\u0915\\u0901\\u0951'", "'\\u0905\\u0902\\u0951\\u0930\\u094D\\u091A\\u0901\\u0951'", 
			"'\\u0905\\u0902\\u0951\\u0930\\u094D\\u091C\\u0901\\u0951'", "'\\u0905\\u0902\\u0951\\u0930\\u094D\\u0925\\u0952'", 
			"'\\u0905\\u0902\\u0951\\u0930\\u094D\\u0926\\u0901\\u0951'", null, null, 
			"'\\u0906\\u0951\\u0915\\u094D\\u0930\\u0928\\u094D\\u0926\\u0901'", 
			"'\\u0906\\u0951\\u092A\\u0962\\u0901\\u0951'", "'\\u0906\\u0952\\u0937\\u0926\\u0901'", 
			null, "'\\u0908\\u0951\\u0921\\u0901\\u0951'", "'\\u0908\\u0951\\u0930\\u0901\\u0951'", 
			"'\\u0909\\u0951\\u0918\\u094D\\u0930\\u0951\\u0938\\u0901\\u0951'", 
			"'\\u090A\\u0951\\u0928\\u0951'", "'\\u090A\\u0951\\u0930\\u094D\\u091C\\u0901\\u0951'", 
			"'\\u0913\\u0901\\u0951\\u0932\\u0951\\u0921\\u093F\\u0901\\u0951'", 
			"'\\u0915\\u0951\\u0923\\u0901\\u0951'", "'\\u0915\\u0951\\u0920\\u093F\\u0901\\u0951'", 
			"'\\u0915\\u0951\\u0921\\u093F\\u0901\\u0951'", "'\\u0915\\u0951\\u0924\\u094D\\u0930\\u0951'", 
			"'\\u0915\\u0951\\u0925\\u0951'", "'\\u0915\\u0951\\u0930\\u094D\\u0923\\u0901\\u0951'", 
			"'\\u0915\\u0951\\u0930\\u094D\\u0924\\u0901\\u0951'", null, null, "'\\u0915\\u093E\\u0951\\u0932\\u0951'", 
			"'\\u0915\\u0940\\u0951\\u091F\\u0901\\u0951'", null, null, "'\\u0915\\u0941\\u0951\\u091F\\u094D\\u091F\\u0901\\u0951'", 
			null, null, null, "'\\u0915\\u0941\\u0951\\u0920\\u093F\\u0901\\u0951'", 
			null, null, "'\\u0915\\u0941\\u0951\\u0924\\u094D\\u0938\\u0901\\u0952'", 
			"'\\u0915\\u0941\\u0951\\u0926\\u0943\\u0901\\u0951'", "'\\u0915\\u0941\\u0951\\u0926\\u094D\\u0930\\u093F\\u0901\\u0951'", 
			null, "'\\u0915\\u0941\\u0951\\u092E\\u093E\\u0951\\u0930\\u0951'", "'\\u0915\\u0941\\u0951\\u092C\\u093F\\u0901\\u0951'", 
			"'\\u0915\\u0941\\u0951\\u092D\\u093F\\u0901\\u0951'", "'\\u0915\\u0941\\u0951\\u0938\\u094D\\u092E\\u0901\\u0952'", 
			"'\\u0915\\u0941\\u0951\\u0939\\u0952'", "'\\u0915\\u0942\\u0951\\u091F\\u0901\\u0951'", 
			"'\\u0915\\u0942\\u0951\\u091F\\u0901\\u0952'", "'\\u0915\\u0942\\u0951\\u0923\\u0901\\u0951'", 
			"'\\u0915\\u0942\\u0951\\u0923\\u0901\\u0952'", "'\\u0915\\u0943\\u0951\\u092A\\u0951'", 
			"'\\u0915\\u0943\\u092A\\u0901\\u0951'", "'\\u0915\\u0944\\u0951\\u0924\\u0901\\u0951'", 
			"'\\u0915\\u0947\\u0951\\u0924\\u0901\\u0951'", "'\\u0915\\u094D\\u0932\\u0951\\u092A\\u0901\\u0951'", 
			"'\\u0915\\u094D\\u0937\\u0951\\u091C\\u093F\\u0901\\u0951'", "'\\u0915\\u094D\\u0937\\u0951\\u092A\\u0901\\u0951'", 
			"'\\u0915\\u094D\\u0937\\u0951\\u092A\\u093F\\u0901\\u0951'", "'\\u0915\\u094D\\u0937\\u0951\\u0932\\u0901\\u0951'", 
			"'\\u0915\\u094D\\u0937\\u094B\\u0951\\u091F\\u0951'", "'\\u0916\\u0951\\u091F\\u094D\\u091F\\u0901\\u0951'", 
			"'\\u0916\\u0951\\u0921\\u0901\\u0951'", "'\\u0916\\u0951\\u0921\\u093F\\u0901\\u0951'", 
			"'\\u0916\\u0941\\u0951\\u0921\\u093F\\u0901\\u0951'", "'\\u0916\\u0947\\u0951\\u091F\\u0901\\u0951'", 
			"'\\u0916\\u0947\\u0951\\u0921\\u0901\\u0951'", "'\\u0916\\u094B\\u0951\\u091F\\u0951'", 
			"'\\u0917\\u0951\\u091C\\u0901\\u0951'", "'\\u0917\\u0951\\u0923\\u0901\\u0951'", 
			"'\\u0917\\u0951\\u0926\\u0901\\u0951'", "'\\u0917\\u0951\\u0928\\u094D\\u0927\\u0901\\u0952'", 
			"'\\u0917\\u0951\\u0930\\u094D\\u091C\\u0901\\u0951'", "'\\u0917\\u0951\\u0930\\u094D\\u0926\\u0901\\u0951'", 
			"'\\u0917\\u0951\\u0930\\u094D\\u0927\\u0901\\u0951'", "'\\u0917\\u0951\\u0930\\u094D\\u0935\\u0952'", 
			"'\\u0917\\u0951\\u0930\\u094D\\u0939\\u0901\\u0951'", "'\\u0917\\u0951\\u0932\\u0901\\u0952'", 
			"'\\u0917\\u0951\\u0935\\u0947\\u0951\\u0937\\u0951'", "'\\u0917\\u0941\\u0951\\u0923\\u0901\\u0951'", 
			null, null, null, "'+'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "PRATHMA_VIBHAKTI", "PRATHMA_EKVACHAN", "PRATHMA_DWIVACHAN", "PRATHMA_BAHUVACHAN", 
			"DWITIYA_VIBHAKTI", "DWITIYA_EKVACHAN", "DWITIYA_DWIVACHAN", "DWITIYA_BAHUVACHAN", 
			"TRITIYA_VIBHAKTI", "TRITIYA_EKVACHAN", "TRITIYA_DWIVACHAN", "TRITIYA_BAHUVACHAN", 
			"CHATURTHI_VIBHAKTI", "CHATURTHI_EKVACHAN", "CHATURTHI_DWIVACHAN", "CHATURTHI_BAHUVACHAN", 
			"PANCHAMI_VIBHAKTI", "PANCHAMI_EKVACHAN", "PANCHAMI_DWIVACHAN", "PANCHAMI_BAHUVACHAN", 
			"SHASTI_VIBHAKTI", "SHASTI_EKVACHAN", "SHASTI_DWIVACHAN", "SHASTI_BAHUVACHAN", 
			"SAPTAMI_VIBHAKTI", "SAPTAMI_EKVACHAN", "SAPTAMI_DWIVACHAN", "SAPTAMI_BAHUVACHAN", 
			"SHAP_VIKARAN", "LUK_VIKARAN", "SHLU_VIKARAN", "SHYAN_VIKARAN", "SHNU_VIKARAN", 
			"SH_VIKARAN", "SHNAM_VIKARAN", "U_VIKARAN", "SHNA_VIKARAN", "NICH_VIKARAN", 
			"YAK_VIKARAN", "TAT_VIKARAN", "KRIYA_VISHESAN_ABYAY", "KAL_VACHAK_ABYAY", 
			"STHAN_VACHAK_ABYAY", "RITI_VACHAK_ABYAY", "PARIMAN_VACHAK_ABYAY", "PRSHN_VACHAK_ABYAY", 
			"SAMUCCHYA_BODHAK_ABYAY", "SAMBANDH_BODHAK_ABYAY", "VISMYADI_BODHAK_ABYAY", 
			"UPSARG", "UP_MARTHA_NIPAT", "KARMO_PASANGRAH_NIPAT", "PAD_PURNA_NARTHAK_NIPAT", 
			"ATIDESHIK_DHATU_PRATYAY", "APTYARTH_TADHT_PRATYAY", "DEVTARTH_TADHT_PRATYAY", 
			"READ_KNOW_TADHT_PRATYAY", "SAMUHARTH_TADHT_PRATYAY", "ISKA_HAI_ARTH_TADHT_PRATYAY", 
			"HONEWALE_BHAVARTH_TADHT_PRATYAY", "VIKARARTHAK_TADHT_PRATYAY", "BHAVVACHAK_TADHT_PRATYAY", 
			"TULNARTHAK_TADHT_PRATYAY", "ATYANT_BODHAK_TADHT_PRATYAY", "PANCHMYARTHAK_TADHT_PRATYAY", 
			"SAPTMYARTHAK_TADHT_PRATYAY", "PRAKARVACHAK_TADHT_PRATYAY", "PURAN_TADHT_PRATYAY", 
			"STRI_PRATYAY", "ATIDESHAK_DHATU_PRATYAY", "SARVANAMA", "AVYAYA", "SVARADI_AVYAYA", 
			"NIPAT_AVYAYA", "CADI", "PRADI", "KARMAPRAVACHANIYA", "GATI", "SAMASA_PRATIPADIKA", 
			"LAT_LAKAR", "LIT_LAKAR", "LUT_LAKAR", "LRIT_LAKAR", "LET_LAKAR", "LOT_LAKAR", 
			"LANG_LAKAR", "LING_LAKAR", "LUNG_LAKAR", "LRING_LAKAR", "PR_PRS_EK_VACHAN_PP", 
			"PR_PRS_DWI_VACHAN_PP", "PR_PRS_BAHU_VACHAN_PP", "MD_PRS_EK_VACHAN_PP", 
			"MD_PRS_DWI_VACHAN_PP", "MD_PRS_BAHU_VACHAN_PP", "UTM_PRS_EK_VACHAN_PP", 
			"UTM_DWI_VACHAN_PP", "UTM_BAHU_VACHAN_PP", "PR_PRS_EK_VACHAN_AP", "PR_PRS_DWI_VACHAN_AP", 
			"PR_PRS_BAHU_VACHAN_AP", "MD_PRS_EK_VACHAN_AP", "MD_PRS_DWI_VACHAN_AP", 
			"MD_PRS_BAHU_VACHAN_AP", "UTM_PRS_EK_VACHAN_AP", "UTM_DWI_VACHAN_AP", 
			"UTM_BAHU_VACHAN_AP", "TUMUN_KRIT_PRATYAYA", "ANEYYAR_KRIT_PRATYAYA", 
			"TAVYAT_KRIT_PRATYAYA", "KTVAA_KRIT_PRATYAYA", "SHAANACH_KRIT_PRATYAYA", 
			"SHATRU_KRIT_PRATYAYA", "LYUT_KRIT_PRATYAYA", "NVUUL_KRIT_PRATYAYA", 
			"NAMUL_KRIT_PRATYAYA", "TRACH_KRIT_PRATYAYA", "KTA_KRIT_PRATYAYA", "KTAVATU_KRIT_PRATYAYA", 
			"LYAP_KRIT_PRATYAYA", "KTIN_KRIT_PRATYAYA", "KELIMER_KRIT_PRATYAYA", 
			"KYAP_KRIT_PRATYAYA", "KVASU_KRIT_PRATYAYA", "KAANACH_KRIT_PRATYAYA", 
			"SYATRU_KRIT_PRATYAYA", "SYAMAAN_KRIT_PRATYAYA", "GHYN_KRIT_PRATYAYA", 
			"DHATU", "BHVADI", "ADADI", "JUHOTYADI", "DIVADI", "SWADI", "TUDADI", 
			"RUDHADI", "TANADI", "KRIYADI", "CHURADI", "RAMUM", "GAMAM", "AHIM", 
			"AKAM", "AKSHUM", "AGAM", "AKIM", "AGIM", "AGHIM", "ACHUM", "ANJAM", 
			"ACHIM", "ANCHUMN", "ANCCHUM", "ATAM", "ANTTAM", "ANDAM", "ADDAM", "ANNAM", 
			"ATHIM", "ANTAM", "ANDDAM", "ATIM", "ADIM", "ABRAM", "ANMAM", "ABIM", 
			"ABHIM", "AYAM", "ANYAM", "ARGHAM", "ANRCHAM", "ANRJAM", "ANRDAM", "ARBAM", 
			"ARVAM", "ANNRHAM", "ALAM", "AVAM", "ASHHAM", "ANSHAM", "AACHIM", "AASHASI", 
			"IKHAM", "IKHIM", "IGIM", "ITAM", "IDIM", "IVIM", "IKSHEM", "INKHAM", 
			"INKHIM", "IJAM", "IJIM", "IRKSHYAM", "IRSHYAM", "IISHAM", "IINSHAM", 
			"IEEHAM", "UN", "UKSHAM", "UKHAM", "UKHIM", "OKSHIM", "OKHIM", "OTHAM", 
			"ONTHAM", "URDAM", "URVIM", "USHAM", "UHIMAR", "OOTHAM", "OOYIM", "OOSHAM", 
			"OOHAM", "R", "RJAM", "RJIM", "EJRAM", "ENJRAM", "ETHAM", "EDHAM", "ESHAM", 
			"EESHAM", "OOKSHIM", "OONAM", "REMAINING_BHAVADI", "ADAM", "IIN", "IK", 
			"ANAM", "ASAM", "AASHASUM", "AASUM", "IINN", "IIDAM", "IIRAM", "INSHAM", 
			"UURNUN", "KASIN", "KASAM", "KASAN", "KUU", "TUKSHU", "KSHNU", "KHYYA", 
			"CHAKAASURNUN", "CHAKSHINN", "JAKSHAN", "JAAGRUN", "TUU", "DARIDRAAM", 
			"DAAP", "DIHAN", "DIIDHIINN", "DUHAN", "DYUU", "DRAA", "DVISHINN", "NNISHINN", 
			"NNIJINN", "NNUN", "PAA", "PIJINN", "PRIICHINN", "PRIJINN", "PRAA", "PSAA", 
			"BRUUUN", "BHA", "MAAA", "MRRUJUUN", "YAA", "YUU", "RAA", "RUU", "RUDHINN", 
			"LAA", "LIHINN", "VACHINN", "VASHINN", "VASAN", "VAA", "VIIDAN", "VII", 
			"VRIJUUN", "VRIJINN", "VEVEEN", "SHAASUM", "SHIJINN", "SHIIN", "SHRAA", 
			"SHVASHINN", "SHTIGHINN", "SHASNN", "SHUU", "SHUUN", "SHTUJINN", "SHTNA", 
			"SHTNU", "NISHVAPAM", "HANAM", "HNUUN", "KUTHAM", "KUPAM", "KUSHAM", 
			"KUSAM", "KRISHAM", "KNASUM", "KRUDHAM", "KLAMUM", "KLIDUM", "KLISHAM", 
			"KSHAMUM", "KSIPAM", "KSHUDHAM", "KSHUBHAM", "NIKSVIDAM", "KHIDAM", "GUDHAM", 
			"GUPAM", "GOORIM", "GRUDHAM", "GHURIM", "CHURIM", "CHO", "JANIM", "JASUM", 
			"JURIM", "JRUH", "JHRUH", "DIPAM", "DIM", "TAPAM", "TAMUM", "TASUM", 
			"TIMAM", "TEEMAN", "TUBHAM", "TUSHAM", "TOORI", "TRUPAM", "NITRISHAM", 
			"TRASIM", "DAMUM", "DASUM", "DIVUM", "DIPIM", "DIPIN", "DUSHAM", "DUH", 
			"DRUH", "DOO", "DHURIM", "NABHAM", "NASHAM", "NAHAM", "NRITIM", "PADAM", 
			"PING", "PUTHAM", "PUSHAM", "PUSAM", "PUSHPAM", "PURIM", "PYUSHAM", "PYUSAM", 
			"PRING", "PLUSHAM", "BASUM", "VISUM", "BUDHAM", "BUSAM", "BYUSAM", "BHASUM", 
			"BHRISHUM", "BHRASHUM", "BHRAUM", "MADIM", "MANAM", "MASIM", "MAAM", 
			"NIMIDAM", "MI", "MUSAM", "MUHAM", "MRISHAM", "YASUM", "YUJAM", "YUDHAM", 
			"YUPAM", "RANJAM", "RADHAM", "RADHO", "RISHAM", "RIMNG", "RUPAM", "RUSHAM", 
			"LISHAM", "LI", "LUTAM", "LUTHAM", "LUPAM", "LUBHAM", "VASUM", "VAVRITUM", 
			"VASHRAM", "ISHUCHIR", "SHUDHAM", "SHUSHAM", "SHO", "SHRAMUM", "SHLISHAM", 
			"STHIVUM", "SAMIM", "SHAHAN", "SHIDHAM", "SHIVUM", "SHUHAM", "SHUNG", 
			"SRUJAM", "SHTIMAM", "SHTUPAM", "SHNASUM", "SHNIHAM", "SHNUHAM", "SRIVUM", 
			"SHVIDAM", "HRISHAM", "ILM", "ISHM", "UCHHM", "UJHM", "UCHIM", "UBJM", 
			"UBHM", "UMBHM", "RICHM", "RICHHM", "RIFHM", "RIMFHM", "RINSHM", "KADHM", 
			"KILM", "KUNGM", "KUCHM", "KUTM", "KUDM", "KUNM", "KURM", "KUM", "KRIDHM", 
			"KRITIM", "KRISHN", "KRM", "KRUDHM", "KSHIM", "KSHIPM", "KSHURM", "KHIDHM", 
			"KHUDHM", "KHURM", "GUM", "GUJHM", "GUDHM", "GUFHM", "GUMFHM", "GURIM", 
			"GRR", "GHUTM", "GHUNM", "GHURM", "GHURNM", "CHARCHM", "CHALM", "CHILM", 
			"CHUTM", "CHUDM", "CHRITIM", "CHHUTM", "CHHUDM", "CHHUPM", "CHHURM", 
			"JARJHM", "JUTM", "JUDM", "JUNDM", "JUNM", "JUSHIM", "JHARJHM", "DIPM", 
			"TILM", "TUTM", "TUDM", "TUNM", "TUDHM", "TUPM", "TUFHM", "TUMPM", "TUMPHM", 
			"TRINHUM", "TRIPM", "TRIFHM", "TRIMPM", "TRIMPHM", "TRIHUM", "TRUTM", 
			"TVACHM", "THUDM", "DISHM", "DRINGM", "DRIPM", "DRIFHM", "DRIBHIM", "DRIMPM", 
			"DRIMPHM", "DRUNM", "DHIM", "DHUM", "DHRINGM", "DHRUM", "NIM", "NUUM", 
			"NUDUM", "NIDUM", "PIM", "PISHM", "PUTM", "PUDM", "PUNM", "PURM", "PRINGM", 
			"PRIPM", "PRINM", "PRACHHM", "BILM", "BRINGM", "BHJOM", "BRINGMU", "BHRASJM", 
			"TUMUSJM", "MICHM", "MILAM", "MILM", "MISHM", "MUCHM", "MUTM", "MUNM", 
			"MURM", "MRINGM", "MRIPM", "MRINM", "MRISHM", "RIM", "RINFHM", "RISHM", 
			"RIHAM", "RUJOM", "RUSHM", "OLAJIM", "OLASJM", "LIKHM", "LIPM", "LISHM", 
			"LUTM", "LUTHM", "LUDM", "LUPM", "LUBHM", "VICHM", "OVIJIM", "VIDM", 
			"VIDHM", "VILM", "VISHM", "VRINM", "VRIHUM", "VYACHM", "OVRASHCHUM", 
			"VRUM", "SHADHM", "SHILM", "SHUNM", "SHUBHM", "SHUMPHM", "SHADHUM", "SHICHM", 
			"SHHILM", "SHURM", "SHUM", "SRINGM", "STRIHUM", "STHUDM", "SPRISHM", 
			"SPHARHUM", "SPHALM", "SPHUTM", "SPHUDM", "SPHURM", "SPHULM", "HILM", 
			"HUDM", "ANJUM", "NINDHIM", "UNDHIM", "KRINTIM", "KSHUDIR", "KHIDIR", 
			"CHIDIR", "UCHHRDIR", "TANCHUM", "UTRUDIR", "TRUHUM", "PISHUM", "PRICHIM", 
			"BHAMJOM", "BHIDIR", "BHUGUM", "YUJIR", "RICHIR", "RUDHIR", "VICHIR", 
			"OMVIJIM", "VIDIR", "VRUJIM", "SHISHUM", "HISIR", "RINUM", "DUKRINM", 
			"KSHANUM", "KSHINUM", "GHRINUM", "TANUM", "TRINUM", "MANUM", "VANUM", 
			"SHANUM", "ASHAM", "ISHAM", "RUKRIN", "KUNTHAM", "KUSHHAM", "KRRIN", 
			"KRRM", "KNUUN", "DUKRIINM", "KLISHUM", "KSHISH", "KSHUNBHAM", "KHACHAM", 
			"KHAVAM", "GUNDHAM", "GRRIN", "GRANTHAM", "GRAHAM", "JRRI", "JNAA", "JYAA", 
			"JHRRIN", "TUNBHAM", "DRRIN", "DRUUN", "DHUUN", "DHRRI", "UDHRASAM", 
			"NANBHAM", "NRRIN", "PUNSHAM", "PURRRIN", "PRIKRRIN", "PRIIN", "PRUSHAM", 
			"PLII", "PLUUSHAM", "BANDHAM", "BLII", "BHRRI", "BHRRII", "MANTHAM", 
			"MIIKRRIN", "MUSHAM", "MUURRRIN", "MRIDHAM", "MRRIDHAM", "MRRIN", "YUN", 
			"RII", "LII", "LUURRRIN", "VISHAM", "VRIN", "VRRIN", "VRRM", "VRII", 
			"VLII", "SHRRIN", "SHRANTHAM", "SHRANTHAM_2", "SHRII", "SHISHI", "SKAMBHAM", 
			"SKUUN", "SKUMBHAM", "STAMBHAM", "STUMBHUM", "STRRIN", "HETTHAM", "HEDHAM", 
			"RU", "KI", "KITAM", "GA", "GHRI", "JANA", "TURA", "DUDAAK", "DHANA", 
			"DUDHAAK", "DHISHA", "NJIJR", "PRA", "PRI", "BHASA", "NIBHI", "DUBHRI", 
			"MAA", "VIJIR", "VISHAIM", "SRA", "OHAAH", "OHAAK", "HU", "HRI", "HRII", 
			"ASHUUM", "AHAH", "AAPUM", "RR", "RDHUM", "KRN", "KSHI", "KSHII", "CHAMUM", 
			"CHIN", "CHIRI", "JIRI", "TIKAM", "TIGAM", "TRIPAM", "DDGHAM", "DAMBHUM", 
			"DAASHUM", "TUDU", "DR", "DHUN", "DHUUM", "NJIDHRISHAM", "PR", "DDUMIN", 
			"RAADHAM", "RI", "VRI", "SHAKUM", "SHIN", "SHAGHAM", "SAADHAM", "SHHIN", 
			"SHUN", "SHTIGHAM", "STRIN", "SPR", "SMR", "HAM", "ANSAM", "ANHIM", "ANKAM", 
			"ANGAM", "ANCHUM", "AJIM", "ATTAM", "ANDHAM", "AMAM", "ARKAM", "ARCHAM", 
			"ARJAM", "ARTHA", "ARDAM", "ARHAM", "ANRHAM", "AAKRANDAM", "AAPLIRAM", 
			"AASHADAM", "ILAM", "IDAM", "IRAM", "UGHRSAM", "UNAM", "URJAM", "OMLADIM", 
			"KANAM", "KATHIM", "KADAM", "KATRA", "KATHA", "KARNAM", "KARTAM", "KALAM", 
			"KAMLAM", "KAAMLAM", "KINTAM", "KUSIM", "KUNSIM", "KUTAM", "KUTTAM", 
			"KUNTTAM", "KUNAM", "KUTHIM", "KUDIM", "KUNDIM", "KUTSAM", "KUDRIM", 
			"KUNDRIM", "KUNPAM", "KUMARAM", "KUBIM", "KUBHIM", "KUSMAM", "KUHAM", 
			"KOOTAM", "KOONTAM", "KOONAM", "KOONAMN", "KRUPA", "KRPAM", "KRITAM", 
			"KETAM", "KLAPAM", "KSHAJIM", "KSHAPAM", "KSHAPIM", "KSHALAM", "KSHOTAM", 
			"KHATTAM", "KHANDAM", "KHANDIM", "KHUDIM", "KHETAM", "KHEDAM", "KHOTAM", 
			"GAJAM", "GANAM", "GADAM", "GANDHAM", "GARJAM", "GARDAM", "GARDHAM", 
			"GARVAM", "GARHAM", "GALAM", "GAVESHAM", "GUNAM", "REMAINING_CHURADI", 
			"PUNCTUATION", "WS", "PLUS"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "SanskritGrammar.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public SanskritGrammarParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SentencesContext extends ParserRuleContext {
		public List<VakyaContext> vakya() {
			return getRuleContexts(VakyaContext.class);
		}
		public VakyaContext vakya(int i) {
			return getRuleContext(VakyaContext.class,i);
		}
		public SentencesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sentences; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).enterSentences(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).exitSentences(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SanskritGrammarVisitor ) return ((SanskritGrammarVisitor<? extends T>)visitor).visitSentences(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SentencesContext sentences() throws RecognitionException {
		SentencesContext _localctx = new SentencesContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_sentences);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(49); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(48);
				vakya();
				}
				}
				setState(51); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==UPSARG || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & 288230376151711747L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class VakyaContext extends ParserRuleContext {
		public TingantPadaContext tingantPada() {
			return getRuleContext(TingantPadaContext.class,0);
		}
		public TerminalNode PUNCTUATION() { return getToken(SanskritGrammarParser.PUNCTUATION, 0); }
		public List<SubantPadaContext> subantPada() {
			return getRuleContexts(SubantPadaContext.class);
		}
		public SubantPadaContext subantPada(int i) {
			return getRuleContext(SubantPadaContext.class,i);
		}
		public VakyaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vakya; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).enterVakya(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).exitVakya(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SanskritGrammarVisitor ) return ((SanskritGrammarVisitor<? extends T>)visitor).visitVakya(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VakyaContext vakya() throws RecognitionException {
		VakyaContext _localctx = new VakyaContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_vakya);
		int _la;
		try {
			int _alt;
			setState(81);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,5,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(54); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(53);
						subantPada();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(56); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(58);
				tingantPada();
				setState(62);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==UPSARG || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & 288230376151711747L) != 0)) {
					{
					{
					setState(59);
					subantPada();
					}
					}
					setState(64);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(65);
				match(PUNCTUATION);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(70);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,3,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(67);
						subantPada();
						}
						} 
					}
					setState(72);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,3,_ctx);
				}
				setState(73);
				tingantPada();
				setState(75); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(74);
					subantPada();
					}
					}
					setState(77); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==UPSARG || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & 288230376151711747L) != 0) );
				setState(79);
				match(PUNCTUATION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SubantPadaContext extends ParserRuleContext {
		public SubantamContext subantam() {
			return getRuleContext(SubantamContext.class,0);
		}
		public TerminalNode PLUS() { return getToken(SanskritGrammarParser.PLUS, 0); }
		public SupPratyayContext supPratyay() {
			return getRuleContext(SupPratyayContext.class,0);
		}
		public SubantPadaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subantPada; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).enterSubantPada(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).exitSubantPada(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SanskritGrammarVisitor ) return ((SanskritGrammarVisitor<? extends T>)visitor).visitSubantPada(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubantPadaContext subantPada() throws RecognitionException {
		SubantPadaContext _localctx = new SubantPadaContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_subantPada);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(83);
			subantam();
			setState(84);
			match(PLUS);
			setState(85);
			supPratyay();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SubantamContext extends ParserRuleContext {
		public PratipadikaContext pratipadika() {
			return getRuleContext(PratipadikaContext.class,0);
		}
		public TerminalNode UPSARG() { return getToken(SanskritGrammarParser.UPSARG, 0); }
		public TerminalNode PLUS() { return getToken(SanskritGrammarParser.PLUS, 0); }
		public SubantamContext subantam() {
			return getRuleContext(SubantamContext.class,0);
		}
		public SubantamContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subantam; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).enterSubantam(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).exitSubantam(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SanskritGrammarVisitor ) return ((SanskritGrammarVisitor<? extends T>)visitor).visitSubantam(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubantamContext subantam() throws RecognitionException {
		SubantamContext _localctx = new SubantamContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_subantam);
		try {
			setState(91);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SARVANAMA:
			case AVYAYA:
			case DHATU:
				enterOuterAlt(_localctx, 1);
				{
				setState(87);
				pratipadika();
				}
				break;
			case UPSARG:
				enterOuterAlt(_localctx, 2);
				{
				setState(88);
				match(UPSARG);
				setState(89);
				match(PLUS);
				setState(90);
				subantam();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TingantPadaContext extends ParserRuleContext {
		public TingatamContext tingatam() {
			return getRuleContext(TingatamContext.class,0);
		}
		public List<TerminalNode> PLUS() { return getTokens(SanskritGrammarParser.PLUS); }
		public TerminalNode PLUS(int i) {
			return getToken(SanskritGrammarParser.PLUS, i);
		}
		public VikaranContext vikaran() {
			return getRuleContext(VikaranContext.class,0);
		}
		public LakarContext lakar() {
			return getRuleContext(LakarContext.class,0);
		}
		public TingPratyayaContext tingPratyaya() {
			return getRuleContext(TingPratyayaContext.class,0);
		}
		public TingantPadaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tingantPada; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).enterTingantPada(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).exitTingantPada(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SanskritGrammarVisitor ) return ((SanskritGrammarVisitor<? extends T>)visitor).visitTingantPada(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TingantPadaContext tingantPada() throws RecognitionException {
		TingantPadaContext _localctx = new TingantPadaContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_tingantPada);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(93);
			tingatam();
			setState(94);
			match(PLUS);
			setState(95);
			vikaran();
			setState(96);
			match(PLUS);
			setState(97);
			lakar();
			setState(98);
			match(PLUS);
			setState(99);
			tingPratyaya();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TingatamContext extends ParserRuleContext {
		public TerminalNode DHATU() { return getToken(SanskritGrammarParser.DHATU, 0); }
		public AtideshakDhatuContext atideshakDhatu() {
			return getRuleContext(AtideshakDhatuContext.class,0);
		}
		public TerminalNode UPSARG() { return getToken(SanskritGrammarParser.UPSARG, 0); }
		public TerminalNode PLUS() { return getToken(SanskritGrammarParser.PLUS, 0); }
		public TingatamContext tingatam() {
			return getRuleContext(TingatamContext.class,0);
		}
		public TingatamContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tingatam; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).enterTingatam(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).exitTingatam(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SanskritGrammarVisitor ) return ((SanskritGrammarVisitor<? extends T>)visitor).visitTingatam(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TingatamContext tingatam() throws RecognitionException {
		TingatamContext _localctx = new TingatamContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_tingatam);
		try {
			setState(106);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,7,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(101);
				match(DHATU);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(102);
				atideshakDhatu();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(103);
				match(UPSARG);
				setState(104);
				match(PLUS);
				setState(105);
				tingatam();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AtideshakDhatuContext extends ParserRuleContext {
		public PratipadikaContext pratipadika() {
			return getRuleContext(PratipadikaContext.class,0);
		}
		public TerminalNode PLUS() { return getToken(SanskritGrammarParser.PLUS, 0); }
		public TerminalNode ATIDESHAK_DHATU_PRATYAY() { return getToken(SanskritGrammarParser.ATIDESHAK_DHATU_PRATYAY, 0); }
		public AtideshakDhatuContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_atideshakDhatu; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).enterAtideshakDhatu(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).exitAtideshakDhatu(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SanskritGrammarVisitor ) return ((SanskritGrammarVisitor<? extends T>)visitor).visitAtideshakDhatu(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AtideshakDhatuContext atideshakDhatu() throws RecognitionException {
		AtideshakDhatuContext _localctx = new AtideshakDhatuContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_atideshakDhatu);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(108);
			pratipadika();
			setState(109);
			match(PLUS);
			setState(110);
			match(ATIDESHAK_DHATU_PRATYAY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class KridantaContext extends ParserRuleContext {
		public TerminalNode DHATU() { return getToken(SanskritGrammarParser.DHATU, 0); }
		public TerminalNode PLUS() { return getToken(SanskritGrammarParser.PLUS, 0); }
		public KritPrtayaContext kritPrtaya() {
			return getRuleContext(KritPrtayaContext.class,0);
		}
		public KridantaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_kridanta; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).enterKridanta(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).exitKridanta(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SanskritGrammarVisitor ) return ((SanskritGrammarVisitor<? extends T>)visitor).visitKridanta(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KridantaContext kridanta() throws RecognitionException {
		KridantaContext _localctx = new KridantaContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_kridanta);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(112);
			match(DHATU);
			setState(113);
			match(PLUS);
			setState(114);
			kritPrtaya();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TaddhitantataContext extends ParserRuleContext {
		public KridantaContext kridanta() {
			return getRuleContext(KridantaContext.class,0);
		}
		public TerminalNode PLUS() { return getToken(SanskritGrammarParser.PLUS, 0); }
		public TaddhitPratyayContext taddhitPratyay() {
			return getRuleContext(TaddhitPratyayContext.class,0);
		}
		public TaddhitantataContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_taddhitantata; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).enterTaddhitantata(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).exitTaddhitantata(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SanskritGrammarVisitor ) return ((SanskritGrammarVisitor<? extends T>)visitor).visitTaddhitantata(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TaddhitantataContext taddhitantata() throws RecognitionException {
		TaddhitantataContext _localctx = new TaddhitantataContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_taddhitantata);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(116);
			kridanta();
			setState(117);
			match(PLUS);
			setState(118);
			taddhitPratyay();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SupPratyayContext extends ParserRuleContext {
		public VibhaktiContext vibhakti() {
			return getRuleContext(VibhaktiContext.class,0);
		}
		public SupPratyayContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_supPratyay; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).enterSupPratyay(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).exitSupPratyay(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SanskritGrammarVisitor ) return ((SanskritGrammarVisitor<? extends T>)visitor).visitSupPratyay(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SupPratyayContext supPratyay() throws RecognitionException {
		SupPratyayContext _localctx = new SupPratyayContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_supPratyay);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(120);
			vibhakti();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class VibhaktiContext extends ParserRuleContext {
		public TerminalNode PRATHMA_VIBHAKTI() { return getToken(SanskritGrammarParser.PRATHMA_VIBHAKTI, 0); }
		public TerminalNode DWITIYA_VIBHAKTI() { return getToken(SanskritGrammarParser.DWITIYA_VIBHAKTI, 0); }
		public TerminalNode TRITIYA_VIBHAKTI() { return getToken(SanskritGrammarParser.TRITIYA_VIBHAKTI, 0); }
		public TerminalNode CHATURTHI_VIBHAKTI() { return getToken(SanskritGrammarParser.CHATURTHI_VIBHAKTI, 0); }
		public TerminalNode PANCHAMI_VIBHAKTI() { return getToken(SanskritGrammarParser.PANCHAMI_VIBHAKTI, 0); }
		public TerminalNode SHASTI_VIBHAKTI() { return getToken(SanskritGrammarParser.SHASTI_VIBHAKTI, 0); }
		public TerminalNode SAPTAMI_VIBHAKTI() { return getToken(SanskritGrammarParser.SAPTAMI_VIBHAKTI, 0); }
		public VibhaktiContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vibhakti; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).enterVibhakti(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).exitVibhakti(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SanskritGrammarVisitor ) return ((SanskritGrammarVisitor<? extends T>)visitor).visitVibhakti(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VibhaktiContext vibhakti() throws RecognitionException {
		VibhaktiContext _localctx = new VibhaktiContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_vibhakti);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(122);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 35791394L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class VikaranContext extends ParserRuleContext {
		public TerminalNode SHAP_VIKARAN() { return getToken(SanskritGrammarParser.SHAP_VIKARAN, 0); }
		public TerminalNode LUK_VIKARAN() { return getToken(SanskritGrammarParser.LUK_VIKARAN, 0); }
		public TerminalNode SHLU_VIKARAN() { return getToken(SanskritGrammarParser.SHLU_VIKARAN, 0); }
		public TerminalNode SHYAN_VIKARAN() { return getToken(SanskritGrammarParser.SHYAN_VIKARAN, 0); }
		public TerminalNode SHNU_VIKARAN() { return getToken(SanskritGrammarParser.SHNU_VIKARAN, 0); }
		public TerminalNode SH_VIKARAN() { return getToken(SanskritGrammarParser.SH_VIKARAN, 0); }
		public TerminalNode SHNAM_VIKARAN() { return getToken(SanskritGrammarParser.SHNAM_VIKARAN, 0); }
		public TerminalNode U_VIKARAN() { return getToken(SanskritGrammarParser.U_VIKARAN, 0); }
		public TerminalNode SHNA_VIKARAN() { return getToken(SanskritGrammarParser.SHNA_VIKARAN, 0); }
		public TerminalNode NICH_VIKARAN() { return getToken(SanskritGrammarParser.NICH_VIKARAN, 0); }
		public TerminalNode YAK_VIKARAN() { return getToken(SanskritGrammarParser.YAK_VIKARAN, 0); }
		public TerminalNode TAT_VIKARAN() { return getToken(SanskritGrammarParser.TAT_VIKARAN, 0); }
		public VikaranContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vikaran; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).enterVikaran(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).exitVikaran(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SanskritGrammarVisitor ) return ((SanskritGrammarVisitor<? extends T>)visitor).visitVikaran(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VikaranContext vikaran() throws RecognitionException {
		VikaranContext _localctx = new VikaranContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_vikaran);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(124);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 2198486384640L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AbayaPadaContext extends ParserRuleContext {
		public AbayayContext abayay() {
			return getRuleContext(AbayayContext.class,0);
		}
		public TerminalNode UPSARG() { return getToken(SanskritGrammarParser.UPSARG, 0); }
		public NipatAbyayaContext nipatAbyaya() {
			return getRuleContext(NipatAbyayaContext.class,0);
		}
		public AbayaPadaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_abayaPada; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).enterAbayaPada(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).exitAbayaPada(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SanskritGrammarVisitor ) return ((SanskritGrammarVisitor<? extends T>)visitor).visitAbayaPada(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AbayaPadaContext abayaPada() throws RecognitionException {
		AbayaPadaContext _localctx = new AbayaPadaContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_abayaPada);
		try {
			setState(129);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KRIYA_VISHESAN_ABYAY:
			case SAMUCCHYA_BODHAK_ABYAY:
			case SAMBANDH_BODHAK_ABYAY:
			case VISMYADI_BODHAK_ABYAY:
				enterOuterAlt(_localctx, 1);
				{
				setState(126);
				abayay();
				}
				break;
			case UPSARG:
				enterOuterAlt(_localctx, 2);
				{
				setState(127);
				match(UPSARG);
				}
				break;
			case UP_MARTHA_NIPAT:
			case KARMO_PASANGRAH_NIPAT:
			case PAD_PURNA_NARTHAK_NIPAT:
				enterOuterAlt(_localctx, 3);
				{
				setState(128);
				nipatAbyaya();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AbayayContext extends ParserRuleContext {
		public TerminalNode KRIYA_VISHESAN_ABYAY() { return getToken(SanskritGrammarParser.KRIYA_VISHESAN_ABYAY, 0); }
		public TerminalNode SAMUCCHYA_BODHAK_ABYAY() { return getToken(SanskritGrammarParser.SAMUCCHYA_BODHAK_ABYAY, 0); }
		public TerminalNode SAMBANDH_BODHAK_ABYAY() { return getToken(SanskritGrammarParser.SAMBANDH_BODHAK_ABYAY, 0); }
		public TerminalNode VISMYADI_BODHAK_ABYAY() { return getToken(SanskritGrammarParser.VISMYADI_BODHAK_ABYAY, 0); }
		public AbayayContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_abayay; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).enterAbayay(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).exitAbayay(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SanskritGrammarVisitor ) return ((SanskritGrammarVisitor<? extends T>)visitor).visitAbayay(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AbayayContext abayay() throws RecognitionException {
		AbayayContext _localctx = new AbayayContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_abayay);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(131);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 987361441742848L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NipatAbyayaContext extends ParserRuleContext {
		public TerminalNode UP_MARTHA_NIPAT() { return getToken(SanskritGrammarParser.UP_MARTHA_NIPAT, 0); }
		public TerminalNode KARMO_PASANGRAH_NIPAT() { return getToken(SanskritGrammarParser.KARMO_PASANGRAH_NIPAT, 0); }
		public TerminalNode PAD_PURNA_NARTHAK_NIPAT() { return getToken(SanskritGrammarParser.PAD_PURNA_NARTHAK_NIPAT, 0); }
		public NipatAbyayaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nipatAbyaya; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).enterNipatAbyaya(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).exitNipatAbyaya(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SanskritGrammarVisitor ) return ((SanskritGrammarVisitor<? extends T>)visitor).visitNipatAbyaya(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NipatAbyayaContext nipatAbyaya() throws RecognitionException {
		NipatAbyayaContext _localctx = new NipatAbyayaContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_nipatAbyaya);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(133);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 15762598695796736L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TaddhitPratyayContext extends ParserRuleContext {
		public TerminalNode APTYARTH_TADHT_PRATYAY() { return getToken(SanskritGrammarParser.APTYARTH_TADHT_PRATYAY, 0); }
		public TerminalNode DEVTARTH_TADHT_PRATYAY() { return getToken(SanskritGrammarParser.DEVTARTH_TADHT_PRATYAY, 0); }
		public TerminalNode READ_KNOW_TADHT_PRATYAY() { return getToken(SanskritGrammarParser.READ_KNOW_TADHT_PRATYAY, 0); }
		public TerminalNode SAMUHARTH_TADHT_PRATYAY() { return getToken(SanskritGrammarParser.SAMUHARTH_TADHT_PRATYAY, 0); }
		public TerminalNode ISKA_HAI_ARTH_TADHT_PRATYAY() { return getToken(SanskritGrammarParser.ISKA_HAI_ARTH_TADHT_PRATYAY, 0); }
		public TerminalNode HONEWALE_BHAVARTH_TADHT_PRATYAY() { return getToken(SanskritGrammarParser.HONEWALE_BHAVARTH_TADHT_PRATYAY, 0); }
		public TerminalNode VIKARARTHAK_TADHT_PRATYAY() { return getToken(SanskritGrammarParser.VIKARARTHAK_TADHT_PRATYAY, 0); }
		public TerminalNode BHAVVACHAK_TADHT_PRATYAY() { return getToken(SanskritGrammarParser.BHAVVACHAK_TADHT_PRATYAY, 0); }
		public TerminalNode TULNARTHAK_TADHT_PRATYAY() { return getToken(SanskritGrammarParser.TULNARTHAK_TADHT_PRATYAY, 0); }
		public TerminalNode ATYANT_BODHAK_TADHT_PRATYAY() { return getToken(SanskritGrammarParser.ATYANT_BODHAK_TADHT_PRATYAY, 0); }
		public TerminalNode PANCHMYARTHAK_TADHT_PRATYAY() { return getToken(SanskritGrammarParser.PANCHMYARTHAK_TADHT_PRATYAY, 0); }
		public TerminalNode SAPTMYARTHAK_TADHT_PRATYAY() { return getToken(SanskritGrammarParser.SAPTMYARTHAK_TADHT_PRATYAY, 0); }
		public TerminalNode PRAKARVACHAK_TADHT_PRATYAY() { return getToken(SanskritGrammarParser.PRAKARVACHAK_TADHT_PRATYAY, 0); }
		public TerminalNode PURAN_TADHT_PRATYAY() { return getToken(SanskritGrammarParser.PURAN_TADHT_PRATYAY, 0); }
		public TaddhitPratyayContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_taddhitPratyay; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).enterTaddhitPratyay(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).exitTaddhitPratyay(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SanskritGrammarVisitor ) return ((SanskritGrammarVisitor<? extends T>)visitor).visitTaddhitPratyay(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TaddhitPratyayContext taddhitPratyay() throws RecognitionException {
		TaddhitPratyayContext _localctx = new TaddhitPratyayContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_taddhitPratyay);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(135);
			_la = _input.LA(1);
			if ( !(((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & 16383L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PratipadikaContext extends ParserRuleContext {
		public TerminalNode SARVANAMA() { return getToken(SanskritGrammarParser.SARVANAMA, 0); }
		public TerminalNode AVYAYA() { return getToken(SanskritGrammarParser.AVYAYA, 0); }
		public KridantaContext kridanta() {
			return getRuleContext(KridantaContext.class,0);
		}
		public TaddhitantataContext taddhitantata() {
			return getRuleContext(TaddhitantataContext.class,0);
		}
		public PratipadikaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pratipadika; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).enterPratipadika(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).exitPratipadika(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SanskritGrammarVisitor ) return ((SanskritGrammarVisitor<? extends T>)visitor).visitPratipadika(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PratipadikaContext pratipadika() throws RecognitionException {
		PratipadikaContext _localctx = new PratipadikaContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_pratipadika);
		try {
			setState(141);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,9,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(137);
				match(SARVANAMA);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(138);
				match(AVYAYA);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(139);
				kridanta();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(140);
				taddhitantata();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LakarContext extends ParserRuleContext {
		public TitLakarContext titLakar() {
			return getRuleContext(TitLakarContext.class,0);
		}
		public NgitLakarContext ngitLakar() {
			return getRuleContext(NgitLakarContext.class,0);
		}
		public LakarContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lakar; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).enterLakar(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).exitLakar(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SanskritGrammarVisitor ) return ((SanskritGrammarVisitor<? extends T>)visitor).visitLakar(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LakarContext lakar() throws RecognitionException {
		LakarContext _localctx = new LakarContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_lakar);
		try {
			setState(145);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LAT_LAKAR:
			case LIT_LAKAR:
			case LUT_LAKAR:
			case LRIT_LAKAR:
			case LET_LAKAR:
			case LOT_LAKAR:
				enterOuterAlt(_localctx, 1);
				{
				setState(143);
				titLakar();
				}
				break;
			case LANG_LAKAR:
			case LING_LAKAR:
			case LUNG_LAKAR:
			case LRING_LAKAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(144);
				ngitLakar();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TitLakarContext extends ParserRuleContext {
		public TerminalNode LAT_LAKAR() { return getToken(SanskritGrammarParser.LAT_LAKAR, 0); }
		public TerminalNode LIT_LAKAR() { return getToken(SanskritGrammarParser.LIT_LAKAR, 0); }
		public TerminalNode LUT_LAKAR() { return getToken(SanskritGrammarParser.LUT_LAKAR, 0); }
		public TerminalNode LRIT_LAKAR() { return getToken(SanskritGrammarParser.LRIT_LAKAR, 0); }
		public TerminalNode LET_LAKAR() { return getToken(SanskritGrammarParser.LET_LAKAR, 0); }
		public TerminalNode LOT_LAKAR() { return getToken(SanskritGrammarParser.LOT_LAKAR, 0); }
		public TitLakarContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_titLakar; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).enterTitLakar(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).exitTitLakar(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SanskritGrammarVisitor ) return ((SanskritGrammarVisitor<? extends T>)visitor).visitTitLakar(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TitLakarContext titLakar() throws RecognitionException {
		TitLakarContext _localctx = new TitLakarContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_titLakar);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(147);
			_la = _input.LA(1);
			if ( !(((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & 63L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NgitLakarContext extends ParserRuleContext {
		public TerminalNode LANG_LAKAR() { return getToken(SanskritGrammarParser.LANG_LAKAR, 0); }
		public TerminalNode LING_LAKAR() { return getToken(SanskritGrammarParser.LING_LAKAR, 0); }
		public TerminalNode LUNG_LAKAR() { return getToken(SanskritGrammarParser.LUNG_LAKAR, 0); }
		public TerminalNode LRING_LAKAR() { return getToken(SanskritGrammarParser.LRING_LAKAR, 0); }
		public NgitLakarContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ngitLakar; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).enterNgitLakar(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).exitNgitLakar(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SanskritGrammarVisitor ) return ((SanskritGrammarVisitor<? extends T>)visitor).visitNgitLakar(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NgitLakarContext ngitLakar() throws RecognitionException {
		NgitLakarContext _localctx = new NgitLakarContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_ngitLakar);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(149);
			_la = _input.LA(1);
			if ( !(((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & 15L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TingPratyayaContext extends ParserRuleContext {
		public ParasamaiPadamContext parasamaiPadam() {
			return getRuleContext(ParasamaiPadamContext.class,0);
		}
		public AtmnePadamContext atmnePadam() {
			return getRuleContext(AtmnePadamContext.class,0);
		}
		public TingPratyayaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tingPratyaya; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).enterTingPratyaya(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).exitTingPratyaya(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SanskritGrammarVisitor ) return ((SanskritGrammarVisitor<? extends T>)visitor).visitTingPratyaya(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TingPratyayaContext tingPratyaya() throws RecognitionException {
		TingPratyayaContext _localctx = new TingPratyayaContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_tingPratyaya);
		try {
			setState(153);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PR_PRS_EK_VACHAN_PP:
			case PR_PRS_DWI_VACHAN_PP:
			case PR_PRS_BAHU_VACHAN_PP:
			case MD_PRS_EK_VACHAN_PP:
			case MD_PRS_DWI_VACHAN_PP:
			case MD_PRS_BAHU_VACHAN_PP:
			case UTM_PRS_EK_VACHAN_PP:
			case UTM_DWI_VACHAN_PP:
			case UTM_BAHU_VACHAN_PP:
				enterOuterAlt(_localctx, 1);
				{
				setState(151);
				parasamaiPadam();
				}
				break;
			case PR_PRS_EK_VACHAN_AP:
			case PR_PRS_DWI_VACHAN_AP:
			case PR_PRS_BAHU_VACHAN_AP:
			case MD_PRS_EK_VACHAN_AP:
			case MD_PRS_DWI_VACHAN_AP:
			case MD_PRS_BAHU_VACHAN_AP:
			case UTM_PRS_EK_VACHAN_AP:
			case UTM_DWI_VACHAN_AP:
			case UTM_BAHU_VACHAN_AP:
				enterOuterAlt(_localctx, 2);
				{
				setState(152);
				atmnePadam();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ParasamaiPadamContext extends ParserRuleContext {
		public TerminalNode PR_PRS_EK_VACHAN_PP() { return getToken(SanskritGrammarParser.PR_PRS_EK_VACHAN_PP, 0); }
		public TerminalNode PR_PRS_DWI_VACHAN_PP() { return getToken(SanskritGrammarParser.PR_PRS_DWI_VACHAN_PP, 0); }
		public TerminalNode PR_PRS_BAHU_VACHAN_PP() { return getToken(SanskritGrammarParser.PR_PRS_BAHU_VACHAN_PP, 0); }
		public TerminalNode MD_PRS_EK_VACHAN_PP() { return getToken(SanskritGrammarParser.MD_PRS_EK_VACHAN_PP, 0); }
		public TerminalNode MD_PRS_DWI_VACHAN_PP() { return getToken(SanskritGrammarParser.MD_PRS_DWI_VACHAN_PP, 0); }
		public TerminalNode MD_PRS_BAHU_VACHAN_PP() { return getToken(SanskritGrammarParser.MD_PRS_BAHU_VACHAN_PP, 0); }
		public TerminalNode UTM_PRS_EK_VACHAN_PP() { return getToken(SanskritGrammarParser.UTM_PRS_EK_VACHAN_PP, 0); }
		public TerminalNode UTM_DWI_VACHAN_PP() { return getToken(SanskritGrammarParser.UTM_DWI_VACHAN_PP, 0); }
		public TerminalNode UTM_BAHU_VACHAN_PP() { return getToken(SanskritGrammarParser.UTM_BAHU_VACHAN_PP, 0); }
		public ParasamaiPadamContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parasamaiPadam; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).enterParasamaiPadam(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).exitParasamaiPadam(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SanskritGrammarVisitor ) return ((SanskritGrammarVisitor<? extends T>)visitor).visitParasamaiPadam(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParasamaiPadamContext parasamaiPadam() throws RecognitionException {
		ParasamaiPadamContext _localctx = new ParasamaiPadamContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_parasamaiPadam);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(155);
			_la = _input.LA(1);
			if ( !(((((_la - 90)) & ~0x3f) == 0 && ((1L << (_la - 90)) & 511L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AtmnePadamContext extends ParserRuleContext {
		public TerminalNode PR_PRS_EK_VACHAN_AP() { return getToken(SanskritGrammarParser.PR_PRS_EK_VACHAN_AP, 0); }
		public TerminalNode PR_PRS_DWI_VACHAN_AP() { return getToken(SanskritGrammarParser.PR_PRS_DWI_VACHAN_AP, 0); }
		public TerminalNode PR_PRS_BAHU_VACHAN_AP() { return getToken(SanskritGrammarParser.PR_PRS_BAHU_VACHAN_AP, 0); }
		public TerminalNode MD_PRS_EK_VACHAN_AP() { return getToken(SanskritGrammarParser.MD_PRS_EK_VACHAN_AP, 0); }
		public TerminalNode MD_PRS_DWI_VACHAN_AP() { return getToken(SanskritGrammarParser.MD_PRS_DWI_VACHAN_AP, 0); }
		public TerminalNode MD_PRS_BAHU_VACHAN_AP() { return getToken(SanskritGrammarParser.MD_PRS_BAHU_VACHAN_AP, 0); }
		public TerminalNode UTM_PRS_EK_VACHAN_AP() { return getToken(SanskritGrammarParser.UTM_PRS_EK_VACHAN_AP, 0); }
		public TerminalNode UTM_DWI_VACHAN_AP() { return getToken(SanskritGrammarParser.UTM_DWI_VACHAN_AP, 0); }
		public TerminalNode UTM_BAHU_VACHAN_AP() { return getToken(SanskritGrammarParser.UTM_BAHU_VACHAN_AP, 0); }
		public AtmnePadamContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_atmnePadam; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).enterAtmnePadam(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).exitAtmnePadam(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SanskritGrammarVisitor ) return ((SanskritGrammarVisitor<? extends T>)visitor).visitAtmnePadam(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AtmnePadamContext atmnePadam() throws RecognitionException {
		AtmnePadamContext _localctx = new AtmnePadamContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_atmnePadam);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(157);
			_la = _input.LA(1);
			if ( !(((((_la - 99)) & ~0x3f) == 0 && ((1L << (_la - 99)) & 511L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class KritPrtayaContext extends ParserRuleContext {
		public TerminalNode TUMUN_KRIT_PRATYAYA() { return getToken(SanskritGrammarParser.TUMUN_KRIT_PRATYAYA, 0); }
		public TerminalNode ANEYYAR_KRIT_PRATYAYA() { return getToken(SanskritGrammarParser.ANEYYAR_KRIT_PRATYAYA, 0); }
		public TerminalNode TAVYAT_KRIT_PRATYAYA() { return getToken(SanskritGrammarParser.TAVYAT_KRIT_PRATYAYA, 0); }
		public TerminalNode KTVAA_KRIT_PRATYAYA() { return getToken(SanskritGrammarParser.KTVAA_KRIT_PRATYAYA, 0); }
		public TerminalNode SHAANACH_KRIT_PRATYAYA() { return getToken(SanskritGrammarParser.SHAANACH_KRIT_PRATYAYA, 0); }
		public TerminalNode SHATRU_KRIT_PRATYAYA() { return getToken(SanskritGrammarParser.SHATRU_KRIT_PRATYAYA, 0); }
		public TerminalNode LYUT_KRIT_PRATYAYA() { return getToken(SanskritGrammarParser.LYUT_KRIT_PRATYAYA, 0); }
		public TerminalNode NVUUL_KRIT_PRATYAYA() { return getToken(SanskritGrammarParser.NVUUL_KRIT_PRATYAYA, 0); }
		public TerminalNode NAMUL_KRIT_PRATYAYA() { return getToken(SanskritGrammarParser.NAMUL_KRIT_PRATYAYA, 0); }
		public TerminalNode TRACH_KRIT_PRATYAYA() { return getToken(SanskritGrammarParser.TRACH_KRIT_PRATYAYA, 0); }
		public TerminalNode KTA_KRIT_PRATYAYA() { return getToken(SanskritGrammarParser.KTA_KRIT_PRATYAYA, 0); }
		public TerminalNode KTAVATU_KRIT_PRATYAYA() { return getToken(SanskritGrammarParser.KTAVATU_KRIT_PRATYAYA, 0); }
		public TerminalNode LYAP_KRIT_PRATYAYA() { return getToken(SanskritGrammarParser.LYAP_KRIT_PRATYAYA, 0); }
		public TerminalNode KTIN_KRIT_PRATYAYA() { return getToken(SanskritGrammarParser.KTIN_KRIT_PRATYAYA, 0); }
		public TerminalNode KELIMER_KRIT_PRATYAYA() { return getToken(SanskritGrammarParser.KELIMER_KRIT_PRATYAYA, 0); }
		public TerminalNode KYAP_KRIT_PRATYAYA() { return getToken(SanskritGrammarParser.KYAP_KRIT_PRATYAYA, 0); }
		public TerminalNode KVASU_KRIT_PRATYAYA() { return getToken(SanskritGrammarParser.KVASU_KRIT_PRATYAYA, 0); }
		public TerminalNode KAANACH_KRIT_PRATYAYA() { return getToken(SanskritGrammarParser.KAANACH_KRIT_PRATYAYA, 0); }
		public TerminalNode SYATRU_KRIT_PRATYAYA() { return getToken(SanskritGrammarParser.SYATRU_KRIT_PRATYAYA, 0); }
		public TerminalNode SYAMAAN_KRIT_PRATYAYA() { return getToken(SanskritGrammarParser.SYAMAAN_KRIT_PRATYAYA, 0); }
		public TerminalNode GHYN_KRIT_PRATYAYA() { return getToken(SanskritGrammarParser.GHYN_KRIT_PRATYAYA, 0); }
		public KritPrtayaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_kritPrtaya; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).enterKritPrtaya(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).exitKritPrtaya(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SanskritGrammarVisitor ) return ((SanskritGrammarVisitor<? extends T>)visitor).visitKritPrtaya(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KritPrtayaContext kritPrtaya() throws RecognitionException {
		KritPrtayaContext _localctx = new KritPrtayaContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_kritPrtaya);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(159);
			_la = _input.LA(1);
			if ( !(((((_la - 108)) & ~0x3f) == 0 && ((1L << (_la - 108)) & 2097151L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static final String _serializedATN =
		"\u0004\u0001\u0360\u00a2\u0002\u0000\u0007\u0000\u0002\u0001\u0007\u0001"+
		"\u0002\u0002\u0007\u0002\u0002\u0003\u0007\u0003\u0002\u0004\u0007\u0004"+
		"\u0002\u0005\u0007\u0005\u0002\u0006\u0007\u0006\u0002\u0007\u0007\u0007"+
		"\u0002\b\u0007\b\u0002\t\u0007\t\u0002\n\u0007\n\u0002\u000b\u0007\u000b"+
		"\u0002\f\u0007\f\u0002\r\u0007\r\u0002\u000e\u0007\u000e\u0002\u000f\u0007"+
		"\u000f\u0002\u0010\u0007\u0010\u0002\u0011\u0007\u0011\u0002\u0012\u0007"+
		"\u0012\u0002\u0013\u0007\u0013\u0002\u0014\u0007\u0014\u0002\u0015\u0007"+
		"\u0015\u0002\u0016\u0007\u0016\u0002\u0017\u0007\u0017\u0001\u0000\u0004"+
		"\u00002\b\u0000\u000b\u0000\f\u00003\u0001\u0001\u0004\u00017\b\u0001"+
		"\u000b\u0001\f\u00018\u0001\u0001\u0001\u0001\u0005\u0001=\b\u0001\n\u0001"+
		"\f\u0001@\t\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0005\u0001E\b\u0001"+
		"\n\u0001\f\u0001H\t\u0001\u0001\u0001\u0001\u0001\u0004\u0001L\b\u0001"+
		"\u000b\u0001\f\u0001M\u0001\u0001\u0001\u0001\u0003\u0001R\b\u0001\u0001"+
		"\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0003\u0001\u0003\u0001"+
		"\u0003\u0001\u0003\u0003\u0003\\\b\u0003\u0001\u0004\u0001\u0004\u0001"+
		"\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001"+
		"\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0003\u0005k\b"+
		"\u0005\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0007\u0001"+
		"\u0007\u0001\u0007\u0001\u0007\u0001\b\u0001\b\u0001\b\u0001\b\u0001\t"+
		"\u0001\t\u0001\n\u0001\n\u0001\u000b\u0001\u000b\u0001\f\u0001\f\u0001"+
		"\f\u0003\f\u0082\b\f\u0001\r\u0001\r\u0001\u000e\u0001\u000e\u0001\u000f"+
		"\u0001\u000f\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0003\u0010"+
		"\u008e\b\u0010\u0001\u0011\u0001\u0011\u0003\u0011\u0092\b\u0011\u0001"+
		"\u0012\u0001\u0012\u0001\u0013\u0001\u0013\u0001\u0014\u0001\u0014\u0003"+
		"\u0014\u009a\b\u0014\u0001\u0015\u0001\u0015\u0001\u0016\u0001\u0016\u0001"+
		"\u0017\u0001\u0017\u0001\u0017\u0000\u0000\u0018\u0000\u0002\u0004\u0006"+
		"\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,."+
		"\u0000\n\u0007\u0000\u0001\u0001\u0005\u0005\t\t\r\r\u0011\u0011\u0015"+
		"\u0015\u0019\u0019\u0001\u0000\u001d(\u0002\u0000))/1\u0001\u000035\u0001"+
		"\u00007D\u0001\u0000PU\u0001\u0000VY\u0001\u0000Zb\u0001\u0000ck\u0001"+
		"\u0000l\u0080\u0099\u00001\u0001\u0000\u0000\u0000\u0002Q\u0001\u0000"+
		"\u0000\u0000\u0004S\u0001\u0000\u0000\u0000\u0006[\u0001\u0000\u0000\u0000"+
		"\b]\u0001\u0000\u0000\u0000\nj\u0001\u0000\u0000\u0000\fl\u0001\u0000"+
		"\u0000\u0000\u000ep\u0001\u0000\u0000\u0000\u0010t\u0001\u0000\u0000\u0000"+
		"\u0012x\u0001\u0000\u0000\u0000\u0014z\u0001\u0000\u0000\u0000\u0016|"+
		"\u0001\u0000\u0000\u0000\u0018\u0081\u0001\u0000\u0000\u0000\u001a\u0083"+
		"\u0001\u0000\u0000\u0000\u001c\u0085\u0001\u0000\u0000\u0000\u001e\u0087"+
		"\u0001\u0000\u0000\u0000 \u008d\u0001\u0000\u0000\u0000\"\u0091\u0001"+
		"\u0000\u0000\u0000$\u0093\u0001\u0000\u0000\u0000&\u0095\u0001\u0000\u0000"+
		"\u0000(\u0099\u0001\u0000\u0000\u0000*\u009b\u0001\u0000\u0000\u0000,"+
		"\u009d\u0001\u0000\u0000\u0000.\u009f\u0001\u0000\u0000\u000002\u0003"+
		"\u0002\u0001\u000010\u0001\u0000\u0000\u000023\u0001\u0000\u0000\u0000"+
		"31\u0001\u0000\u0000\u000034\u0001\u0000\u0000\u00004\u0001\u0001\u0000"+
		"\u0000\u000057\u0003\u0004\u0002\u000065\u0001\u0000\u0000\u000078\u0001"+
		"\u0000\u0000\u000086\u0001\u0000\u0000\u000089\u0001\u0000\u0000\u0000"+
		"9:\u0001\u0000\u0000\u0000:>\u0003\b\u0004\u0000;=\u0003\u0004\u0002\u0000"+
		"<;\u0001\u0000\u0000\u0000=@\u0001\u0000\u0000\u0000><\u0001\u0000\u0000"+
		"\u0000>?\u0001\u0000\u0000\u0000?A\u0001\u0000\u0000\u0000@>\u0001\u0000"+
		"\u0000\u0000AB\u0005\u035e\u0000\u0000BR\u0001\u0000\u0000\u0000CE\u0003"+
		"\u0004\u0002\u0000DC\u0001\u0000\u0000\u0000EH\u0001\u0000\u0000\u0000"+
		"FD\u0001\u0000\u0000\u0000FG\u0001\u0000\u0000\u0000GI\u0001\u0000\u0000"+
		"\u0000HF\u0001\u0000\u0000\u0000IK\u0003\b\u0004\u0000JL\u0003\u0004\u0002"+
		"\u0000KJ\u0001\u0000\u0000\u0000LM\u0001\u0000\u0000\u0000MK\u0001\u0000"+
		"\u0000\u0000MN\u0001\u0000\u0000\u0000NO\u0001\u0000\u0000\u0000OP\u0005"+
		"\u035e\u0000\u0000PR\u0001\u0000\u0000\u0000Q6\u0001\u0000\u0000\u0000"+
		"QF\u0001\u0000\u0000\u0000R\u0003\u0001\u0000\u0000\u0000ST\u0003\u0006"+
		"\u0003\u0000TU\u0005\u0360\u0000\u0000UV\u0003\u0012\t\u0000V\u0005\u0001"+
		"\u0000\u0000\u0000W\\\u0003 \u0010\u0000XY\u00052\u0000\u0000YZ\u0005"+
		"\u0360\u0000\u0000Z\\\u0003\u0006\u0003\u0000[W\u0001\u0000\u0000\u0000"+
		"[X\u0001\u0000\u0000\u0000\\\u0007\u0001\u0000\u0000\u0000]^\u0003\n\u0005"+
		"\u0000^_\u0005\u0360\u0000\u0000_`\u0003\u0016\u000b\u0000`a\u0005\u0360"+
		"\u0000\u0000ab\u0003\"\u0011\u0000bc\u0005\u0360\u0000\u0000cd\u0003("+
		"\u0014\u0000d\t\u0001\u0000\u0000\u0000ek\u0005\u0081\u0000\u0000fk\u0003"+
		"\f\u0006\u0000gh\u00052\u0000\u0000hi\u0005\u0360\u0000\u0000ik\u0003"+
		"\n\u0005\u0000je\u0001\u0000\u0000\u0000jf\u0001\u0000\u0000\u0000jg\u0001"+
		"\u0000\u0000\u0000k\u000b\u0001\u0000\u0000\u0000lm\u0003 \u0010\u0000"+
		"mn\u0005\u0360\u0000\u0000no\u0005F\u0000\u0000o\r\u0001\u0000\u0000\u0000"+
		"pq\u0005\u0081\u0000\u0000qr\u0005\u0360\u0000\u0000rs\u0003.\u0017\u0000"+
		"s\u000f\u0001\u0000\u0000\u0000tu\u0003\u000e\u0007\u0000uv\u0005\u0360"+
		"\u0000\u0000vw\u0003\u001e\u000f\u0000w\u0011\u0001\u0000\u0000\u0000"+
		"xy\u0003\u0014\n\u0000y\u0013\u0001\u0000\u0000\u0000z{\u0007\u0000\u0000"+
		"\u0000{\u0015\u0001\u0000\u0000\u0000|}\u0007\u0001\u0000\u0000}\u0017"+
		"\u0001\u0000\u0000\u0000~\u0082\u0003\u001a\r\u0000\u007f\u0082\u0005"+
		"2\u0000\u0000\u0080\u0082\u0003\u001c\u000e\u0000\u0081~\u0001\u0000\u0000"+
		"\u0000\u0081\u007f\u0001\u0000\u0000\u0000\u0081\u0080\u0001\u0000\u0000"+
		"\u0000\u0082\u0019\u0001\u0000\u0000\u0000\u0083\u0084\u0007\u0002\u0000"+
		"\u0000\u0084\u001b\u0001\u0000\u0000\u0000\u0085\u0086\u0007\u0003\u0000"+
		"\u0000\u0086\u001d\u0001\u0000\u0000\u0000\u0087\u0088\u0007\u0004\u0000"+
		"\u0000\u0088\u001f\u0001\u0000\u0000\u0000\u0089\u008e\u0005G\u0000\u0000"+
		"\u008a\u008e\u0005H\u0000\u0000\u008b\u008e\u0003\u000e\u0007\u0000\u008c"+
		"\u008e\u0003\u0010\b\u0000\u008d\u0089\u0001\u0000\u0000\u0000\u008d\u008a"+
		"\u0001\u0000\u0000\u0000\u008d\u008b\u0001\u0000\u0000\u0000\u008d\u008c"+
		"\u0001\u0000\u0000\u0000\u008e!\u0001\u0000\u0000\u0000\u008f\u0092\u0003"+
		"$\u0012\u0000\u0090\u0092\u0003&\u0013\u0000\u0091\u008f\u0001\u0000\u0000"+
		"\u0000\u0091\u0090\u0001\u0000\u0000\u0000\u0092#\u0001\u0000\u0000\u0000"+
		"\u0093\u0094\u0007\u0005\u0000\u0000\u0094%\u0001\u0000\u0000\u0000\u0095"+
		"\u0096\u0007\u0006\u0000\u0000\u0096\'\u0001\u0000\u0000\u0000\u0097\u009a"+
		"\u0003*\u0015\u0000\u0098\u009a\u0003,\u0016\u0000\u0099\u0097\u0001\u0000"+
		"\u0000\u0000\u0099\u0098\u0001\u0000\u0000\u0000\u009a)\u0001\u0000\u0000"+
		"\u0000\u009b\u009c\u0007\u0007\u0000\u0000\u009c+\u0001\u0000\u0000\u0000"+
		"\u009d\u009e\u0007\b\u0000\u0000\u009e-\u0001\u0000\u0000\u0000\u009f"+
		"\u00a0\u0007\t\u0000\u0000\u00a0/\u0001\u0000\u0000\u0000\f38>FMQ[j\u0081"+
		"\u008d\u0091\u0099";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}