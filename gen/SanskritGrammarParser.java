// Generated from /Users/sushil/IdeaProjects/SanskritParser/src/main/antlr4/com/ottego/sanskritparser/SanskritGrammar.g4 by ANTLR 4.12.0
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast", "CheckReturnValue"})
public class SanskritGrammarParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.12.0", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		PRATHMA_VIBHAKTI=1, PRATHMA_EKVACHAN=2, PRATHMA_DWIVACHAN=3, PRATHMA_BAHUVACHAN=4, 
		DWITIYA_VIBHAKTI=5, DWITIYA_EKVACHAN=6, DWITIYA_DWIVACHAN=7, DWITIYA_BAHUVACHAN=8, 
		TRITIYA_VIBHAKTI=9, TRITIYA_EKVACHAN=10, TRITIYA_DWIVACHAN=11, TRITIYA_BAHUVACHAN=12, 
		CHATURTHI_VIBHAKTI=13, CHATURTHI_EKVACHAN=14, CHATURTHI_DWIVACHAN=15, 
		CHATURTHI_BAHUVACHAN=16, PANCHAMI_VIBHAKTI=17, PANCHAMI_EKVACHAN=18, PANCHAMI_DWIVACHAN=19, 
		PANCHAMI_BAHUVACHAN=20, SHASTI_VIBHAKTI=21, SHASTI_EKVACHAN=22, SHASTI_DWIVACHAN=23, 
		SHASTI_BAHUVACHAN=24, SAPTAMI_VIBHAKTI=25, SAPTAMI_EKVACHAN=26, SAPTAMI_DWIVACHAN=27, 
		SAPTAMI_BAHUVACHAN=28, SHAP_VIKARAN=29, LUK_VIKARAN=30, SHLU_VIKARAN=31, 
		SHYAN_VIKARAN=32, SHNU_VIKARAN=33, SH_VIKARAN=34, SHNAM_VIKARAN=35, U_VIKARAN=36, 
		SHNA_VIKARAN=37, NICH_VIKARAN=38, YAK_VIKARAN=39, TAT_VIKARAN=40, KRIYA_VISHESAN_ABYAY=41, 
		KAL_VACHAK_ABYAY=42, STHAN_VACHAK_ABYAY=43, RITI_VACHAK_ABYAY=44, PARIMAN_VACHAK_ABYAY=45, 
		PRSHN_VACHAK_ABYAY=46, SAMUCCHYA_BODHAK_ABYAY=47, SAMBANDH_BODHAK_ABYAY=48, 
		VISMYADI_BODHAK_ABYAY=49, UPSARG=50, UP_MARTHA_NIPAT=51, KARMO_PASANGRAH_NIPAT=52, 
		PAD_PURNA_NARTHAK_NIPAT=53, ATIDESHIK_DHATU_PRATYAY=54, APTYARTH_TADHT_PRATYAY=55, 
		DEVTARTH_TADHT_PRATYAY=56, READ_KNOW_TADHT_PRATYAY=57, SAMUHARTH_TADHT_PRATYAY=58, 
		ISKA_HAI_ARTH_TADHT_PRATYAY=59, HONEWALE_BHAVARTH_TADHT_PRATYAY=60, VIKARARTHAK_TADHT_PRATYAY=61, 
		BHAVVACHAK_TADHT_PRATYAY=62, TULNARTHAK_TADHT_PRATYAY=63, ATYANT_BODHAK_TADHT_PRATYAY=64, 
		PANCHMYARTHAK_TADHT_PRATYAY=65, SAPTMYARTHAK_TADHT_PRATYAY=66, PRAKARVACHAK_TADHT_PRATYAY=67, 
		PURAN_TADHT_PRATYAY=68, STRI_PRATYAY=69, ATIDESHAK_DHATU_PRATYAY=70, SARVANAMA=71, 
		AVYAYA=72, SVARADI_AVYAYA=73, NIPAT_AVYAYA=74, CADI=75, PRADI=76, KARMAPRAVACHANIYA=77, 
		GATI=78, SAMASA_PRATIPADIKA=79, LAT_LAKAR=80, LIT_LAKAR=81, LUT_LAKAR=82, 
		LRIT_LAKAR=83, LET_LAKAR=84, LOT_LAKAR=85, LANG_LAKAR=86, LING_LAKAR=87, 
		LUNG_LAKAR=88, LRING_LAKAR=89, PR_PRS_EK_VACHAN_PP=90, PR_PRS_DWI_VACHAN_PP=91, 
		PR_PRS_BAHU_VACHAN_PP=92, MD_PRS_EK_VACHAN_PP=93, MD_PRS_DWI_VACHAN_PP=94, 
		MD_PRS_BAHU_VACHAN_PP=95, UTM_PRS_EK_VACHAN_PP=96, UTM_DWI_VACHAN_PP=97, 
		UTM_BAHU_VACHAN_PP=98, PR_PRS_EK_VACHAN_AP=99, PR_PRS_DWI_VACHAN_AP=100, 
		PR_PRS_BAHU_VACHAN_AP=101, MD_PRS_EK_VACHAN_AP=102, MD_PRS_DWI_VACHAN_AP=103, 
		MD_PRS_BAHU_VACHAN_AP=104, UTM_PRS_EK_VACHAN_AP=105, UTM_DWI_VACHAN_AP=106, 
		UTM_BAHU_VACHAN_AP=107, TUMUN_KRIT_PRATYAYA=108, ANEYYAR_KRIT_PRATYAYA=109, 
		TAVYAT_KRIT_PRATYAYA=110, KTVAA_KRIT_PRATYAYA=111, SHAANACH_KRIT_PRATYAYA=112, 
		SHATRU_KRIT_PRATYAYA=113, LYUT_KRIT_PRATYAYA=114, NVUUL_KRIT_PRATYAYA=115, 
		NAMUL_KRIT_PRATYAYA=116, TRACH_KRIT_PRATYAYA=117, KTA_KRIT_PRATYAYA=118, 
		KTAVATU_KRIT_PRATYAYA=119, LYAP_KRIT_PRATYAYA=120, KTIN_KRIT_PRATYAYA=121, 
		KELIMER_KRIT_PRATYAYA=122, KYAP_KRIT_PRATYAYA=123, KVASU_KRIT_PRATYAYA=124, 
		KAANACH_KRIT_PRATYAYA=125, SYATRU_KRIT_PRATYAYA=126, SYAMAAN_KRIT_PRATYAYA=127, 
		GHYN_KRIT_PRATYAYA=128, DHATU=129, BHVADI=130, ADADI=131, JUHOTYADI=132, 
		DIVADI=133, SWADI=134, TUDADI=135, RUDHADI=136, TANADI=137, KRIYADI=138, 
		CHURADI=139, RAMUM=140, GAMAM=141, AHIM=142, AKAM=143, AKSHUM=144, AGAM=145, 
		AKIM=146, AGIM=147, AGHIM=148, ACHUM=149, ANJAM=150, ACHIM=151, ANCHUMN=152, 
		ANCCHUM=153, ATAM=154, ANTTAM=155, ANDAM=156, ADDAM=157, ANNAM=158, ATHIM=159, 
		ANTAM=160, ANDDAM=161, ATIM=162, ADIM=163, ABRAM=164, ANMAM=165, ABIM=166, 
		ABHIM=167, AYAM=168, ANYAM=169, ARGHAM=170, ANRCHAM=171, ANRJAM=172, ANRDAM=173, 
		ARBAM=174, ARVAM=175, ANNRHAM=176, ALAM=177, AVAM=178, ASHHAM=179, ANSHAM=180, 
		AACHIM=181, AASHASI=182, IKHAM=183, IKHIM=184, IGIM=185, ITAM=186, IDIM=187, 
		IVIM=188, IKSHEM=189, INKHAM=190, INKHIM=191, IJAM=192, IJIM=193, IRKSHYAM=194, 
		IRSHYAM=195, IISHAM=196, IINSHAM=197, IEEHAM=198, UN=199, UKSHAM=200, 
		UKHAM=201, UKHIM=202, OKSHIM=203, OKHIM=204, OTHAM=205, ONTHAM=206, URDAM=207, 
		URVIM=208, USHAM=209, UHIMAR=210, OOTHAM=211, OOYIM=212, OOSHAM=213, OOHAM=214, 
		R=215, RJAM=216, RJIM=217, EJRAM=218, ENJRAM=219, ETHAM=220, EDHAM=221, 
		ESHAM=222, EESHAM=223, OOKSHIM=224, OONAM=225, ADAM=226, IIN=227, IK=228, 
		ANAM=229, ASAM=230, AASHASUM=231, AASUM=232, IINN=233, IIDAM=234, IIRAM=235, 
		INSHAM=236, UURNUN=237, KASIN=238, KASAM=239, KASAN=240, KUU=241, TUKSHU=242, 
		KSHNU=243, KHYYA=244, CHAKAASURNUN=245, CHAKSHINN=246, JAKSHAN=247, JAAGRUN=248, 
		TUU=249, DARIDRAAM=250, DAAP=251, DIHAN=252, DIIDHIINN=253, DUHAN=254, 
		DYUU=255, DRAA=256, DVISHINN=257, NNISHINN=258, NNIJINN=259, NNUN=260, 
		PAA=261, PIJINN=262, PRIICHINN=263, PRIJINN=264, PRAA=265, PSAA=266, BRUUUN=267, 
		BHA=268, MAAA=269, MRRUJUUN=270, YAA=271, YUU=272, RAA=273, RUU=274, RUDHINN=275, 
		LAA=276, LIHINN=277, VACHINN=278, VASHINN=279, VASAN=280, VAA=281, VIIDAN=282, 
		VII=283, VRIJUUN=284, VRIJINN=285, VEVEEN=286, SHAASUM=287, SHIJINN=288, 
		SHIIN=289, SHRAA=290, SHVASHINN=291, SHTIGHINN=292, SHASNN=293, SHUU=294, 
		SHUUN=295, SHTUJINN=296, SHTNA=297, SHTNU=298, NISHVAPAM=299, HANAM=300, 
		HNUUN=301, KUTHAM=302, KUPAM=303, KUSHAM=304, KUSAM=305, KRISHAM=306, 
		KNASUM=307, KRUDHAM=308, KLAMUM=309, KLIDUM=310, KLISHAM=311, KSHAMUM=312, 
		KSIPAM=313, KSHUDHAM=314, KSHUBHAM=315, NIKSVIDAM=316, KHIDAM=317, GUDHAM=318, 
		GUPAM=319, GOORIM=320, GRUDHAM=321, GHURIM=322, CHURIM=323, CHO=324, JANIM=325, 
		JASUM=326, JURIM=327, JRUH=328, JHRUH=329, DIPAM=330, DIM=331, TAPAM=332, 
		TAMUM=333, TASUM=334, TIMAM=335, TEEMAN=336, TUBHAM=337, TUSHAM=338, TOORI=339, 
		TRUPAM=340, NITRISHAM=341, TRASIM=342, DAMUM=343, DASUM=344, DIVUM=345, 
		DIPIM=346, DIPIN=347, DUSHAM=348, DUH=349, DRUH=350, DOO=351, DHURIM=352, 
		NABHAM=353, NASHAM=354, NAHAM=355, NRITIM=356, PADAM=357, PING=358, PUTHAM=359, 
		PUSHAM=360, PUSAM=361, PUSHPAM=362, PURIM=363, PYUSHAM=364, PYUSAM=365, 
		PRING=366, PLUSHAM=367, BASUM=368, VISUM=369, BUDHAM=370, BUSAM=371, BYUSAM=372, 
		BHASUM=373, BHRISHUM=374, BHRASHUM=375, BHRAUM=376, MADIM=377, MANAM=378, 
		MASIM=379, MAAM=380, NIMIDAM=381, MI=382, MUSAM=383, MUHAM=384, MRISHAM=385, 
		YASUM=386, YUJAM=387, YUDHAM=388, YUPAM=389, RANJAM=390, RADHAM=391, RADHO=392, 
		RISHAM=393, RIMNG=394, RUPAM=395, RUSHAM=396, LISHAM=397, LI=398, LUTAM=399, 
		LUTHAM=400, LUPAM=401, LUBHAM=402, VASUM=403, VAVRITUM=404, VASHRAM=405, 
		ISHUCHIR=406, SHUDHAM=407, SHUSHAM=408, SHO=409, SHRAMUM=410, SHLISHAM=411, 
		STHIVUM=412, SAMIM=413, SHAHAN=414, SHIDHAM=415, SHIVUM=416, SHUHAM=417, 
		SHUNG=418, SRUJAM=419, SHTIMAM=420, SHTUPAM=421, SHNASUM=422, SHNIHAM=423, 
		SHNUHAM=424, SRIVUM=425, SHVIDAM=426, HRISHAM=427, ILM=428, ISHM=429, 
		UCHHM=430, UJHM=431, UCHIM=432, UBJM=433, UBHM=434, UMBHM=435, RICHM=436, 
		RICHHM=437, RIFHM=438, RIMFHM=439, RINSHM=440, KADHM=441, KILM=442, KUNGM=443, 
		KUCHM=444, KUTM=445, KUDM=446, KUNM=447, KURM=448, KUM=449, KRIDHM=450, 
		KRITIM=451, KRISHN=452, KRM=453, KRUDHM=454, KSHIM=455, KSHIPM=456, KSHURM=457, 
		KHIDHM=458, KHUDHM=459, KHURM=460, GUM=461, GUJHM=462, GUDHM=463, GUFHM=464, 
		GUMFHM=465, GURIM=466, GRR=467, GHUTM=468, GHUNM=469, GHURM=470, GHURNM=471, 
		CHARCHM=472, CHALM=473, CHILM=474, CHUTM=475, CHUDM=476, CHRITIM=477, 
		CHHUTM=478, CHHUDM=479, CHHUPM=480, CHHURM=481, JARJHM=482, JUTM=483, 
		JUDM=484, JUNDM=485, JUNM=486, JUSHIM=487, JHARJHM=488, DIPM=489, TILM=490, 
		TUTM=491, TUDM=492, TUNM=493, TUDHM=494, TUPM=495, TUFHM=496, TUMPM=497, 
		TUMPHM=498, TRINHUM=499, TRIPM=500, TRIFHM=501, TRIMPM=502, TRIMPHM=503, 
		TRIHUM=504, TRUTM=505, TVACHM=506, THUDM=507, DISHM=508, DRINGM=509, DRIPM=510, 
		DRIFHM=511, DRIBHIM=512, DRIMPM=513, DRIMPHM=514, DRUNM=515, DHIM=516, 
		DHUM=517, DHRINGM=518, DHRUM=519, NIM=520, NUUM=521, NUDUM=522, NIDUM=523, 
		PIM=524, PISHM=525, PUTM=526, PUDM=527, PUNM=528, PURM=529, PRINGM=530, 
		PRIPM=531, PRINM=532, PRACHHM=533, BILM=534, BRINGM=535, BHJOM=536, BRINGMU=537, 
		BHRASJM=538, TUMUSJM=539, MICHM=540, MILAM=541, MILM=542, MISHM=543, MUCHM=544, 
		MUTM=545, MUNM=546, MURM=547, MRINGM=548, MRIPM=549, MRINM=550, MRISHM=551, 
		RIM=552, RINFHM=553, RISHM=554, RIHAM=555, RUJOM=556, RUSHM=557, OLAJIM=558, 
		OLASJM=559, LIKHM=560, LIPM=561, LISHM=562, LUTM=563, LUTHM=564, LUDM=565, 
		LUPM=566, LUBHM=567, VICHM=568, OVIJIM=569, VIDM=570, VIDHM=571, VILM=572, 
		VISHM=573, VRINM=574, VRIHUM=575, VYACHM=576, OVRASHCHUM=577, VRUM=578, 
		SHADHM=579, SHILM=580, SHUNM=581, SHUBHM=582, SHUMPHM=583, SHADHUM=584, 
		SHICHM=585, SHHILM=586, SHURM=587, SHUM=588, SRINGM=589, STRIHUM=590, 
		STHUDM=591, SPRISHM=592, SPHARHUM=593, SPHALM=594, SPHUTM=595, SPHUDM=596, 
		SPHURM=597, SPHULM=598, HILM=599, HUDM=600, ANJUM=601, NINDHIM=602, UNDHIM=603, 
		KRINTIM=604, KSHUDIR=605, KHIDIR=606, CHIDIR=607, UCHHRDIR=608, TANCHUM=609, 
		UTRUDIR=610, TRUHUM=611, PISHUM=612, PRICHIM=613, BHAMJOM=614, BHIDIR=615, 
		BHUGUM=616, YUJIR=617, RICHIR=618, RUDHIR=619, VICHIR=620, OMVIJIM=621, 
		VIDIR=622, VRUJIM=623, SHISHUM=624, HISIR=625, RINUM=626, DUKRINM=627, 
		KSHANUM=628, KSHINUM=629, GHRINUM=630, TANUM=631, TRINUM=632, MANUM=633, 
		VANUM=634, SHANUM=635, ASHAM=636, ISHAM=637, RUKRIN=638, KUNTHAM=639, 
		KUSHHAM=640, KRRIN=641, KRRM=642, KNUUN=643, DUKRIINM=644, KLISHUM=645, 
		KSHISH=646, KSHUNBHAM=647, KHACHAM=648, KHAVAM=649, GUNDHAM=650, GRRIN=651, 
		GRANTHAM=652, GRAHAM=653, JRRI=654, JNAA=655, JYAA=656, JHRRIN=657, TUNBHAM=658, 
		DRRIN=659, DRUUN=660, DHUUN=661, DHRRI=662, UDHRASAM=663, NANBHAM=664, 
		NRRIN=665, PUNSHAM=666, PURRRIN=667, PRIKRRIN=668, PRIIN=669, PRUSHAM=670, 
		PLII=671, PLUUSHAM=672, BANDHAM=673, BLII=674, BHRRI=675, BHRRII=676, 
		MANTHAM=677, MIIKRRIN=678, MUSHAM=679, MUURRRIN=680, MRIDHAM=681, MRRIDHAM=682, 
		MRRIN=683, YUN=684, RII=685, LII=686, LUURRRIN=687, VISHAM=688, VRIN=689, 
		VRRIN=690, VRRM=691, VRII=692, VLII=693, SHRRIN=694, SHRANTHAM=695, SHRANTHAM_2=696, 
		SHRII=697, SHISHI=698, SKAMBHAM=699, SKUUN=700, SKUMBHAM=701, STAMBHAM=702, 
		STUMBHUM=703, STRRIN=704, HETTHAM=705, HEDHAM=706, RU=707, KI=708, KITAM=709, 
		GA=710, GHRI=711, JANA=712, TURA=713, DUDAAK=714, DHANA=715, DUDHAAK=716, 
		DHISHA=717, NJIJR=718, PRA=719, PRI=720, BHASA=721, NIBHI=722, DUBHRI=723, 
		MAA=724, VIJIR=725, VISHAIM=726, SRA=727, OHAAH=728, OHAAK=729, HU=730, 
		HRI=731, HRII=732, ASHUUM=733, AHAH=734, AAPUM=735, RR=736, RDHUM=737, 
		KRN=738, KSHI=739, KSHII=740, CHAMUM=741, CHIN=742, CHIRI=743, JIRI=744, 
		TIKAM=745, TIGAM=746, TRIPAM=747, DDGHAM=748, DAMBHUM=749, DAASHUM=750, 
		TUDU=751, DR=752, DHUN=753, DHUUM=754, NJIDHRISHAM=755, PR=756, DDUMIN=757, 
		RAADHAM=758, RI=759, VRI=760, SHAKUM=761, SHIN=762, SHAGHAM=763, SAADHAM=764, 
		SHHIN=765, SHUN=766, SHTIGHAM=767, STRIN=768, SPR=769, SMR=770, HAM=771, 
		ANSAM=772, ANHIM=773, ANKAM=774, ANGAM=775, ANCHUM=776, AJIM=777, ATTAM=778, 
		ANDHAM=779, AMAM=780, ARKAM=781, ARCHAM=782, ARJAM=783, ARTHA=784, ARDAM=785, 
		ARHAM=786, ANRHAM=787, AAKRANDAM=788, AAPLIRAM=789, AASHADAM=790, ILAM=791, 
		IDAM=792, IRAM=793, UGHRSAM=794, UNAM=795, URJAM=796, OMLADIM=797, KANAM=798, 
		KATHIM=799, KADAM=800, KATRA=801, KATHA=802, KARNAM=803, KARTAM=804, KALAM=805, 
		KAMLAM=806, KAAMLAM=807, KINTAM=808, KUSIM=809, KUNSIM=810, KUTAM=811, 
		KUTTAM=812, KUNTTAM=813, KUNAM=814, KUTHIM=815, KUDIM=816, KUNDIM=817, 
		KUTSAM=818, KUDRIM=819, KUNDRIM=820, KUNPAM=821, KUMARAM=822, KUBIM=823, 
		KUBHIM=824, KUSMAM=825, KUHAM=826, KOOTAM=827, KOONTAM=828, KOONAM=829, 
		KOONAMN=830, KRUPA=831, KRPAM=832, KRITAM=833, KETAM=834, KLAPAM=835, 
		KSHAJIM=836, KSHAPAM=837, KSHAPIM=838, KSHALAM=839, KSHOTAM=840, KHATTAM=841, 
		KHANDAM=842, KHANDIM=843, KHUDIM=844, KHETAM=845, KHEDAM=846, KHOTAM=847, 
		GAJAM=848, GANAM=849, GADAM=850, GANDHAM=851, GARJAM=852, GARDAM=853, 
		GARDHAM=854, GARVAM=855, GARHAM=856, GALAM=857, GAVESHAM=858, GUNAM=859, 
		PUNCTUATION=860, WS=861, PLUS=862;
	public static final int
		RULE_sentences = 0, RULE_vakya = 1, RULE_subantPada = 2, RULE_subantam = 3, 
		RULE_tingantPada = 4, RULE_tingatam = 5, RULE_atideshakDhatu = 6, RULE_kridanta = 7, 
		RULE_taddhitantata = 8, RULE_supPratyay = 9, RULE_vibhakti = 10, RULE_vikaran = 11, 
		RULE_abayaPada = 12, RULE_abayay = 13, RULE_nipatAbyaya = 14, RULE_taddhitPratyay = 15, 
		RULE_pratipadika = 16, RULE_lakar = 17, RULE_titLakar = 18, RULE_ngitLakar = 19, 
		RULE_tingPratyaya = 20, RULE_parasamaiPadam = 21, RULE_atmnePadam = 22, 
		RULE_kritPrtaya = 23;
	private static String[] makeRuleNames() {
		return new String[] {
			"sentences", "vakya", "subantPada", "subantam", "tingantPada", "tingatam", 
			"atideshakDhatu", "kridanta", "taddhitantata", "supPratyay", "vibhakti", 
			"vikaran", "abayaPada", "abayay", "nipatAbyaya", "taddhitPratyay", "pratipadika", 
			"lakar", "titLakar", "ngitLakar", "tingPratyaya", "parasamaiPadam", "atmnePadam", 
			"kritPrtaya"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, null, "'\\u0938\\u0941\\u0901'", "'\\u0914'", "'\\u091C\\u0938\\u094D'", 
			null, "'\\u0905\\u092E\\u094D'", "'\\u0914\\u091F\\u094D'", "'\\u0936\\u0938\\u094D'", 
			null, "'\\u091F\\u093E'", null, "'\\u092D\\u093F\\u0938\\u094D'", null, 
			"'\\u0919\\u0947'", null, "'\\u092D\\u094D\\u092F\\u0938\\u094D'", null, 
			"'\\u0919\\u0938\\u093F\\u0901'", null, "'\\u092D\\u094D\\u092F\\u092E\\u094D\\u200C'", 
			null, "'\\u0919\\u0938\\u094D'", "'\\u0913\\u0938\\u094D'", "'\\u0906\\u092E\\u094D'", 
			null, "'\\u0919\\u093F'", "'\\u0913\\u0938'", "'\\u0938\\u0941\\u092A\\u094D'", 
			"'\\u0936\\u092A\\u094D'", "'\\u0932\\u0941\\u0915\\u094D'", "'\\u0936\\u094D\\u0932\\u0941'", 
			"'\\u0936\\u094D\\u092F\\u0928\\u094D'", "'\\u0936\\u094D\\u0928\\u0941'", 
			"'\\u0936'", "'\\u0936\\u094D\\u0928\\u092E\\u094D'", "'\\u0909'", "'\\u0936\\u094D\\u0928\\u093E'", 
			"'\\u0923\\u093F\\u091A\\u094D'", "'\\u092F\\u0915\\u094D'", "'\\u0924\\u0924\\u094D'", 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, "'\\u0932\\u091F\\u094D'", "'\\u0932\\u093F\\u091F\\u094D'", 
			"'\\u0932\\u0941\\u091F\\u094D'", "'\\u0932\\u0943\\u091F\\u094D'", "'\\u0932\\u0947\\u091F\\u094D'", 
			"'\\u0932\\u094B\\u091F\\u094D'", "'\\u0932\\u0919\\u094D'", "'\\u0932\\u093F\\u0919\\u094D'", 
			"'\\u0932\\u0941\\u0919\\u094D'", "'\\u0932\\u0943\\u0919\\u094D'", "'\\u0924\\u093F\\u092A\\u094D'", 
			"'\\u0924\\u0938\\u094D'", "'\\u091D\\u093F'", "'\\u0938\\u093F\\u092A\\u094D'", 
			"'\\u0925\\u0938\\u094D'", "'\\u0925'", "'\\u092E\\u093F\\u092A\\u094D'", 
			"'\\u0935\\u0938\\u094D'", "'\\u092E\\u0938\\u094D'", "'\\u0924'", "'\\u0906\\u0924\\u093E\\u092E\\u094D'", 
			"'\\u091D'", "'\\u0925\\u093E\\u0938\\u094D'", "'\\u0906\\u0925\\u093E\\u092E\\u094D'", 
			"'\\u0927\\u094D\\u0935\\u092E\\u094D'", "'\\u0907\\u091F\\u094D'", "'\\u0935\\u0939\\u093F'", 
			"'\\u092E\\u0939\\u093F\\u0919\\u094D'", "'\\u0924\\u0941\\u092E\\u0941\\u0928\\u094D'", 
			"'\\u0905\\u0928\\u0940\\u092F\\u0930\\u094D'", "'\\u0924\\u0935\\u094D\\u092F\\u0924\\u094D'", 
			"'\\u0915\\u094D\\u0924\\u094D\\u0935\\u093E'", "'\\u0936\\u093E\\u0928\\u091A\\u094D'", 
			"'\\u0936\\u0924\\u0943'", "'\\u0932\\u094D\\u092F\\u0941\\u091F\\u094D'", 
			"'\\u0923\\u094D\\u0935\\u0942\\u0932\\u094D'", "'\\u0923\\u092E\\u0941\\u0932\\u094D'", 
			"'\\u0924\\u0943\\u091A\\u094D'", "'\\u0915\\u094D\\u0924\\u094D'", "'\\u0915\\u094D\\u0924\\u0935\\u0924\\u0941'", 
			"'\\u0932\\u094D\\u092F\\u092A\\u094D'", "'\\u0915\\u094D\\u0924\\u093F\\u0928\\u094D'", 
			"'\\u0915\\u0947\\u0932\\u093F\\u092E\\u0947\\u0930\\u094D'", "'\\u0915\\u094D\\u092F\\u092A\\u094D'", 
			"'\\u0915\\u094D\\u0935\\u0938\\u0941'", "'\\u0915\\u093E\\u0928\\u091A\\u094D'", 
			"'\\u0938\\u094D\\u092F\\u0924\\u0943'", "'\\u0938\\u094D\\u092F\\u092E\\u093E\\u0928\\u094D'", 
			"'\\u0918\\u091E\\u094D'", null, null, null, null, null, null, null, 
			null, null, null, null, "'\\u0930\\u0952\\u092E\\u0941\\u0901\\u0952'", 
			"'\\u0917\\u0952\\u092E\\u0962\\u0901\\u0951'", "'\\u0905\\u0951\\u0939\\u093F\\u0901\\u0952'", 
			"'\\u0905\\u0951\\u0915\\u0901\\u0951'", "'\\u0905\\u0951\\u0915\\u094D\\u0937\\u0942\\u0901\\u0951'", 
			"'\\u0905\\u0951\\u0917\\u0901\\u0951'", "'\\u0905\\u0951\\u0915\\u093F\\u0901\\u0952'", 
			"'\\u0905\\u0951\\u0917\\u093F\\u0901\\u0951'", "'\\u0905\\u0951\\u0918\\u093F\\u0901\\u0952'", 
			"'\\u0905\\u0951\\u091A\\u0941\\u0901\\u0951\\u0952'", "'\\u0905\\u0951\\u091C\\u0901\\u0951'", 
			"'\\u0905\\u0951\\u091A\\u093F\\u0901\\u0951'", "'\\u0905\\u0951\\u091E\\u094D\\u091A\\u0941\\u0901\\u0951'", 
			"'\\u0905\\u0951\\u091E\\u094D\\u091A\\u0941\\u0901\\u0951\\u0952'", 
			"'\\u0905\\u0951\\u091F\\u0901\\u0951'", "'\\u0905\\u0951\\u091F\\u094D\\u091F\\u0901\\u0951'", 
			"'\\u0905\\u0951\\u0921\\u0901\\u0951'", "'\\u0905\\u0951\\u0921\\u094D\\u0921\\u0901\\u0951'", 
			"'\\u0905\\u0951\\u0923\\u0901\\u0951'", "'\\u0905\\u0951\\u0920\\u093F\\u0901\\u0952'", 
			"'\\u0905\\u0951\\u0924\\u0901\\u0951'", "'\\u0905\\u0951\\u0926\\u094D\\u0921\\u0901\\u0951'", 
			"'\\u0905\\u0951\\u0924\\u093F\\u0901\\u0951'", "'\\u0905\\u0951\\u0926\\u093F\\u0901\\u0951'", 
			"'\\u0905\\u0951\\u092D\\u094D\\u0930\\u0901\\u0951'", "'\\u0905\\u0951\\u092E\\u0901\\u0951'", 
			"'\\u0905\\u0951\\u092C\\u093F\\u0901\\u0952'", "'\\u0905\\u0951\\u092D\\u093F\\u0901\\u0951'", 
			"'\\u0905\\u0951\\u092F\\u0901\\u0952'", "'\\u0905\\u0951\\u092F\\u0901\\u0951\\u0952'", 
			"'\\u0905\\u0951\\u0930\\u094D\\u0918\\u0901\\u0951'", "'\\u0905\\u0951\\u0930\\u094D\\u091A\\u0901\\u0951'", 
			"'\\u0905\\u0951\\u0930\\u094D\\u091C\\u0901\\u0951'", "'\\u0905\\u0951\\u0930\\u094D\\u0926\\u0901\\u0951'", 
			"'\\u0905\\u0951\\u0930\\u094D\\u092C\\u0901\\u0951'", "'\\u0905\\u0951\\u0930\\u094D\\u0935\\u0901\\u0951'", 
			"'\\u0905\\u0951\\u0930\\u094D\\u0939\\u0901\\u0951'", "'\\u0905\\u0951\\u0932\\u0901\\u0951'", 
			"'\\u0905\\u0951\\u0935\\u0901\\u0951'", "'\\u0905\\u0951\\u0937\\u0901\\u0951\\u0952'", 
			"'\\u0905\\u0951\\u0938\\u0901\\u0951\\u0952'", "'\\u0906\\u0951\\u091B\\u093F\\u0901\\u0951'", 
			"'\\u0906\\u0951\\u0936\\u0952\\u0938\\u093F'", "'\\u0907\\u0951\\u0916\\u0901\\u0951'", 
			"'\\u0907\\u0951\\u0916\\u093F\\u0901\\u0951'", "'\\u0907\\u0951\\u0917\\u093F\\u0901\\u0951'", 
			"'\\u0907\\u0951\\u091F\\u0901\\u0951'", "'\\u0907\\u0951\\u0926\\u093F\\u0901\\u0951'", 
			"'\\u0907\\u0951\\u0935\\u093F\\u0901\\u0951'", "'\\u0908\\u0951\\u0915\\u094D\\u0937\\u0901\\u0952'", 
			"'\\u0908\\u0951\\u0916\\u0901\\u0951'", "'\\u0908\\u0951\\u0916\\u093F\\u0901\\u0951'", 
			"'\\u0908\\u0951\\u091C\\u0952\\u0901'", "'\\u0908\\u0951\\u091C\\u093F\\u0901\\u0952'", 
			"'\\u0908\\u0951\\u0930\\u094D\\u0915\\u094D\\u0937\\u094D\\u092F\\u0901\\u0951'", 
			"'\\u0908\\u0951\\u0930\\u094D\\u0937\\u094D\\u092F\\u0901\\u0951'", 
			"'\\u0908\\u0951\\u0937\\u0901\\u0951'", "'\\u0908\\u0951\\u0937\\u0901\\u0952'", 
			"'\\u0908\\u0951\\u0939\\u0901\\u0952'", "'\\u0909\\u0952\\u0919\\u094D'", 
			"'\\u0909\\u0951\\u0915\\u094D\\u0937\\u0901\\u0951'", "'\\u0909\\u0951\\u0916\\u0901\\u0951'", 
			"'\\u0909\\u0951\\u0916\\u093F\\u0901\\u0951'", "'\\u0913\\u0951\\u0915\\u094D\\u0937\\u0941\\u0901\\u0951'", 
			"'\\u0913\\u0951\\u0923\\u0941\\u0901\\u0951'", null, null, "'\\u0909\\u0951\\u0930\\u094D\\u0926\\u0901\\u0952'", 
			"'\\u0909\\u0951\\u0930\\u094D\\u0935\\u0940\\u0901\\u0951'", "'\\u0909\\u0951\\u0937\\u0901\\u0951'", 
			"'\\u0909\\u0951\\u0939\\u093F\\u0901\\u0951\\u0930\\u094D'", "'\\u090A\\u0951\\u0920\\u0901\\u0951'", 
			"'\\u090A\\u0951\\u092F\\u0940\\u0901\\u0952'", "'\\u090A\\u0951\\u0937\\u0901\\u0951'", 
			"'\\u090A\\u0951\\u0939\\u0901\\u0951'", null, "'\\u090B\\u0951\\u091C\\u0901\\u0951'", 
			"'\\u090B\\u0951\\u091C\\u093F\\u0901\\u0951'", null, null, "'\\u090F\\u0951\\u0920\\u0901\\u0951'", 
			"'\\u090F\\u0951\\u0927\\u0901\\u0951'", null, null, "'\\u0913\\u0951\\u0916\\u0943\\u0901\\u0951'", 
			"'\\u0913\\u0951\\u0923\\u0943\\u0901\\u0951'", "'\\u0905\\u0952\\u0926\\u0901\\u0951'", 
			"'\\u0907\\u0952\\u0919\\u094D'", "'\\u0907\\u0952\\u0915\\u094D'", "'\\u0905\\u0951\\u0928\\u0901\\u0951'", 
			"'\\u0905\\u0951\\u0938\\u0901\\u0951'", "'\\u0906\\u0951\\u0936\\u093E\\u0952\\u0938\\u0941\\u0901'", 
			"'\\u0906\\u0951\\u0938\\u0901\\u0952'", "'\\u0907\\u0952\\u0923\\u094D'", 
			"'\\u0908\\u0951\\u0921\\u0901\\u0952'", "'\\u0908\\u0951\\u0930\\u0901\\u0952'", 
			"'\\u0908\\u0951\\u0936\\u0901\\u0952'", "'\\u090A\\u0951\\u0930\\u0923\\u0941\\u0951\\u091E\\u094D'", 
			"'\\u0915\\u0951\\u0938\\u093F\\u0901\\u0952'", "'\\u0915\\u0951\\u0936\\u0901\\u0951'", 
			"'\\u0915\\u0951\\u0938\\u0901\\u0952'", "'\\u0915\\u0941\\u0952'", "'\\u091F\\u0941\\u0951\\u0915\\u094D\\u0937\\u0941\\u0951'", 
			"'\\u0915\\u094D\\u0937\\u094D\\u0923\\u0941\\u0951'", "'\\u0916\\u094D\\u092F\\u093E\\u0952'", 
			"'\\u091A\\u0951\\u0915\\u093E\\u0951\\u0938\\u0943\\u0901\\u0951'", 
			"'\\u091A\\u0952\\u0915\\u094D\\u0937\\u093F\\u0901\\u0952\\u0919\\u094D'", 
			"'\\u091C\\u0951\\u0915\\u094D\\u0937\\u0901\\u0951'", "'\\u091C\\u093E\\u0951\\u0917\\u0943\\u0951'", 
			"'\\u0924\\u0941\\u0951'", "'\\u0926\\u0951\\u0930\\u093F\\u0951\\u0926\\u094D\\u0930\\u093E\\u0951'", 
			"'\\u0926\\u093E\\u0952\\u092A\\u094D'", "'\\u0926\\u093F\\u0952\\u0939\\u0901\\u0951\\u0952'", 
			"'\\u0926\\u0940\\u0951\\u0927\\u0940\\u0951\\u0919\\u094D'", "'\\u0926\\u0941\\u0952\\u0939\\u0901\\u0951\\u0952'", 
			"'\\u0926\\u094D\\u092F\\u0941\\u0952'", "'\\u0926\\u094D\\u0930\\u093E\\u0952'", 
			"'\\u0926\\u094D\\u0935\\u093F\\u0952\\u0937\\u093F\\u0901\\u0952'", 
			"'\\u0923\\u093F\\u0951\\u0938\\u093F\\u0901\\u0952'", "'\\u0923\\u093F\\u0951\\u091C\\u093F\\u0901\\u0952'", 
			"'\\u0923\\u0941\\u0951'", "'\\u092A\\u093E\\u0952'", "'\\u092A\\u093F\\u0951\\u091C\\u093F\\u0901\\u0952'", 
			"'\\u092A\\u0943\\u0951\\u091A\\u0940\\u0901\\u0952'", "'\\u092A\\u0943\\u0951\\u091C\\u093F\\u0901\\u0952'", 
			null, null, "'\\u092C\\u094D\\u0930\\u0942\\u0951\\u091E\\u094D'", "'\\u092D\\u093E\\u0952'", 
			null, "'\\u092E\\u0943\\u0951\\u091C\\u0942\\u0901\\u0951'", "'\\u092F\\u093E\\u0952'", 
			"'\\u092F\\u0941\\u0951'", "'\\u0930\\u093E\\u0952'", "'\\u0930\\u0941\\u0951'", 
			"'\\u0930\\u0941\\u0951\\u0926\\u093F\\u0901\\u0951\\u0930\\u094D'", 
			"'\\u0932\\u093E\\u0952'", "'\\u0932\\u093F\\u0952\\u0939\\u0901\\u0951\\u0952'", 
			"'\\u0935\\u0952\\u091A\\u0901\\u0951'", "'\\u0935\\u0951\\u0936\\u0901\\u0951'", 
			"'\\u0935\\u0951\\u0938\\u0901\\u0952'", "'\\u0935\\u093E\\u0952'", "'\\u0935\\u093F\\u0951\\u0926\\u0901\\u0951'", 
			"'\\u0935\\u0940\\u0952'", "'\\u0935\\u0943\\u0951\\u091C\\u0940\\u0901\\u0952'", 
			"'\\u0935\\u0943\\u0951\\u091C\\u093F\\u0901\\u0952'", "'\\u0935\\u0947\\u0951\\u0935\\u0940\\u0951\\u0919\\u094D'", 
			"'\\u0936\\u093E\\u0951\\u0938\\u0941\\u0901\\u0951'", "'\\u0936\\u093F\\u0951\\u091C\\u093F\\u0901\\u0952'", 
			"'\\u0936\\u0940\\u0951\\u0919\\u094D'", "'\\u0936\\u094D\\u0930\\u093E\\u0952'", 
			"'\\u0936\\u094D\\u0935\\u0951\\u0938\\u0901\\u0951'", "'\\u0937\\u0951\\u0938\\u094D\\u0924\\u093F\\u0901\\u0951'", 
			"'\\u0937\\u0951\\u0938\\u0901\\u0951'", "'\\u0937\\u0941\\u0952'", null, 
			"'\\u0937\\u094D\\u091F\\u0941\\u0952\\u091E\\u094D'", "'\\u0937\\u094D\\u0923\\u093E\\u0952'", 
			"'\\u0937\\u094D\\u0923\\u0941\\u0951'", "'\\u091E\\u093F\\u0937\\u094D\\u0935\\u0952\\u092A\\u0901\\u0951'", 
			"'\\u0939\\u0952\\u0928\\u0901\\u0951'", "'\\u0939\\u094D\\u0928\\u0941\\u0952\\u0919\\u094D'", 
			"'\\u0915\\u0941\\u0951\\u0925\\u0901\\u0951'", null, "'\\u0915\\u0941\\u0951\\u0936\\u0901\\u0951'", 
			"'\\u0915\\u0941\\u0951\\u0938\\u0901\\u0951'", "'\\u0915\\u0943\\u0951\\u0936\\u0901\\u0951'", 
			"'\\u0915\\u094D\\u0928\\u0951\\u0938\\u0941\\u0901\\u0951'", "'\\u0915\\u094D\\u0930\\u0941\\u0952\\u0927\\u0901\\u0951'", 
			"'\\u0915\\u094D\\u0932\\u0951\\u092E\\u0941\\u0901\\u0951'", "'\\u0915\\u094D\\u0932\\u093F\\u0951\\u0926\\u0942\\u0901\\u0951'", 
			"'\\u0915\\u094D\\u0932\\u093F\\u0951\\u0936\\u0901\\u0952'", "'\\u0915\\u094D\\u0937\\u0951\\u092E\\u0942\\u0901\\u0951'", 
			"'\\u0915\\u094D\\u0937\\u093F\\u0952\\u092A\\u0901\\u0951'", "'\\u0915\\u094D\\u0937\\u0941\\u0952\\u0927\\u0901\\u0951'", 
			null, "'\\u091E\\u093F\\u0915\\u094D\\u0937\\u094D\\u0935\\u093F\\u0951\\u0926\\u093E\\u0901\\u0951'", 
			null, null, "'\\u0917\\u0941\\u0951\\u092A\\u0901\\u0951'", "'\\u0917\\u0942\\u0951\\u0930\\u0940\\u0901\\u0952'", 
			"'\\u0917\\u0943\\u0951\\u0927\\u0941\\u0901\\u0951'", "'\\u0918\\u0942\\u0951\\u0930\\u0940\\u0952\\u0901'", 
			"'\\u091A\\u0942\\u0951\\u0930\\u0940\\u0901\\u0952'", "'\\u091B\\u094B\\u0952'", 
			"'\\u091C\\u0951\\u0928\\u0940\\u0901\\u0951'", "'\\u091C\\u0951\\u0938\\u0941\\u0901\\u0951'", 
			"'\\u091C\\u0942\\u0951\\u0930\\u0940\\u0901\\u0952'", "'\\u091C\\u0944\\u0951\\u0937\\u094D'", 
			"'\\u091D\\u0944\\u0951\\u0937\\u094D'", null, "'\\u0921\\u0940\\u0952\\u0919\\u094D'", 
			"'\\u0924\\u0952\\u092A\\u0901\\u0952'", "'\\u0924\\u0951\\u092E\\u0941\\u0901\\u0951'", 
			"'\\u0924\\u0951\\u0938\\u0941\\u0901\\u0951'", "'\\u0924\\u093F\\u0951\\u092E\\u0901\\u0951'", 
			"'\\u0924\\u0940\\u0951\\u092E\\u0901\\u0951'", null, "'\\u0924\\u0941\\u0952\\u0937\\u0901\\u0951'", 
			"'\\u0924\\u0942\\u0951\\u0930\\u0940\\u0901\\u0952'", "'\\u0924\\u0943\\u0952\\u092A\\u0901\\u0951'", 
			"'\\u091E\\u093F\\u0924\\u0943\\u0951\\u0937\\u0901\\u0951'", "'\\u0924\\u094D\\u0930\\u0951\\u0938\\u0940\\u0901\\u0951'", 
			"'\\u0926\\u0951\\u092E\\u0941\\u0901\\u0951'", "'\\u0926\\u0951\\u0938\\u0941\\u0901\\u0951'", 
			"'\\u0926\\u093F\\u0951\\u0935\\u0941\\u0901\\u0951'", "'\\u0926\\u0940\\u0951\\u0919\\u094D'", 
			"'\\u0926\\u0940\\u0951\\u092A\\u0940\\u0901\\u0952'", "'\\u0926\\u0941\\u0952\\u0937\\u0901\\u0951'", 
			"'\\u0926\\u0942\\u0951\\u0919\\u094D'", "'\\u0926\\u0943\\u0952\\u092A\\u0901\\u0951'", 
			"'\\u0926\\u094B\\u0952'", "'\\u0926\\u094D\\u0930\\u0941\\u0952\\u0939\\u0901\\u0951'", 
			null, "'\\u0923\\u0952\\u0936\\u0901\\u0951'", "'\\u0923\\u0952\\u0939\\u0901\\u0951\\u0952'", 
			"'\\u0928\\u0943\\u0951\\u0924\\u0940\\u0901\\u0951'", "'\\u092A\\u0952\\u0926\\u0901\\u0952'", 
			"'\\u092A\\u0940\\u0952\\u0919\\u094D'", "'\\u092A\\u0941\\u0951\\u0925\\u0901\\u0951'", 
			null, "'\\u092A\\u0941\\u0952\\u0937\\u0901\\u0951'", "'\\u092A\\u0941\\u0951\\u0937\\u094D\\u092A\\u0901\\u0951'", 
			"'\\u092A\\u0942\\u0951\\u0930\\u0940\\u0901\\u0952'", "'\\u092A\\u094D\\u092F\\u0941\\u0951\\u0937\\u0901\\u0951'", 
			"'\\u092A\\u094D\\u092F\\u0941\\u0951\\u0938\\u0901\\u0951'", "'\\u092A\\u094D\\u0930\\u0940\\u0952\\u0919\\u094D'", 
			null, "'\\u092C\\u0951\\u0938\\u0941\\u0901\\u0951'", "'\\u0935\\u093F\\u0951\\u0938\\u0901\\u0951'", 
			"'\\u092C\\u0941\\u0952\\u0927\\u0901\\u0952'", "'\\u092C\\u0941\\u0951\\u0938\\u0901\\u0951'", 
			"'\\u092C\\u094D\\u092F\\u0941\\u0951\\u0938\\u0901\\u0951'", "'\\u092D\\u0951\\u0938\\u0941\\u0901\\u0951'", 
			"'\\u092D\\u0943\\u0902\\u0951\\u0936\\u0941\\u0901\\u0951'", "'\\u092D\\u094D\\u0930\\u0902\\u0951\\u0936\\u0941\\u0901\\u0951'", 
			"'\\u092D\\u094D\\u0930\\u0951\\u092E\\u0941\\u0901\\u0951'", "'\\u092E\\u0951\\u0926\\u0940\\u0901\\u0951'", 
			"'\\u092E\\u0952\\u0928\\u0901\\u0952'", "'\\u092E\\u0951\\u0938\\u0940\\u0901\\u0951'", 
			"'\\u092E\\u093E\\u0952\\u0919\\u094D'", "'\\u091E\\u093F\\u092E\\u093F\\u0951\\u0926\\u093E\\u0901\\u0951'", 
			"'\\u092E\\u0940\\u0952\\u0919\\u094D'", "'\\u092E\\u0941\\u0951\\u0938\\u0901\\u0951'", 
			"'\\u092E\\u0941\\u0952\\u0939\\u0901\\u0951'", "'\\u092E\\u0943\\u0951\\u0937\\u0901\\u0951\\u0952'", 
			"'\\u092F\\u0951\\u0938\\u0941\\u0901\\u0951'", "'\\u092F\\u0941\\u0952\\u091C\\u0901\\u0951\\u0952'", 
			"'\\u092F\\u0941\\u0952\\u0927\\u0901\\u0951'", "'\\u092F\\u0941\\u0951\\u092A\\u0901\\u0951'", 
			"'\\u0930\\u0952\\u091E\\u094D\\u091C\\u0901\\u0951\\u0952'", "'\\u0930\\u0952\\u0927\\u0901\\u0951'", 
			"'\\u0930\\u093E\\u0927\\u094B\\u0901\\u0951'", "'\\u0930\\u093F\\u0951\\u0937\\u0901\\u0951'", 
			"'\\u0930\\u0940\\u0952\\u0919\\u094D'", "'\\u0930\\u0941\\u0951\\u092A\\u0901\\u0951'", 
			"'\\u0930\\u0941\\u0951\\u0937\\u0901\\u0951'", "'\\u0932\\u093F\\u0952\\u0936\\u0901\\u0952'", 
			"'\\u0932\\u0940\\u0952\\u0919\\u094D'", null, null, "'\\u0932\\u0941\\u0951\\u092A\\u0901\\u0951'", 
			null, "'\\u0935\\u0951\\u0938\\u0941\\u0901\\u0951'", "'\\u0935\\u093E\\u0951\\u0935\\u0943\\u0951\\u0924\\u0941\\u0901\\u0952'", 
			"'\\u0935\\u093E\\u0951\\u0936\\u0943\\u0901\\u0952'", "'\\u0908\\u0901\\u0951\\u0936\\u0941\\u0951\\u091A\\u093F\\u0901\\u0951\\u0952\\u0930\\u094D'", 
			"'\\u0936\\u0941\\u0952\\u0927\\u0901\\u0951'", "'\\u0936\\u0941\\u0952\\u0937\\u0901\\u0951'", 
			"'\\u0936\\u094B\\u0952'", "'\\u0936\\u094D\\u0930\\u0951\\u092E\\u0941\\u0901\\u0951'", 
			"'\\u0936\\u094D\\u0932\\u093F\\u0952\\u0937\\u0901\\u0951'", "'\\u0937\\u094D\\u0920\\u093F\\u0951\\u0935\\u0941\\u0901\\u0951'", 
			"'\\u0938\\u0951\\u092E\\u0940\\u0901\\u0951'", "'\\u0937\\u0951\\u0939\\u0901\\u0951'", 
			"'\\u0937\\u093F\\u0952\\u0927\\u0941\\u0901\\u0951'", "'\\u0937\\u093F\\u0951\\u0935\\u0941\\u0901\\u0951'", 
			"'\\u0937\\u0941\\u0951\\u0939\\u0901\\u0951'", null, "'\\u0937\\u094D\\u0930\\u0941\\u091C\\u0951\\u0901'", 
			"'\\u0937\\u094D\\u091F\\u093F\\u0951\\u092E\\u0901\\u0951'", "'\\u0937\\u094D\\u091F\\u0941\\u0951\\u092A\\u0901\\u0951'", 
			"'\\u0937\\u094D\\u0923\\u0951\\u0938\\u0941\\u0901\\u0951'", "'\\u0937\\u094D\\u0923\\u093F\\u0903\\u0951'", 
			"'\\u0937\\u094D\\u0923\\u0941\\u0952\\u0939\\u0901\\u0951'", "'\\u0937\\u094D\\u0930\\u093F\\u0935\\u0941\\u0901\\u0951'", 
			"'\\u0937\\u094D\\u0935\\u093F\\u0952\\u0926\\u093E\\u0901\\u0951'", 
			"'\\u0939\\u0943\\u0951\\u0937\\u0901\\u0951'", null, null, "'\\u0909\\u0951\\u091B\\u0940\\u0901\\u0951'", 
			"'\\u0909\\u0951\\u091C\\u094D\\u091D\\u0901\\u0951'", "'\\u0909\\u0951\\u091B\\u093F\\u0901\\u0951'", 
			"'\\u0909\\u0951\\u092C\\u0901\\u0951'", "'\\u0909\\u0951\\u092D\\u0901\\u0951'", 
			"'\\u0909\\u0951\\u092E\\u094D\\u092D\\u0901\\u0951'", "'\\u090B\\u0951\\u091A\\u0901\\u0951'", 
			"'\\u090B\\u0951\\u091B\\u0901\\u0951'", "'\\u090B\\u0951\\u092B\\u0901\\u0951'", 
			"'\\u090B\\u0951\\u092E\\u094D\\u092B\\u0901\\u0951'", "'\\u090B\\u0951\\u0937\\u0940\\u0901\\u0951'", 
			"'\\u0915\\u0951\\u0921\\u0901\\u0951'", "'\\u0915\\u093F\\u0951\\u0932\\u0901\\u0951'", 
			"'\\u0915\\u0941\\u0951\\u0919\\u094D\\u092E\\u094D'", "'\\u0915\\u0941\\u0951\\u091A\\u0901\\u0951'", 
			"'\\u0915\\u0941\\u0951\\u091F\\u0901\\u0951'", "'\\u0915\\u0941\\u0951\\u0921\\u0901\\u0951'", 
			null, "'\\u0915\\u0941\\u0951\\u0930\\u0901\\u0951'", "'\\u0915\\u0942\\u0951\\u0919\\u094D'", 
			"'\\u0915\\u0943\\u0951\\u0921\\u0901\\u0951'", null, "'\\u0915\\u0943\\u0952\\u0937\\u0901\\u0951\\u0952'", 
			null, "'\\u0915\\u094D\\u0930\\u0941\\u0951\\u0921\\u0901\\u0951'", "'\\u0915\\u094D\\u0937\\u093F\\u0952'", 
			"'\\u0915\\u094D\\u0937\\u093F\\u0952\\u092A\\u0901\\u0951\\u0952'", 
			"'\\u0915\\u094D\\u0937\\u0941\\u0951\\u0930\\u0901\\u0951'", "'\\u0916\\u093F\\u0952\\u0926\\u0901\\u0951'", 
			"'\\u0916\\u0941\\u0951\\u0921\\u0901\\u0951'", "'\\u0916\\u0941\\u0951\\u0930\\u0901\\u0951'", 
			"'\\u0917\\u0941\\u0952'", "'\\u0917\\u0941\\u0951\\u091C\\u0901\\u0951'", 
			"'\\u0917\\u0941\\u0951\\u0921\\u0901\\u0951'", "'\\u0917\\u0941\\u0951\\u092B\\u0901\\u0951'", 
			"'\\u0917\\u0941\\u0951\\u092E\\u094D\\u092B\\u0901\\u0951'", "'\\u0917\\u0941\\u0951\\u0930\\u0940\\u0901\\u0952'", 
			null, "'\\u0918\\u0941\\u0951\\u091F\\u0901\\u0951'", "'\\u0918\\u0941\\u0951\\u0923\\u0901\\u0951'", 
			"'\\u0918\\u0941\\u0951\\u0930\\u0901\\u0951'", "'\\u0918\\u0942\\u0951\\u0930\\u094D\\u0923\\u0901\\u0951'", 
			"'\\u091A\\u0951\\u0930\\u094D\\u091A\\u0901\\u0951'", "'\\u091A\\u0951\\u0932\\u0901\\u0951'", 
			"'\\u091A\\u093F\\u0951\\u0932\\u0901\\u0951'", "'\\u091A\\u0941\\u0951\\u091F\\u0901\\u0951'", 
			"'\\u091A\\u0941\\u0951\\u0921\\u0901\\u0951'", "'\\u091A\\u0943\\u0951\\u0924\\u0940\\u0901\\u0951'", 
			"'\\u091B\\u0941\\u0951\\u091F\\u0901\\u0951'", "'\\u091B\\u0941\\u0951\\u0921\\u0901\\u0951'", 
			"'\\u091B\\u0941\\u0952\\u092A\\u0901\\u0951'", "'\\u091B\\u0941\\u0951\\u0930\\u0901\\u0951'", 
			"'\\u091C\\u0951\\u0930\\u094D\\u091C\\u0901\\u0951'", "'\\u091C\\u0941\\u0951\\u091F\\u0901\\u0951'", 
			null, null, "'\\u091C\\u0941\\u0951\\u0928\\u0901\\u0951'", "'\\u091C\\u0941\\u0951\\u0937\\u0940\\u0901\\u0952'", 
			"'\\u091D\\u0951\\u0930\\u094D\\u091D\\u0901\\u0951'", null, "'\\u0924\\u093F\\u0951\\u0932\\u0901\\u0951'", 
			"'\\u0924\\u0941\\u0951\\u091F\\u0901\\u0951'", "'\\u0924\\u0941\\u0951\\u0921\\u0901\\u0951'", 
			"'\\u0924\\u0941\\u0951\\u0923\\u0901\\u0951'", "'\\u0924\\u0941\\u0952\\u0926\\u0901\\u0951\\u0952'", 
			"'\\u0924\\u0941\\u0951\\u092A\\u0901\\u0951'", "'\\u0924\\u0941\\u0951\\u092B\\u0901\\u0951'", 
			"'\\u0924\\u0941\\u0951\\u092E\\u094D\\u092A\\u0901\\u0951'", "'\\u0924\\u0941\\u0951\\u092E\\u094D\\u092B\\u0901\\u0951'", 
			"'\\u0924\\u0943\\u0902\\u0951\\u0939\\u0942\\u0901\\u0951'", null, "'\\u0924\\u0943\\u0951\\u092B\\u0901\\u0951'", 
			"'\\u0924\\u0943\\u0951\\u092E\\u094D\\u092A\\u0901\\u0951'", "'\\u0924\\u0943\\u0951\\u092E\\u094D\\u092B\\u0901\\u0951'", 
			"'\\u0924\\u0943\\u0951\\u0939\\u0942\\u0901\\u0951'", "'\\u0924\\u094D\\u0930\\u0941\\u0951\\u091F\\u0901\\u0951'", 
			"'\\u0924\\u094D\\u0935\\u0951\\u091A\\u0901\\u0951'", "'\\u0925\\u0941\\u0951\\u0921\\u0901\\u0951'", 
			"'\\u0926\\u093F\\u0952\\u0936\\u0901\\u0951\\u0952'", "'\\u0926\\u0943\\u0952\\u0919\\u094D'", 
			"'\\u0926\\u0943\\u0951\\u092A\\u0901\\u0951'", "'\\u0926\\u0943\\u0951\\u092B\\u0901\\u0951'", 
			"'\\u0926\\u0943\\u0951\\u092D\\u0940\\u0901\\u0951'", "'\\u0926\\u0943\\u0951\\u092E\\u094D\\u092A\\u0901\\u0951'", 
			"'\\u0926\\u0943\\u0951\\u092E\\u094D\\u092B\\u0901\\u0951'", "'\\u0926\\u094D\\u0930\\u0941\\u0951\\u0923\\u0901\\u0951'", 
			"'\\u0927\\u093F\\u0952'", "'\\u0927\\u0942\\u0951'", "'\\u0927\\u0943\\u0952\\u0919\\u094D'", 
			"'\\u0927\\u094D\\u0930\\u0941\\u0952'", "'\\u0923\\u093F\\u0951'", "'\\u0923\\u0942\\u0951'", 
			"'\\u0923\\u0941\\u0952\\u0926\\u0951'", "'\\u0923\\u0941\\u0952\\u0926\\u0901\\u0951\\u0952'", 
			"'\\u092A\\u093F\\u0951'", "'\\u092A\\u093F\\u0951\\u0936\\u0901\\u0951'", 
			"'\\u092A\\u0941\\u0951\\u091F\\u0901\\u0951'", "'\\u092A\\u0941\\u0951\\u0921\\u0901\\u0951'", 
			"'\\u092A\\u0941\\u0951\\u0923\\u0901\\u0951'", "'\\u092A\\u0941\\u0951\\u0930\\u0901\\u0951'", 
			"'\\u092A\\u0943\\u0952\\u0919\\u094D'", "'\\u092A\\u0943\\u0951\\u0921\\u0901\\u0951'", 
			"'\\u092A\\u0943\\u0951\\u0923\\u0901\\u0951'", "'\\u092A\\u094D\\u0930\\u0952\\u091B\\u0901\\u0951'", 
			"'\\u092C\\u093F\\u0951\\u0932\\u0901\\u0951'", null, "'\\u092D\\u0941\\u0952\\u091C\\u094B\\u0901\\u0951'", 
			null, "'\\u092D\\u094D\\u0930\\u0952\\u0938\\u0901\\u0951\\u0952'", "'\\u091F\\u0941\\u092E\\u0952\\u0938\\u0901\\u0951\\u0952'", 
			"'\\u092E\\u093F\\u0951\\u091B\\u0901\\u0951'", "'\\u092E\\u093F\\u0951\\u0932\\u0901\\u0951'", 
			"'\\u092E\\u093F\\u0951\\u0932\\u0901\\u0951\\u0952'", "'\\u092E\\u093F\\u0951\\u0937\\u0901\\u0951'", 
			"'\\u092E\\u0941\\u0952\\u091A\\u0962\\u0901\\u0951\\u0951'", "'\\u092E\\u0941\\u0951\\u091F\\u0901\\u0951'", 
			"'\\u092E\\u0941\\u0951\\u0923\\u0901\\u0951'", "'\\u092E\\u0941\\u0951\\u0930\\u0901\\u0951'", 
			"'\\u092E\\u0943\\u0952\\u0919\\u094D'", null, "'\\u092E\\u0943\\u0951\\u0923\\u0901\\u0951'", 
			"'\\u092E\\u0943\\u0952\\u0936\\u0901\\u0951'", "'\\u0930\\u093F\\u0952'", 
			"'\\u0930\\u093F\\u0951\\u092B\\u0901\\u0951'", "'\\u0930\\u093F\\u0952\\u0936\\u0901\\u0951'", 
			"'\\u0930\\u093F\\u0951\\u0939\\u0901\\u0951'", "'\\u0930\\u0941\\u0952\\u091C\\u094B\\u0901\\u0951'", 
			"'\\u0930\\u0941\\u0952\\u0936\\u0901\\u0951'", "'\\u0913\\u0901\\u0951\\u0932\\u0951\\u091C\\u0940\\u0901\\u0952'", 
			"'\\u0913\\u0901\\u0951\\u0932\\u0951\\u0938\\u094D\\u091C\\u0940\\u0901\\u0952'", 
			"'\\u0932\\u093F\\u0951\\u0916\\u0901\\u0951'", "'\\u0932\\u093F\\u0952\\u092A\\u0901\\u0951\\u0952'", 
			"'\\u0932\\u093F\\u0952\\u0936\\u0901\\u0951'", null, null, "'\\u0932\\u0941\\u0951\\u0921\\u0901\\u0951'", 
			"'\\u0932\\u0941\\u0951\\u092B\\u0901\\u0951'", null, "'\\u0935\\u093F\\u0951\\u091B\\u0901\\u0951'", 
			"'\\u0913\\u0901\\u0951\\u0935\\u093F\\u0951\\u091C\\u0940\\u0901\\u0952'", 
			"'\\u0935\\u093F\\u0951\\u0926\\u0962\\u0901\\u0951\\u0951\\u0952'", 
			"'\\u0935\\u093F\\u0951\\u0927\\u0901\\u0951'", "'\\u0935\\u093F\\u0951\\u0932\\u0901\\u0951'", 
			"'\\u0935\\u093F\\u0952\\u0936\\u0901\\u0951'", "'\\u0935\\u0943\\u0951\\u0923\\u0901\\u0951'", 
			"'\\u0935\\u0943\\u0951\\u0939\\u0942\\u0901\\u0951'", "'\\u0935\\u094D\\u092F\\u0951\\u091A\\u0901\\u0951'", 
			"'\\u0913\\u0901\\u0951\\u0935\\u094D\\u0930\\u0951\\u0936\\u094D\\u091A\\u0942\\u0901\\u0951'", 
			"'\\u0935\\u094D\\u0930\\u0941\\u0951\\u0921\\u0901\\u0951'", "'\\u0936\\u0952\\u0926\\u0962\\u0901\\u0951'", 
			"'\\u0936\\u093F\\u0951\\u0932\\u0901\\u0951'", "'\\u0936\\u0941\\u0951\\u0928\\u0901\\u0951'", 
			"'\\u0936\\u0941\\u0951\\u092D\\u0901\\u0951'", "'\\u0936\\u0941\\u0951\\u092E\\u094D\\u092D\\u0901\\u0951'", 
			"'\\u0937\\u0952\\u0926\\u0962\\u0901\\u0951'", "'\\u0937\\u093F\\u0952\\u091A\\u0901\\u0951\\u0952'", 
			"'\\u0937\\u093F\\u0951\\u0932\\u0901\\u0951'", "'\\u0937\\u0941\\u0951\\u0930\\u0901\\u0951'", 
			"'\\u0937\\u0942\\u0951'", "'\\u0938\\u0943\\u0952\\u091C\\u0901\\u0951'", 
			"'\\u0938\\u094D\\u0924\\u0943\\u0951\\u0939\\u0942\\u0901\\u0951'", 
			"'\\u0938\\u094D\\u0925\\u0941\\u0951\\u0921\\u0901\\u0951'", "'\\u0938\\u094D\\u092A\\u0943\\u0952\\u0936\\u0901\\u0951'", 
			"'\\u0938\\u094D\\u092B\\u0951\\u0930\\u0901\\u0951'", "'\\u0938\\u094D\\u092B\\u0951\\u0932\\u0901\\u0951'", 
			"'\\u0938\\u094D\\u092B\\u0941\\u0951\\u091F\\u0901\\u0951'", "'\\u0938\\u094D\\u092B\\u0941\\u0951\\u0921\\u0901\\u0951'", 
			"'\\u0938\\u094D\\u092B\\u0941\\u0951\\u0930\\u0901\\u0951'", "'\\u0938\\u094D\\u092B\\u0941\\u0951\\u0932\\u0901\\u0951'", 
			"'\\u0939\\u093F\\u0951\\u0932\\u0901\\u0951'", "'\\u0939\\u0941\\u0951\\u0921\\u0901\\u0951'", 
			"'\\u0905\\u0951\\u091E\\u094D\\u091C\\u0942\\u0901\\u0951'", "'\\u091E\\u093F\\u0907\\u0952\\u0928\\u094D\\u0927\\u0940\\u0901\\u0951'", 
			"'\\u0909\\u0951\\u0928\\u094D\\u0926\\u0940\\u0901\\u0951'", null, "'\\u0915\\u094D\\u0937\\u0941\\u0952\\u0926\\u093F\\u0901\\u0951\\u0952\\u0930\\u094D'", 
			null, "'\\u091B\\u093F\\u0952\\u0926\\u093F\\u0901\\u0951\\u0952\\u0930\\u094D'", 
			"'\\u0909\\u0901\\u0951\\u091B\\u0943\\u0951\\u0926\\u093F\\u0901\\u0951\\u0952\\u0930\\u094D'", 
			"'\\u0924\\u0951\\u091E\\u094D\\u091A\\u0942\\u0901\\u0951'", "'\\u0909\\u0901\\u0951\\u0924\\u0943\\u0951\\u0926\\u093F\\u0901\\u0951\\u0952\\u0930\\u094D'", 
			"'\\u0924\\u0943\\u0951\\u0939\\u0901\\u0951'", "'\\u092A\\u093F\\u0952\\u0937\\u0962\\u0901\\u0951'", 
			"'\\u092A\\u0943\\u0951\\u091A\\u0940\\u0901\\u0951'", "'\\u092D\\u0952\\u091E\\u094D\\u091C\\u094B\\u0901\\u0951'", 
			"'\\u092D\\u093F\\u0952\\u0926\\u093F\\u0901\\u0951\\u0952\\u0930\\u094D'", 
			"'\\u092D\\u0941\\u0952\\u091C\\u0901\\u0951'", "'\\u092F\\u0941\\u0952\\u091C\\u093F\\u0901\\u0951\\u0952\\u0930\\u094D'", 
			"'\\u0930\\u093F\\u0952\\u091A\\u093F\\u0901\\u0951\\u0952\\u0930\\u094D'", 
			"'\\u0930\\u0941\\u0952\\u0927\\u093F\\u0901\\u0951\\u0952\\u0930\\u094D'", 
			"'\\u0935\\u093F\\u0952\\u091A\\u093F\\u0901\\u0951\\u0952\\u0930\\u094D'", 
			"'\\u0913\\u0901\\u0951\\u0935\\u093F\\u0951\\u091C\\u0940\\u0901\\u0951'", 
			"'\\u0935\\u093F\\u0952\\u0926\\u0901\\u0952'", "'\\u0935\\u0943\\u0951\\u091C\\u0940\\u0901\\u0951'", 
			"'\\u0936\\u093F\\u0952\\u0937\\u0962\\u0901\\u0951'", "'\\u0939\\u093F\\u0951\\u0938\\u093F\\u0901\\u0951'", 
			"'\\u090B\\u0951\\u0923\\u0941\\u0901\\u0951\\u0952'", "'\\u0921\\u0941\\u0915\\u0943\\u0952\\u091E\\u094D'", 
			"'\\u0915\\u094D\\u0937\\u0951\\u0923\\u0941\\u0901\\u0951\\u0952'", 
			"'\\u0915\\u094D\\u0937\\u093F\\u0951\\u0923\\u0941\\u0901\\u0951\\u0952'", 
			"'\\u0918\\u0943\\u0951\\u0923\\u0941\\u0901\\u0951\\u0952'", "'\\u0924\\u0951\\u0928\\u0941\\u0901\\u0951\\u0952'", 
			"'\\u0924\\u0943\\u0951\\u0923\\u0941\\u0901\\u0951\\u0952'", "'\\u092E\\u0951\\u0928\\u0941\\u0901\\u0952'", 
			"'\\u0935\\u0951\\u0928\\u0941\\u0901\\u0951\\u0952'", "'\\u0937\\u0951\\u0928\\u0941\\u0901\\u0951\\u0952'", 
			"'\\u0905\\u0951\\u0936\\u0901\\u0951'", null, "'\\u0960'", "'\\u0915\\u0941\\u0951\\u0928\\u094D\\u0925\\u0901\\u0951'", 
			"'\\u0915\\u0941\\u0951\\u0937\\u0901\\u0951'", "'\\u0915\\u0944\\u0951\\u091E\\u094D'", 
			null, "'\\u0915\\u094D\\u0928\\u0942\\u0951\\u091E\\u094D'", "'\\u0921\\u0941\\u0915\\u094D\\u0930\\u0940\\u0952\\u091E\\u094D'", 
			"'\\u0915\\u094D\\u0932\\u093F\\u0951\\u0936\\u0942\\u0901\\u0951'", 
			"'\\u0915\\u094D\\u0937\\u0940\\u0952\\u0937\\u094D'", null, "'\\u0916\\u0951\\u091A\\u0901\\u0951'", 
			"'\\u0916\\u0951\\u0935\\u0901\\u0951'", null, null, "'\\u0917\\u094D\\u0930\\u0951\\u0928\\u094D\\u0925\\u0901\\u0951'", 
			"'\\u0917\\u094D\\u0930\\u0951\\u0939\\u0901\\u0951\\u0952'", "'\\u091C\\u0944\\u0951'", 
			"'\\u091C\\u094D\\u091E\\u093E\\u0952'", "'\\u091C\\u094D\\u092F\\u093E\\u0952'", 
			"'\\u091D\\u0944\\u0951'", null, "'\\u0926\\u0944\\u0951'", "'\\u0926\\u094D\\u0930\\u0942\\u0951\\u091E\\u094D'", 
			null, "'\\u0927\\u0944\\u0951'", "'\\u0909\\u0901\\u0951\\u0927\\u094D\\u0930\\u0952\\u0938\\u0901\\u0951'", 
			null, "'\\u0928\\u0944\\u0951'", null, "'\\u092A\\u0942\\u0951'", null, 
			"'\\u092A\\u094D\\u0930\\u0940\\u0952\\u091E\\u094D'", "'\\u092A\\u094D\\u0930\\u0941\\u0951\\u0937\\u0901\\u0951'", 
			"'\\u092A\\u094D\\u0932\\u0940\\u0952'", null, "'\\u092C\\u0952\\u0928\\u094D\\u0927\\u0901\\u0951'", 
			"'\\u092C\\u094D\\u0932\\u0940\\u0952'", "'\\u092D\\u0944\\u0951'", "'\\u092D\\u094D\\u0930\\u0940\\u0952'", 
			"'\\u092E\\u0951\\u0928\\u094D\\u0925\\u0901\\u0951'", "'\\u092E\\u0940\\u0952\\u091E\\u094D'", 
			"'\\u092E\\u0941\\u0951\\u0937\\u0901\\u0951'", "'\\u092E\\u0942\\u0951\\u091E\\u094D'", 
			null, "'\\u092E\\u0943\\u0951\\u0926\\u0901\\u0951'", "'\\u092E\\u0944\\u0951'", 
			"'\\u092F\\u0941\\u0952\\u091E\\u094D'", "'\\u0930\\u0940\\u0952'", "'\\u0932\\u0940\\u0952'", 
			"'\\u0932\\u0942\\u0951\\u091E\\u094D'", "'\\u0935\\u093F\\u0952\\u0937\\u0901\\u0951'", 
			"'\\u0935\\u0943\\u0951\\u0919\\u094D'", "'\\u0935\\u0944\\u0951\\u091E\\u094D'", 
			"'\\u0935\\u0944\\u0951'", "'\\u0935\\u094D\\u0930\\u0940\\u0952'", "'\\u0935\\u094D\\u0932\\u0940\\u0952'", 
			"'\\u0936\\u0944\\u0951'", null, null, "'\\u0936\\u094D\\u0930\\u0940\\u0952\\u091E\\u094D'", 
			null, "'\\u0938\\u094D\\u0915\\u0952\\u092E\\u094D\\u092D\\u0941\\u0901\\u0951'", 
			"'\\u0938\\u094D\\u0915\\u0941\\u0952\\u091E\\u094D'", "'\\u0938\\u094D\\u0915\\u0941\\u0952\\u092E\\u094D\\u092D\\u0941\\u0901\\u0951'", 
			"'\\u0938\\u094D\\u0924\\u0952\\u092E\\u094D\\u092D\\u0941\\u0901\\u0951'", 
			"'\\u0938\\u094D\\u0924\\u0941\\u0952\\u092E\\u094D\\u092D\\u0941\\u0901\\u0951'", 
			"'\\u0938\\u094D\\u0924\\u0944\\u0951\\u091E\\u094D'", "'\\u0939\\u0947\\u0951\\u0920\\u0901\\u0951'", 
			"'\\u0939\\u0947\\u0951\\u0922\\u0901\\u0951'", null, "'\\u0915\\u093F\\u0952'", 
			"'\\u0915\\u093F\\u0924\\u0901'", "'\\u0917\\u093E\\u0952'", "'\\u0918\\u0943\\u0952'", 
			"'\\u091C\\u0928\\u0901\\u0951'", "'\\u0924\\u0941\\u0930\\u0901\\u0951'", 
			"'\\u0921\\u0941\\u0926\\u093E\\u0952\\u0919\\u094D'", "'\\u0927\\u0928\\u0901\\u0951'", 
			"'\\u0921\\u0941\\u0927\\u093E\\u0952\\u0919\\u094D'", "'\\u0927\\u093F\\u0937\\u0901\\u0951'", 
			"'\\u0923\\u093F\\u0952\\u091C\\u093F\\u0901\\u0951\\u0952\\u0930\\u094D'", 
			null, null, "'\\u092D\\u0951\\u0938\\u0901\\u0951'", "'\\u091E\\u093F\\u092D\\u0940\\u0952'", 
			"'\\u0921\\u0941\\u092D\\u0943\\u0952\\u091E\\u094D'", null, "'\\u0935\\u093F\\u0952\\u091C\\u093F\\u0901\\u0951\\u0952\\u0930\\u094D'", 
			"'\\u0935\\u093F\\u0937\\u0948\\u0901'", "'\\u0938\\u0943\\u0952'", "'\\u0913\\u0939\\u093E\\u0952\\u0939'", 
			"'\\u0913\\u0939\\u093E\\u0952\\u0915\\u094D'", "'\\u0939\\u0941\\u0952'", 
			"'\\u0939\\u0943\\u0952'", "'\\u0939\\u094D\\u0930\\u0940\\u0952'", "'\\u0905\\u0951\\u0936\\u0942\\u0901\\u0952'", 
			"'\\u0905\\u0951\\u0939\\u0901\\u0951'", "'\\u0906\\u0952\\u092A\\u0962\\u0901\\u0951'", 
			"'\\u090B\\u0951'", "'\\u090B\\u0951\\u0927\\u0941\\u0901\\u0951'", "'\\u0915\\u0943\\u0952\\u091E\\u094D'", 
			"'\\u0915\\u094D\\u0937\\u093F\\u0951'", "'\\u0915\\u094D\\u0937\\u0940\\u0951'", 
			"'\\u091A\\u0951\\u092E\\u0941\\u0901\\u0951'", "'\\u091A\\u093F\\u0952\\u091E\\u094D'", 
			"'\\u091A\\u093F\\u0951\\u0930\\u093F\\u0951'", "'\\u091C\\u093F\\u0951\\u0930\\u093F\\u0951'", 
			"'\\u0924\\u093F\\u0951\\u0915\\u0901\\u0951'", "'\\u0924\\u093F\\u0951\\u0917\\u0901\\u0951'", 
			null, "'\\u0926\\u0951\\u0918\\u0901\\u0951'", "'\\u0926\\u0951\\u092E\\u094D\\u092D\\u0941\\u0901\\u0951'", 
			"'\\u0926\\u093E\\u0951\\u0936\\u0901\\u0951'", "'\\u091F\\u0941\\u0951\\u0926\\u0941\\u0952'", 
			"'\\u0926\\u0943\\u0951'", "'\\u0927\\u0941\\u0952\\u091E\\u094D'", null, 
			"'\\u091E\\u093F\\u0927\\u0943\\u0951\\u0937\\u093E\\u0901\\u0951'", 
			null, "'\\u0921\\u0941\\u092E\\u093F\\u0952\\u091E\\u094D'", "'\\u0930\\u093E\\u0952\\u0927\\u0901\\u0951'", 
			"'\\u0930\\u093F\\u0951'", "'\\u0935\\u0943\\u0951'", "'\\u0936\\u0952\\u0915\\u0962\\u0901\\u0951'", 
			"'\\u0936\\u093F\\u0952\\u091E\\u094D'", "'\\u0937\\u0951\\u0918\\u0901\\u0951'", 
			"'\\u0938\\u093E\\u0952\\u0927\\u0901\\u0951'", null, "'\\u0937\\u0941\\u0952\\u091E\\u094D'", 
			"'\\u0937\\u094D\\u091F\\u093F\\u0951\\u0918\\u0901\\u0952'", "'\\u0938\\u094D\\u0924\\u0943\\u0952\\u091E\\u094D'", 
			"'\\u0938\\u094D\\u092A\\u0943\\u0952'", "'\\u0938\\u094D\\u092E\\u0943\\u0952'", 
			"'\\u0939\\u093F\\u0952'", "'\\u0905\\u0902\\u0951\\u0938\\u0951'", "'\\u0905\\u0902\\u0951\\u0939\\u093F\\u0901\\u0951'", 
			"'\\u0905\\u0902\\u0951\\u0919\\u094D\\u0915\\u0951'", "'\\u0905\\u0902\\u0951\\u0919\\u094D\\u0917\\u0951'", 
			"'\\u0905\\u0902\\u0951\\u091E\\u094D\\u091A\\u0941\\u0901\\u0951'", 
			"'\\u0905\\u0902\\u0951\\u091C\\u093F\\u0901\\u0951'", "'\\u0905\\u0902\\u0951\\u091F\\u094D\\u091F\\u0901\\u0951'", 
			"'\\u0905\\u0902\\u0951\\u0928\\u094D\\u0927\\u0951'", "'\\u0905\\u0902\\u0951\\u092E\\u0901\\u0951'", 
			"'\\u0905\\u0902\\u0951\\u0930\\u094D\\u0915\\u0901\\u0951'", "'\\u0905\\u0902\\u0951\\u0930\\u094D\\u091A\\u0901\\u0951'", 
			"'\\u0905\\u0902\\u0951\\u0930\\u094D\\u091C\\u0901\\u0951'", "'\\u0905\\u0902\\u0951\\u0930\\u094D\\u0925\\u0952'", 
			"'\\u0905\\u0902\\u0951\\u0930\\u094D\\u0926\\u0901\\u0951'", null, null, 
			"'\\u0906\\u0951\\u0915\\u094D\\u0930\\u0928\\u094D\\u0926\\u0901'", 
			"'\\u0906\\u0951\\u092A\\u0962\\u0901\\u0951'", "'\\u0906\\u0952\\u0937\\u0926\\u0901'", 
			null, "'\\u0908\\u0951\\u0921\\u0901\\u0951'", "'\\u0908\\u0951\\u0930\\u0901\\u0951'", 
			"'\\u0909\\u0951\\u0918\\u094D\\u0930\\u0951\\u0938\\u0901\\u0951'", 
			"'\\u090A\\u0951\\u0928\\u0951'", "'\\u090A\\u0951\\u0930\\u094D\\u091C\\u0901\\u0951'", 
			"'\\u0913\\u0901\\u0951\\u0932\\u0951\\u0921\\u093F\\u0901\\u0951'", 
			"'\\u0915\\u0951\\u0923\\u0901\\u0951'", "'\\u0915\\u0951\\u0920\\u093F\\u0901\\u0951'", 
			"'\\u0915\\u0951\\u0921\\u093F\\u0901\\u0951'", "'\\u0915\\u0951\\u0924\\u094D\\u0930\\u0951'", 
			"'\\u0915\\u0951\\u0925\\u0951'", "'\\u0915\\u0951\\u0930\\u094D\\u0923\\u0901\\u0951'", 
			"'\\u0915\\u0951\\u0930\\u094D\\u0924\\u0901\\u0951'", null, null, "'\\u0915\\u093E\\u0951\\u0932\\u0951'", 
			"'\\u0915\\u0940\\u0951\\u091F\\u0901\\u0951'", null, null, "'\\u0915\\u0941\\u0951\\u091F\\u094D\\u091F\\u0901\\u0951'", 
			null, null, null, "'\\u0915\\u0941\\u0951\\u0920\\u093F\\u0901\\u0951'", 
			null, null, "'\\u0915\\u0941\\u0951\\u0924\\u094D\\u0938\\u0901\\u0952'", 
			"'\\u0915\\u0941\\u0951\\u0926\\u0943\\u0901\\u0951'", "'\\u0915\\u0941\\u0951\\u0926\\u094D\\u0930\\u093F\\u0901\\u0951'", 
			null, "'\\u0915\\u0941\\u0951\\u092E\\u093E\\u0951\\u0930\\u0951'", "'\\u0915\\u0941\\u0951\\u092C\\u093F\\u0901\\u0951'", 
			"'\\u0915\\u0941\\u0951\\u092D\\u093F\\u0901\\u0951'", "'\\u0915\\u0941\\u0951\\u0938\\u094D\\u092E\\u0901\\u0952'", 
			"'\\u0915\\u0941\\u0951\\u0939\\u0952'", "'\\u0915\\u0942\\u0951\\u091F\\u0901\\u0951'", 
			"'\\u0915\\u0942\\u0951\\u091F\\u0901\\u0952'", "'\\u0915\\u0942\\u0951\\u0923\\u0901\\u0951'", 
			"'\\u0915\\u0942\\u0951\\u0923\\u0901\\u0952'", "'\\u0915\\u0943\\u0951\\u092A\\u0951'", 
			"'\\u0915\\u0943\\u092A\\u0901\\u0951'", "'\\u0915\\u0944\\u0951\\u0924\\u0901\\u0951'", 
			"'\\u0915\\u0947\\u0951\\u0924\\u0901\\u0951'", "'\\u0915\\u094D\\u0932\\u0951\\u092A\\u0901\\u0951'", 
			"'\\u0915\\u094D\\u0937\\u0951\\u091C\\u093F\\u0901\\u0951'", "'\\u0915\\u094D\\u0937\\u0951\\u092A\\u0901\\u0951'", 
			"'\\u0915\\u094D\\u0937\\u0951\\u092A\\u093F\\u0901\\u0951'", "'\\u0915\\u094D\\u0937\\u0951\\u0932\\u0901\\u0951'", 
			"'\\u0915\\u094D\\u0937\\u094B\\u0951\\u091F\\u0951'", "'\\u0916\\u0951\\u091F\\u094D\\u091F\\u0901\\u0951'", 
			"'\\u0916\\u0951\\u0921\\u0901\\u0951'", "'\\u0916\\u0951\\u0921\\u093F\\u0901\\u0951'", 
			"'\\u0916\\u0941\\u0951\\u0921\\u093F\\u0901\\u0951'", "'\\u0916\\u0947\\u0951\\u091F\\u0901\\u0951'", 
			"'\\u0916\\u0947\\u0951\\u0921\\u0901\\u0951'", "'\\u0916\\u094B\\u0951\\u091F\\u0951'", 
			"'\\u0917\\u0951\\u091C\\u0901\\u0951'", "'\\u0917\\u0951\\u0923\\u0901\\u0951'", 
			"'\\u0917\\u0951\\u0926\\u0901\\u0951'", "'\\u0917\\u0951\\u0928\\u094D\\u0927\\u0901\\u0952'", 
			"'\\u0917\\u0951\\u0930\\u094D\\u091C\\u0901\\u0951'", "'\\u0917\\u0951\\u0930\\u094D\\u0926\\u0901\\u0951'", 
			"'\\u0917\\u0951\\u0930\\u094D\\u0927\\u0901\\u0951'", "'\\u0917\\u0951\\u0930\\u094D\\u0935\\u0952'", 
			"'\\u0917\\u0951\\u0930\\u094D\\u0939\\u0901\\u0951'", "'\\u0917\\u0951\\u0932\\u0901\\u0952'", 
			"'\\u0917\\u0951\\u0935\\u0947\\u0951\\u0937\\u0951'", "'\\u0917\\u0941\\u0951\\u0923\\u0901\\u0951'", 
			null, null, "'+'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "PRATHMA_VIBHAKTI", "PRATHMA_EKVACHAN", "PRATHMA_DWIVACHAN", "PRATHMA_BAHUVACHAN", 
			"DWITIYA_VIBHAKTI", "DWITIYA_EKVACHAN", "DWITIYA_DWIVACHAN", "DWITIYA_BAHUVACHAN", 
			"TRITIYA_VIBHAKTI", "TRITIYA_EKVACHAN", "TRITIYA_DWIVACHAN", "TRITIYA_BAHUVACHAN", 
			"CHATURTHI_VIBHAKTI", "CHATURTHI_EKVACHAN", "CHATURTHI_DWIVACHAN", "CHATURTHI_BAHUVACHAN", 
			"PANCHAMI_VIBHAKTI", "PANCHAMI_EKVACHAN", "PANCHAMI_DWIVACHAN", "PANCHAMI_BAHUVACHAN", 
			"SHASTI_VIBHAKTI", "SHASTI_EKVACHAN", "SHASTI_DWIVACHAN", "SHASTI_BAHUVACHAN", 
			"SAPTAMI_VIBHAKTI", "SAPTAMI_EKVACHAN", "SAPTAMI_DWIVACHAN", "SAPTAMI_BAHUVACHAN", 
			"SHAP_VIKARAN", "LUK_VIKARAN", "SHLU_VIKARAN", "SHYAN_VIKARAN", "SHNU_VIKARAN", 
			"SH_VIKARAN", "SHNAM_VIKARAN", "U_VIKARAN", "SHNA_VIKARAN", "NICH_VIKARAN", 
			"YAK_VIKARAN", "TAT_VIKARAN", "KRIYA_VISHESAN_ABYAY", "KAL_VACHAK_ABYAY", 
			"STHAN_VACHAK_ABYAY", "RITI_VACHAK_ABYAY", "PARIMAN_VACHAK_ABYAY", "PRSHN_VACHAK_ABYAY", 
			"SAMUCCHYA_BODHAK_ABYAY", "SAMBANDH_BODHAK_ABYAY", "VISMYADI_BODHAK_ABYAY", 
			"UPSARG", "UP_MARTHA_NIPAT", "KARMO_PASANGRAH_NIPAT", "PAD_PURNA_NARTHAK_NIPAT", 
			"ATIDESHIK_DHATU_PRATYAY", "APTYARTH_TADHT_PRATYAY", "DEVTARTH_TADHT_PRATYAY", 
			"READ_KNOW_TADHT_PRATYAY", "SAMUHARTH_TADHT_PRATYAY", "ISKA_HAI_ARTH_TADHT_PRATYAY", 
			"HONEWALE_BHAVARTH_TADHT_PRATYAY", "VIKARARTHAK_TADHT_PRATYAY", "BHAVVACHAK_TADHT_PRATYAY", 
			"TULNARTHAK_TADHT_PRATYAY", "ATYANT_BODHAK_TADHT_PRATYAY", "PANCHMYARTHAK_TADHT_PRATYAY", 
			"SAPTMYARTHAK_TADHT_PRATYAY", "PRAKARVACHAK_TADHT_PRATYAY", "PURAN_TADHT_PRATYAY", 
			"STRI_PRATYAY", "ATIDESHAK_DHATU_PRATYAY", "SARVANAMA", "AVYAYA", "SVARADI_AVYAYA", 
			"NIPAT_AVYAYA", "CADI", "PRADI", "KARMAPRAVACHANIYA", "GATI", "SAMASA_PRATIPADIKA", 
			"LAT_LAKAR", "LIT_LAKAR", "LUT_LAKAR", "LRIT_LAKAR", "LET_LAKAR", "LOT_LAKAR", 
			"LANG_LAKAR", "LING_LAKAR", "LUNG_LAKAR", "LRING_LAKAR", "PR_PRS_EK_VACHAN_PP", 
			"PR_PRS_DWI_VACHAN_PP", "PR_PRS_BAHU_VACHAN_PP", "MD_PRS_EK_VACHAN_PP", 
			"MD_PRS_DWI_VACHAN_PP", "MD_PRS_BAHU_VACHAN_PP", "UTM_PRS_EK_VACHAN_PP", 
			"UTM_DWI_VACHAN_PP", "UTM_BAHU_VACHAN_PP", "PR_PRS_EK_VACHAN_AP", "PR_PRS_DWI_VACHAN_AP", 
			"PR_PRS_BAHU_VACHAN_AP", "MD_PRS_EK_VACHAN_AP", "MD_PRS_DWI_VACHAN_AP", 
			"MD_PRS_BAHU_VACHAN_AP", "UTM_PRS_EK_VACHAN_AP", "UTM_DWI_VACHAN_AP", 
			"UTM_BAHU_VACHAN_AP", "TUMUN_KRIT_PRATYAYA", "ANEYYAR_KRIT_PRATYAYA", 
			"TAVYAT_KRIT_PRATYAYA", "KTVAA_KRIT_PRATYAYA", "SHAANACH_KRIT_PRATYAYA", 
			"SHATRU_KRIT_PRATYAYA", "LYUT_KRIT_PRATYAYA", "NVUUL_KRIT_PRATYAYA", 
			"NAMUL_KRIT_PRATYAYA", "TRACH_KRIT_PRATYAYA", "KTA_KRIT_PRATYAYA", "KTAVATU_KRIT_PRATYAYA", 
			"LYAP_KRIT_PRATYAYA", "KTIN_KRIT_PRATYAYA", "KELIMER_KRIT_PRATYAYA", 
			"KYAP_KRIT_PRATYAYA", "KVASU_KRIT_PRATYAYA", "KAANACH_KRIT_PRATYAYA", 
			"SYATRU_KRIT_PRATYAYA", "SYAMAAN_KRIT_PRATYAYA", "GHYN_KRIT_PRATYAYA", 
			"DHATU", "BHVADI", "ADADI", "JUHOTYADI", "DIVADI", "SWADI", "TUDADI", 
			"RUDHADI", "TANADI", "KRIYADI", "CHURADI", "RAMUM", "GAMAM", "AHIM", 
			"AKAM", "AKSHUM", "AGAM", "AKIM", "AGIM", "AGHIM", "ACHUM", "ANJAM", 
			"ACHIM", "ANCHUMN", "ANCCHUM", "ATAM", "ANTTAM", "ANDAM", "ADDAM", "ANNAM", 
			"ATHIM", "ANTAM", "ANDDAM", "ATIM", "ADIM", "ABRAM", "ANMAM", "ABIM", 
			"ABHIM", "AYAM", "ANYAM", "ARGHAM", "ANRCHAM", "ANRJAM", "ANRDAM", "ARBAM", 
			"ARVAM", "ANNRHAM", "ALAM", "AVAM", "ASHHAM", "ANSHAM", "AACHIM", "AASHASI", 
			"IKHAM", "IKHIM", "IGIM", "ITAM", "IDIM", "IVIM", "IKSHEM", "INKHAM", 
			"INKHIM", "IJAM", "IJIM", "IRKSHYAM", "IRSHYAM", "IISHAM", "IINSHAM", 
			"IEEHAM", "UN", "UKSHAM", "UKHAM", "UKHIM", "OKSHIM", "OKHIM", "OTHAM", 
			"ONTHAM", "URDAM", "URVIM", "USHAM", "UHIMAR", "OOTHAM", "OOYIM", "OOSHAM", 
			"OOHAM", "R", "RJAM", "RJIM", "EJRAM", "ENJRAM", "ETHAM", "EDHAM", "ESHAM", 
			"EESHAM", "OOKSHIM", "OONAM", "ADAM", "IIN", "IK", "ANAM", "ASAM", "AASHASUM", 
			"AASUM", "IINN", "IIDAM", "IIRAM", "INSHAM", "UURNUN", "KASIN", "KASAM", 
			"KASAN", "KUU", "TUKSHU", "KSHNU", "KHYYA", "CHAKAASURNUN", "CHAKSHINN", 
			"JAKSHAN", "JAAGRUN", "TUU", "DARIDRAAM", "DAAP", "DIHAN", "DIIDHIINN", 
			"DUHAN", "DYUU", "DRAA", "DVISHINN", "NNISHINN", "NNIJINN", "NNUN", "PAA", 
			"PIJINN", "PRIICHINN", "PRIJINN", "PRAA", "PSAA", "BRUUUN", "BHA", "MAAA", 
			"MRRUJUUN", "YAA", "YUU", "RAA", "RUU", "RUDHINN", "LAA", "LIHINN", "VACHINN", 
			"VASHINN", "VASAN", "VAA", "VIIDAN", "VII", "VRIJUUN", "VRIJINN", "VEVEEN", 
			"SHAASUM", "SHIJINN", "SHIIN", "SHRAA", "SHVASHINN", "SHTIGHINN", "SHASNN", 
			"SHUU", "SHUUN", "SHTUJINN", "SHTNA", "SHTNU", "NISHVAPAM", "HANAM", 
			"HNUUN", "KUTHAM", "KUPAM", "KUSHAM", "KUSAM", "KRISHAM", "KNASUM", "KRUDHAM", 
			"KLAMUM", "KLIDUM", "KLISHAM", "KSHAMUM", "KSIPAM", "KSHUDHAM", "KSHUBHAM", 
			"NIKSVIDAM", "KHIDAM", "GUDHAM", "GUPAM", "GOORIM", "GRUDHAM", "GHURIM", 
			"CHURIM", "CHO", "JANIM", "JASUM", "JURIM", "JRUH", "JHRUH", "DIPAM", 
			"DIM", "TAPAM", "TAMUM", "TASUM", "TIMAM", "TEEMAN", "TUBHAM", "TUSHAM", 
			"TOORI", "TRUPAM", "NITRISHAM", "TRASIM", "DAMUM", "DASUM", "DIVUM", 
			"DIPIM", "DIPIN", "DUSHAM", "DUH", "DRUH", "DOO", "DHURIM", "NABHAM", 
			"NASHAM", "NAHAM", "NRITIM", "PADAM", "PING", "PUTHAM", "PUSHAM", "PUSAM", 
			"PUSHPAM", "PURIM", "PYUSHAM", "PYUSAM", "PRING", "PLUSHAM", "BASUM", 
			"VISUM", "BUDHAM", "BUSAM", "BYUSAM", "BHASUM", "BHRISHUM", "BHRASHUM", 
			"BHRAUM", "MADIM", "MANAM", "MASIM", "MAAM", "NIMIDAM", "MI", "MUSAM", 
			"MUHAM", "MRISHAM", "YASUM", "YUJAM", "YUDHAM", "YUPAM", "RANJAM", "RADHAM", 
			"RADHO", "RISHAM", "RIMNG", "RUPAM", "RUSHAM", "LISHAM", "LI", "LUTAM", 
			"LUTHAM", "LUPAM", "LUBHAM", "VASUM", "VAVRITUM", "VASHRAM", "ISHUCHIR", 
			"SHUDHAM", "SHUSHAM", "SHO", "SHRAMUM", "SHLISHAM", "STHIVUM", "SAMIM", 
			"SHAHAN", "SHIDHAM", "SHIVUM", "SHUHAM", "SHUNG", "SRUJAM", "SHTIMAM", 
			"SHTUPAM", "SHNASUM", "SHNIHAM", "SHNUHAM", "SRIVUM", "SHVIDAM", "HRISHAM", 
			"ILM", "ISHM", "UCHHM", "UJHM", "UCHIM", "UBJM", "UBHM", "UMBHM", "RICHM", 
			"RICHHM", "RIFHM", "RIMFHM", "RINSHM", "KADHM", "KILM", "KUNGM", "KUCHM", 
			"KUTM", "KUDM", "KUNM", "KURM", "KUM", "KRIDHM", "KRITIM", "KRISHN", 
			"KRM", "KRUDHM", "KSHIM", "KSHIPM", "KSHURM", "KHIDHM", "KHUDHM", "KHURM", 
			"GUM", "GUJHM", "GUDHM", "GUFHM", "GUMFHM", "GURIM", "GRR", "GHUTM", 
			"GHUNM", "GHURM", "GHURNM", "CHARCHM", "CHALM", "CHILM", "CHUTM", "CHUDM", 
			"CHRITIM", "CHHUTM", "CHHUDM", "CHHUPM", "CHHURM", "JARJHM", "JUTM", 
			"JUDM", "JUNDM", "JUNM", "JUSHIM", "JHARJHM", "DIPM", "TILM", "TUTM", 
			"TUDM", "TUNM", "TUDHM", "TUPM", "TUFHM", "TUMPM", "TUMPHM", "TRINHUM", 
			"TRIPM", "TRIFHM", "TRIMPM", "TRIMPHM", "TRIHUM", "TRUTM", "TVACHM", 
			"THUDM", "DISHM", "DRINGM", "DRIPM", "DRIFHM", "DRIBHIM", "DRIMPM", "DRIMPHM", 
			"DRUNM", "DHIM", "DHUM", "DHRINGM", "DHRUM", "NIM", "NUUM", "NUDUM", 
			"NIDUM", "PIM", "PISHM", "PUTM", "PUDM", "PUNM", "PURM", "PRINGM", "PRIPM", 
			"PRINM", "PRACHHM", "BILM", "BRINGM", "BHJOM", "BRINGMU", "BHRASJM", 
			"TUMUSJM", "MICHM", "MILAM", "MILM", "MISHM", "MUCHM", "MUTM", "MUNM", 
			"MURM", "MRINGM", "MRIPM", "MRINM", "MRISHM", "RIM", "RINFHM", "RISHM", 
			"RIHAM", "RUJOM", "RUSHM", "OLAJIM", "OLASJM", "LIKHM", "LIPM", "LISHM", 
			"LUTM", "LUTHM", "LUDM", "LUPM", "LUBHM", "VICHM", "OVIJIM", "VIDM", 
			"VIDHM", "VILM", "VISHM", "VRINM", "VRIHUM", "VYACHM", "OVRASHCHUM", 
			"VRUM", "SHADHM", "SHILM", "SHUNM", "SHUBHM", "SHUMPHM", "SHADHUM", "SHICHM", 
			"SHHILM", "SHURM", "SHUM", "SRINGM", "STRIHUM", "STHUDM", "SPRISHM", 
			"SPHARHUM", "SPHALM", "SPHUTM", "SPHUDM", "SPHURM", "SPHULM", "HILM", 
			"HUDM", "ANJUM", "NINDHIM", "UNDHIM", "KRINTIM", "KSHUDIR", "KHIDIR", 
			"CHIDIR", "UCHHRDIR", "TANCHUM", "UTRUDIR", "TRUHUM", "PISHUM", "PRICHIM", 
			"BHAMJOM", "BHIDIR", "BHUGUM", "YUJIR", "RICHIR", "RUDHIR", "VICHIR", 
			"OMVIJIM", "VIDIR", "VRUJIM", "SHISHUM", "HISIR", "RINUM", "DUKRINM", 
			"KSHANUM", "KSHINUM", "GHRINUM", "TANUM", "TRINUM", "MANUM", "VANUM", 
			"SHANUM", "ASHAM", "ISHAM", "RUKRIN", "KUNTHAM", "KUSHHAM", "KRRIN", 
			"KRRM", "KNUUN", "DUKRIINM", "KLISHUM", "KSHISH", "KSHUNBHAM", "KHACHAM", 
			"KHAVAM", "GUNDHAM", "GRRIN", "GRANTHAM", "GRAHAM", "JRRI", "JNAA", "JYAA", 
			"JHRRIN", "TUNBHAM", "DRRIN", "DRUUN", "DHUUN", "DHRRI", "UDHRASAM", 
			"NANBHAM", "NRRIN", "PUNSHAM", "PURRRIN", "PRIKRRIN", "PRIIN", "PRUSHAM", 
			"PLII", "PLUUSHAM", "BANDHAM", "BLII", "BHRRI", "BHRRII", "MANTHAM", 
			"MIIKRRIN", "MUSHAM", "MUURRRIN", "MRIDHAM", "MRRIDHAM", "MRRIN", "YUN", 
			"RII", "LII", "LUURRRIN", "VISHAM", "VRIN", "VRRIN", "VRRM", "VRII", 
			"VLII", "SHRRIN", "SHRANTHAM", "SHRANTHAM_2", "SHRII", "SHISHI", "SKAMBHAM", 
			"SKUUN", "SKUMBHAM", "STAMBHAM", "STUMBHUM", "STRRIN", "HETTHAM", "HEDHAM", 
			"RU", "KI", "KITAM", "GA", "GHRI", "JANA", "TURA", "DUDAAK", "DHANA", 
			"DUDHAAK", "DHISHA", "NJIJR", "PRA", "PRI", "BHASA", "NIBHI", "DUBHRI", 
			"MAA", "VIJIR", "VISHAIM", "SRA", "OHAAH", "OHAAK", "HU", "HRI", "HRII", 
			"ASHUUM", "AHAH", "AAPUM", "RR", "RDHUM", "KRN", "KSHI", "KSHII", "CHAMUM", 
			"CHIN", "CHIRI", "JIRI", "TIKAM", "TIGAM", "TRIPAM", "DDGHAM", "DAMBHUM", 
			"DAASHUM", "TUDU", "DR", "DHUN", "DHUUM", "NJIDHRISHAM", "PR", "DDUMIN", 
			"RAADHAM", "RI", "VRI", "SHAKUM", "SHIN", "SHAGHAM", "SAADHAM", "SHHIN", 
			"SHUN", "SHTIGHAM", "STRIN", "SPR", "SMR", "HAM", "ANSAM", "ANHIM", "ANKAM", 
			"ANGAM", "ANCHUM", "AJIM", "ATTAM", "ANDHAM", "AMAM", "ARKAM", "ARCHAM", 
			"ARJAM", "ARTHA", "ARDAM", "ARHAM", "ANRHAM", "AAKRANDAM", "AAPLIRAM", 
			"AASHADAM", "ILAM", "IDAM", "IRAM", "UGHRSAM", "UNAM", "URJAM", "OMLADIM", 
			"KANAM", "KATHIM", "KADAM", "KATRA", "KATHA", "KARNAM", "KARTAM", "KALAM", 
			"KAMLAM", "KAAMLAM", "KINTAM", "KUSIM", "KUNSIM", "KUTAM", "KUTTAM", 
			"KUNTTAM", "KUNAM", "KUTHIM", "KUDIM", "KUNDIM", "KUTSAM", "KUDRIM", 
			"KUNDRIM", "KUNPAM", "KUMARAM", "KUBIM", "KUBHIM", "KUSMAM", "KUHAM", 
			"KOOTAM", "KOONTAM", "KOONAM", "KOONAMN", "KRUPA", "KRPAM", "KRITAM", 
			"KETAM", "KLAPAM", "KSHAJIM", "KSHAPAM", "KSHAPIM", "KSHALAM", "KSHOTAM", 
			"KHATTAM", "KHANDAM", "KHANDIM", "KHUDIM", "KHETAM", "KHEDAM", "KHOTAM", 
			"GAJAM", "GANAM", "GADAM", "GANDHAM", "GARJAM", "GARDAM", "GARDHAM", 
			"GARVAM", "GARHAM", "GALAM", "GAVESHAM", "GUNAM", "PUNCTUATION", "WS", 
			"PLUS"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "SanskritGrammar.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public SanskritGrammarParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SentencesContext extends ParserRuleContext {
		public List<VakyaContext> vakya() {
			return getRuleContexts(VakyaContext.class);
		}
		public VakyaContext vakya(int i) {
			return getRuleContext(VakyaContext.class,i);
		}
		public SentencesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sentences; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).enterSentences(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).exitSentences(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SanskritGrammarVisitor ) return ((SanskritGrammarVisitor<? extends T>)visitor).visitSentences(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SentencesContext sentences() throws RecognitionException {
		SentencesContext _localctx = new SentencesContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_sentences);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(49); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(48);
				vakya();
				}
				}
				setState(51); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==UPSARG || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & 288230376151711747L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class VakyaContext extends ParserRuleContext {
		public TingantPadaContext tingantPada() {
			return getRuleContext(TingantPadaContext.class,0);
		}
		public TerminalNode PUNCTUATION() { return getToken(SanskritGrammarParser.PUNCTUATION, 0); }
		public List<SubantPadaContext> subantPada() {
			return getRuleContexts(SubantPadaContext.class);
		}
		public SubantPadaContext subantPada(int i) {
			return getRuleContext(SubantPadaContext.class,i);
		}
		public VakyaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vakya; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).enterVakya(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).exitVakya(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SanskritGrammarVisitor ) return ((SanskritGrammarVisitor<? extends T>)visitor).visitVakya(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VakyaContext vakya() throws RecognitionException {
		VakyaContext _localctx = new VakyaContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_vakya);
		int _la;
		try {
			int _alt;
			setState(81);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,5,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(54); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(53);
						subantPada();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(56); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(58);
				tingantPada();
				setState(62);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==UPSARG || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & 288230376151711747L) != 0)) {
					{
					{
					setState(59);
					subantPada();
					}
					}
					setState(64);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(65);
				match(PUNCTUATION);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(70);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,3,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(67);
						subantPada();
						}
						} 
					}
					setState(72);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,3,_ctx);
				}
				setState(73);
				tingantPada();
				setState(75); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(74);
					subantPada();
					}
					}
					setState(77); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==UPSARG || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & 288230376151711747L) != 0) );
				setState(79);
				match(PUNCTUATION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SubantPadaContext extends ParserRuleContext {
		public SubantamContext subantam() {
			return getRuleContext(SubantamContext.class,0);
		}
		public TerminalNode PLUS() { return getToken(SanskritGrammarParser.PLUS, 0); }
		public SupPratyayContext supPratyay() {
			return getRuleContext(SupPratyayContext.class,0);
		}
		public SubantPadaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subantPada; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).enterSubantPada(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).exitSubantPada(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SanskritGrammarVisitor ) return ((SanskritGrammarVisitor<? extends T>)visitor).visitSubantPada(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubantPadaContext subantPada() throws RecognitionException {
		SubantPadaContext _localctx = new SubantPadaContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_subantPada);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(83);
			subantam();
			setState(84);
			match(PLUS);
			setState(85);
			supPratyay();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SubantamContext extends ParserRuleContext {
		public PratipadikaContext pratipadika() {
			return getRuleContext(PratipadikaContext.class,0);
		}
		public TerminalNode UPSARG() { return getToken(SanskritGrammarParser.UPSARG, 0); }
		public TerminalNode PLUS() { return getToken(SanskritGrammarParser.PLUS, 0); }
		public SubantamContext subantam() {
			return getRuleContext(SubantamContext.class,0);
		}
		public SubantamContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subantam; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).enterSubantam(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).exitSubantam(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SanskritGrammarVisitor ) return ((SanskritGrammarVisitor<? extends T>)visitor).visitSubantam(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubantamContext subantam() throws RecognitionException {
		SubantamContext _localctx = new SubantamContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_subantam);
		try {
			setState(91);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SARVANAMA:
			case AVYAYA:
			case DHATU:
				enterOuterAlt(_localctx, 1);
				{
				setState(87);
				pratipadika();
				}
				break;
			case UPSARG:
				enterOuterAlt(_localctx, 2);
				{
				setState(88);
				match(UPSARG);
				setState(89);
				match(PLUS);
				setState(90);
				subantam();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TingantPadaContext extends ParserRuleContext {
		public TingatamContext tingatam() {
			return getRuleContext(TingatamContext.class,0);
		}
		public List<TerminalNode> PLUS() { return getTokens(SanskritGrammarParser.PLUS); }
		public TerminalNode PLUS(int i) {
			return getToken(SanskritGrammarParser.PLUS, i);
		}
		public VikaranContext vikaran() {
			return getRuleContext(VikaranContext.class,0);
		}
		public LakarContext lakar() {
			return getRuleContext(LakarContext.class,0);
		}
		public TingPratyayaContext tingPratyaya() {
			return getRuleContext(TingPratyayaContext.class,0);
		}
		public TingantPadaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tingantPada; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).enterTingantPada(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).exitTingantPada(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SanskritGrammarVisitor ) return ((SanskritGrammarVisitor<? extends T>)visitor).visitTingantPada(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TingantPadaContext tingantPada() throws RecognitionException {
		TingantPadaContext _localctx = new TingantPadaContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_tingantPada);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(93);
			tingatam();
			setState(94);
			match(PLUS);
			setState(95);
			vikaran();
			setState(96);
			match(PLUS);
			setState(97);
			lakar();
			setState(98);
			match(PLUS);
			setState(99);
			tingPratyaya();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TingatamContext extends ParserRuleContext {
		public TerminalNode DHATU() { return getToken(SanskritGrammarParser.DHATU, 0); }
		public AtideshakDhatuContext atideshakDhatu() {
			return getRuleContext(AtideshakDhatuContext.class,0);
		}
		public TingatamContext tingatam() {
			return getRuleContext(TingatamContext.class,0);
		}
		public List<TerminalNode> UPSARG() { return getTokens(SanskritGrammarParser.UPSARG); }
		public TerminalNode UPSARG(int i) {
			return getToken(SanskritGrammarParser.UPSARG, i);
		}
		public TingatamContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tingatam; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).enterTingatam(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).exitTingatam(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SanskritGrammarVisitor ) return ((SanskritGrammarVisitor<? extends T>)visitor).visitTingatam(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TingatamContext tingatam() throws RecognitionException {
		TingatamContext _localctx = new TingatamContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_tingatam);
		try {
			int _alt;
			setState(109);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,8,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(101);
				match(DHATU);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(102);
				atideshakDhatu();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(104); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(103);
						match(UPSARG);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(106); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,7,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(108);
				tingatam();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AtideshakDhatuContext extends ParserRuleContext {
		public PratipadikaContext pratipadika() {
			return getRuleContext(PratipadikaContext.class,0);
		}
		public TerminalNode PLUS() { return getToken(SanskritGrammarParser.PLUS, 0); }
		public TerminalNode ATIDESHAK_DHATU_PRATYAY() { return getToken(SanskritGrammarParser.ATIDESHAK_DHATU_PRATYAY, 0); }
		public AtideshakDhatuContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_atideshakDhatu; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).enterAtideshakDhatu(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).exitAtideshakDhatu(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SanskritGrammarVisitor ) return ((SanskritGrammarVisitor<? extends T>)visitor).visitAtideshakDhatu(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AtideshakDhatuContext atideshakDhatu() throws RecognitionException {
		AtideshakDhatuContext _localctx = new AtideshakDhatuContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_atideshakDhatu);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(111);
			pratipadika();
			setState(112);
			match(PLUS);
			setState(113);
			match(ATIDESHAK_DHATU_PRATYAY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class KridantaContext extends ParserRuleContext {
		public TerminalNode DHATU() { return getToken(SanskritGrammarParser.DHATU, 0); }
		public TerminalNode PLUS() { return getToken(SanskritGrammarParser.PLUS, 0); }
		public KritPrtayaContext kritPrtaya() {
			return getRuleContext(KritPrtayaContext.class,0);
		}
		public KridantaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_kridanta; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).enterKridanta(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).exitKridanta(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SanskritGrammarVisitor ) return ((SanskritGrammarVisitor<? extends T>)visitor).visitKridanta(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KridantaContext kridanta() throws RecognitionException {
		KridantaContext _localctx = new KridantaContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_kridanta);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(115);
			match(DHATU);
			setState(116);
			match(PLUS);
			setState(117);
			kritPrtaya();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TaddhitantataContext extends ParserRuleContext {
		public KridantaContext kridanta() {
			return getRuleContext(KridantaContext.class,0);
		}
		public TerminalNode PLUS() { return getToken(SanskritGrammarParser.PLUS, 0); }
		public TaddhitPratyayContext taddhitPratyay() {
			return getRuleContext(TaddhitPratyayContext.class,0);
		}
		public TaddhitantataContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_taddhitantata; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).enterTaddhitantata(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).exitTaddhitantata(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SanskritGrammarVisitor ) return ((SanskritGrammarVisitor<? extends T>)visitor).visitTaddhitantata(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TaddhitantataContext taddhitantata() throws RecognitionException {
		TaddhitantataContext _localctx = new TaddhitantataContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_taddhitantata);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(119);
			kridanta();
			setState(120);
			match(PLUS);
			setState(121);
			taddhitPratyay();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SupPratyayContext extends ParserRuleContext {
		public VibhaktiContext vibhakti() {
			return getRuleContext(VibhaktiContext.class,0);
		}
		public SupPratyayContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_supPratyay; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).enterSupPratyay(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).exitSupPratyay(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SanskritGrammarVisitor ) return ((SanskritGrammarVisitor<? extends T>)visitor).visitSupPratyay(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SupPratyayContext supPratyay() throws RecognitionException {
		SupPratyayContext _localctx = new SupPratyayContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_supPratyay);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(123);
			vibhakti();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class VibhaktiContext extends ParserRuleContext {
		public TerminalNode PRATHMA_VIBHAKTI() { return getToken(SanskritGrammarParser.PRATHMA_VIBHAKTI, 0); }
		public TerminalNode DWITIYA_VIBHAKTI() { return getToken(SanskritGrammarParser.DWITIYA_VIBHAKTI, 0); }
		public TerminalNode TRITIYA_VIBHAKTI() { return getToken(SanskritGrammarParser.TRITIYA_VIBHAKTI, 0); }
		public TerminalNode CHATURTHI_VIBHAKTI() { return getToken(SanskritGrammarParser.CHATURTHI_VIBHAKTI, 0); }
		public TerminalNode PANCHAMI_VIBHAKTI() { return getToken(SanskritGrammarParser.PANCHAMI_VIBHAKTI, 0); }
		public TerminalNode SHASTI_VIBHAKTI() { return getToken(SanskritGrammarParser.SHASTI_VIBHAKTI, 0); }
		public TerminalNode SAPTAMI_VIBHAKTI() { return getToken(SanskritGrammarParser.SAPTAMI_VIBHAKTI, 0); }
		public VibhaktiContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vibhakti; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).enterVibhakti(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).exitVibhakti(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SanskritGrammarVisitor ) return ((SanskritGrammarVisitor<? extends T>)visitor).visitVibhakti(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VibhaktiContext vibhakti() throws RecognitionException {
		VibhaktiContext _localctx = new VibhaktiContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_vibhakti);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(125);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 35791394L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class VikaranContext extends ParserRuleContext {
		public TerminalNode SHAP_VIKARAN() { return getToken(SanskritGrammarParser.SHAP_VIKARAN, 0); }
		public TerminalNode LUK_VIKARAN() { return getToken(SanskritGrammarParser.LUK_VIKARAN, 0); }
		public TerminalNode SHLU_VIKARAN() { return getToken(SanskritGrammarParser.SHLU_VIKARAN, 0); }
		public TerminalNode SHYAN_VIKARAN() { return getToken(SanskritGrammarParser.SHYAN_VIKARAN, 0); }
		public TerminalNode SHNU_VIKARAN() { return getToken(SanskritGrammarParser.SHNU_VIKARAN, 0); }
		public TerminalNode SH_VIKARAN() { return getToken(SanskritGrammarParser.SH_VIKARAN, 0); }
		public TerminalNode SHNAM_VIKARAN() { return getToken(SanskritGrammarParser.SHNAM_VIKARAN, 0); }
		public TerminalNode U_VIKARAN() { return getToken(SanskritGrammarParser.U_VIKARAN, 0); }
		public TerminalNode SHNA_VIKARAN() { return getToken(SanskritGrammarParser.SHNA_VIKARAN, 0); }
		public TerminalNode NICH_VIKARAN() { return getToken(SanskritGrammarParser.NICH_VIKARAN, 0); }
		public TerminalNode YAK_VIKARAN() { return getToken(SanskritGrammarParser.YAK_VIKARAN, 0); }
		public TerminalNode TAT_VIKARAN() { return getToken(SanskritGrammarParser.TAT_VIKARAN, 0); }
		public VikaranContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vikaran; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).enterVikaran(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).exitVikaran(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SanskritGrammarVisitor ) return ((SanskritGrammarVisitor<? extends T>)visitor).visitVikaran(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VikaranContext vikaran() throws RecognitionException {
		VikaranContext _localctx = new VikaranContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_vikaran);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(127);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 2198486384640L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AbayaPadaContext extends ParserRuleContext {
		public AbayayContext abayay() {
			return getRuleContext(AbayayContext.class,0);
		}
		public TerminalNode UPSARG() { return getToken(SanskritGrammarParser.UPSARG, 0); }
		public NipatAbyayaContext nipatAbyaya() {
			return getRuleContext(NipatAbyayaContext.class,0);
		}
		public AbayaPadaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_abayaPada; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).enterAbayaPada(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).exitAbayaPada(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SanskritGrammarVisitor ) return ((SanskritGrammarVisitor<? extends T>)visitor).visitAbayaPada(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AbayaPadaContext abayaPada() throws RecognitionException {
		AbayaPadaContext _localctx = new AbayaPadaContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_abayaPada);
		try {
			setState(132);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KRIYA_VISHESAN_ABYAY:
			case SAMUCCHYA_BODHAK_ABYAY:
			case SAMBANDH_BODHAK_ABYAY:
			case VISMYADI_BODHAK_ABYAY:
				enterOuterAlt(_localctx, 1);
				{
				setState(129);
				abayay();
				}
				break;
			case UPSARG:
				enterOuterAlt(_localctx, 2);
				{
				setState(130);
				match(UPSARG);
				}
				break;
			case UP_MARTHA_NIPAT:
			case KARMO_PASANGRAH_NIPAT:
			case PAD_PURNA_NARTHAK_NIPAT:
				enterOuterAlt(_localctx, 3);
				{
				setState(131);
				nipatAbyaya();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AbayayContext extends ParserRuleContext {
		public TerminalNode KRIYA_VISHESAN_ABYAY() { return getToken(SanskritGrammarParser.KRIYA_VISHESAN_ABYAY, 0); }
		public TerminalNode SAMUCCHYA_BODHAK_ABYAY() { return getToken(SanskritGrammarParser.SAMUCCHYA_BODHAK_ABYAY, 0); }
		public TerminalNode SAMBANDH_BODHAK_ABYAY() { return getToken(SanskritGrammarParser.SAMBANDH_BODHAK_ABYAY, 0); }
		public TerminalNode VISMYADI_BODHAK_ABYAY() { return getToken(SanskritGrammarParser.VISMYADI_BODHAK_ABYAY, 0); }
		public AbayayContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_abayay; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).enterAbayay(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).exitAbayay(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SanskritGrammarVisitor ) return ((SanskritGrammarVisitor<? extends T>)visitor).visitAbayay(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AbayayContext abayay() throws RecognitionException {
		AbayayContext _localctx = new AbayayContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_abayay);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(134);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 987361441742848L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NipatAbyayaContext extends ParserRuleContext {
		public TerminalNode UP_MARTHA_NIPAT() { return getToken(SanskritGrammarParser.UP_MARTHA_NIPAT, 0); }
		public TerminalNode KARMO_PASANGRAH_NIPAT() { return getToken(SanskritGrammarParser.KARMO_PASANGRAH_NIPAT, 0); }
		public TerminalNode PAD_PURNA_NARTHAK_NIPAT() { return getToken(SanskritGrammarParser.PAD_PURNA_NARTHAK_NIPAT, 0); }
		public NipatAbyayaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nipatAbyaya; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).enterNipatAbyaya(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).exitNipatAbyaya(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SanskritGrammarVisitor ) return ((SanskritGrammarVisitor<? extends T>)visitor).visitNipatAbyaya(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NipatAbyayaContext nipatAbyaya() throws RecognitionException {
		NipatAbyayaContext _localctx = new NipatAbyayaContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_nipatAbyaya);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(136);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 15762598695796736L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TaddhitPratyayContext extends ParserRuleContext {
		public TerminalNode APTYARTH_TADHT_PRATYAY() { return getToken(SanskritGrammarParser.APTYARTH_TADHT_PRATYAY, 0); }
		public TerminalNode DEVTARTH_TADHT_PRATYAY() { return getToken(SanskritGrammarParser.DEVTARTH_TADHT_PRATYAY, 0); }
		public TerminalNode READ_KNOW_TADHT_PRATYAY() { return getToken(SanskritGrammarParser.READ_KNOW_TADHT_PRATYAY, 0); }
		public TerminalNode SAMUHARTH_TADHT_PRATYAY() { return getToken(SanskritGrammarParser.SAMUHARTH_TADHT_PRATYAY, 0); }
		public TerminalNode ISKA_HAI_ARTH_TADHT_PRATYAY() { return getToken(SanskritGrammarParser.ISKA_HAI_ARTH_TADHT_PRATYAY, 0); }
		public TerminalNode HONEWALE_BHAVARTH_TADHT_PRATYAY() { return getToken(SanskritGrammarParser.HONEWALE_BHAVARTH_TADHT_PRATYAY, 0); }
		public TerminalNode VIKARARTHAK_TADHT_PRATYAY() { return getToken(SanskritGrammarParser.VIKARARTHAK_TADHT_PRATYAY, 0); }
		public TerminalNode BHAVVACHAK_TADHT_PRATYAY() { return getToken(SanskritGrammarParser.BHAVVACHAK_TADHT_PRATYAY, 0); }
		public TerminalNode TULNARTHAK_TADHT_PRATYAY() { return getToken(SanskritGrammarParser.TULNARTHAK_TADHT_PRATYAY, 0); }
		public TerminalNode ATYANT_BODHAK_TADHT_PRATYAY() { return getToken(SanskritGrammarParser.ATYANT_BODHAK_TADHT_PRATYAY, 0); }
		public TerminalNode PANCHMYARTHAK_TADHT_PRATYAY() { return getToken(SanskritGrammarParser.PANCHMYARTHAK_TADHT_PRATYAY, 0); }
		public TerminalNode SAPTMYARTHAK_TADHT_PRATYAY() { return getToken(SanskritGrammarParser.SAPTMYARTHAK_TADHT_PRATYAY, 0); }
		public TerminalNode PRAKARVACHAK_TADHT_PRATYAY() { return getToken(SanskritGrammarParser.PRAKARVACHAK_TADHT_PRATYAY, 0); }
		public TerminalNode PURAN_TADHT_PRATYAY() { return getToken(SanskritGrammarParser.PURAN_TADHT_PRATYAY, 0); }
		public TaddhitPratyayContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_taddhitPratyay; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).enterTaddhitPratyay(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).exitTaddhitPratyay(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SanskritGrammarVisitor ) return ((SanskritGrammarVisitor<? extends T>)visitor).visitTaddhitPratyay(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TaddhitPratyayContext taddhitPratyay() throws RecognitionException {
		TaddhitPratyayContext _localctx = new TaddhitPratyayContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_taddhitPratyay);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(138);
			_la = _input.LA(1);
			if ( !(((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & 16383L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PratipadikaContext extends ParserRuleContext {
		public TerminalNode SARVANAMA() { return getToken(SanskritGrammarParser.SARVANAMA, 0); }
		public TerminalNode AVYAYA() { return getToken(SanskritGrammarParser.AVYAYA, 0); }
		public KridantaContext kridanta() {
			return getRuleContext(KridantaContext.class,0);
		}
		public TaddhitantataContext taddhitantata() {
			return getRuleContext(TaddhitantataContext.class,0);
		}
		public PratipadikaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pratipadika; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).enterPratipadika(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).exitPratipadika(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SanskritGrammarVisitor ) return ((SanskritGrammarVisitor<? extends T>)visitor).visitPratipadika(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PratipadikaContext pratipadika() throws RecognitionException {
		PratipadikaContext _localctx = new PratipadikaContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_pratipadika);
		try {
			setState(144);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,10,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(140);
				match(SARVANAMA);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(141);
				match(AVYAYA);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(142);
				kridanta();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(143);
				taddhitantata();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LakarContext extends ParserRuleContext {
		public TitLakarContext titLakar() {
			return getRuleContext(TitLakarContext.class,0);
		}
		public NgitLakarContext ngitLakar() {
			return getRuleContext(NgitLakarContext.class,0);
		}
		public LakarContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lakar; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).enterLakar(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).exitLakar(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SanskritGrammarVisitor ) return ((SanskritGrammarVisitor<? extends T>)visitor).visitLakar(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LakarContext lakar() throws RecognitionException {
		LakarContext _localctx = new LakarContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_lakar);
		try {
			setState(148);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LAT_LAKAR:
			case LIT_LAKAR:
			case LUT_LAKAR:
			case LRIT_LAKAR:
			case LET_LAKAR:
			case LOT_LAKAR:
				enterOuterAlt(_localctx, 1);
				{
				setState(146);
				titLakar();
				}
				break;
			case LANG_LAKAR:
			case LING_LAKAR:
			case LUNG_LAKAR:
			case LRING_LAKAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(147);
				ngitLakar();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TitLakarContext extends ParserRuleContext {
		public TerminalNode LAT_LAKAR() { return getToken(SanskritGrammarParser.LAT_LAKAR, 0); }
		public TerminalNode LIT_LAKAR() { return getToken(SanskritGrammarParser.LIT_LAKAR, 0); }
		public TerminalNode LUT_LAKAR() { return getToken(SanskritGrammarParser.LUT_LAKAR, 0); }
		public TerminalNode LRIT_LAKAR() { return getToken(SanskritGrammarParser.LRIT_LAKAR, 0); }
		public TerminalNode LET_LAKAR() { return getToken(SanskritGrammarParser.LET_LAKAR, 0); }
		public TerminalNode LOT_LAKAR() { return getToken(SanskritGrammarParser.LOT_LAKAR, 0); }
		public TitLakarContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_titLakar; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).enterTitLakar(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).exitTitLakar(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SanskritGrammarVisitor ) return ((SanskritGrammarVisitor<? extends T>)visitor).visitTitLakar(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TitLakarContext titLakar() throws RecognitionException {
		TitLakarContext _localctx = new TitLakarContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_titLakar);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(150);
			_la = _input.LA(1);
			if ( !(((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & 63L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NgitLakarContext extends ParserRuleContext {
		public TerminalNode LANG_LAKAR() { return getToken(SanskritGrammarParser.LANG_LAKAR, 0); }
		public TerminalNode LING_LAKAR() { return getToken(SanskritGrammarParser.LING_LAKAR, 0); }
		public TerminalNode LUNG_LAKAR() { return getToken(SanskritGrammarParser.LUNG_LAKAR, 0); }
		public TerminalNode LRING_LAKAR() { return getToken(SanskritGrammarParser.LRING_LAKAR, 0); }
		public NgitLakarContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ngitLakar; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).enterNgitLakar(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).exitNgitLakar(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SanskritGrammarVisitor ) return ((SanskritGrammarVisitor<? extends T>)visitor).visitNgitLakar(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NgitLakarContext ngitLakar() throws RecognitionException {
		NgitLakarContext _localctx = new NgitLakarContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_ngitLakar);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(152);
			_la = _input.LA(1);
			if ( !(((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & 15L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TingPratyayaContext extends ParserRuleContext {
		public ParasamaiPadamContext parasamaiPadam() {
			return getRuleContext(ParasamaiPadamContext.class,0);
		}
		public AtmnePadamContext atmnePadam() {
			return getRuleContext(AtmnePadamContext.class,0);
		}
		public TingPratyayaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tingPratyaya; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).enterTingPratyaya(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).exitTingPratyaya(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SanskritGrammarVisitor ) return ((SanskritGrammarVisitor<? extends T>)visitor).visitTingPratyaya(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TingPratyayaContext tingPratyaya() throws RecognitionException {
		TingPratyayaContext _localctx = new TingPratyayaContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_tingPratyaya);
		try {
			setState(156);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PR_PRS_EK_VACHAN_PP:
			case PR_PRS_DWI_VACHAN_PP:
			case PR_PRS_BAHU_VACHAN_PP:
			case MD_PRS_EK_VACHAN_PP:
			case MD_PRS_DWI_VACHAN_PP:
			case MD_PRS_BAHU_VACHAN_PP:
			case UTM_PRS_EK_VACHAN_PP:
			case UTM_DWI_VACHAN_PP:
			case UTM_BAHU_VACHAN_PP:
				enterOuterAlt(_localctx, 1);
				{
				setState(154);
				parasamaiPadam();
				}
				break;
			case PR_PRS_EK_VACHAN_AP:
			case PR_PRS_DWI_VACHAN_AP:
			case PR_PRS_BAHU_VACHAN_AP:
			case MD_PRS_EK_VACHAN_AP:
			case MD_PRS_DWI_VACHAN_AP:
			case MD_PRS_BAHU_VACHAN_AP:
			case UTM_PRS_EK_VACHAN_AP:
			case UTM_DWI_VACHAN_AP:
			case UTM_BAHU_VACHAN_AP:
				enterOuterAlt(_localctx, 2);
				{
				setState(155);
				atmnePadam();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ParasamaiPadamContext extends ParserRuleContext {
		public TerminalNode PR_PRS_EK_VACHAN_PP() { return getToken(SanskritGrammarParser.PR_PRS_EK_VACHAN_PP, 0); }
		public TerminalNode PR_PRS_DWI_VACHAN_PP() { return getToken(SanskritGrammarParser.PR_PRS_DWI_VACHAN_PP, 0); }
		public TerminalNode PR_PRS_BAHU_VACHAN_PP() { return getToken(SanskritGrammarParser.PR_PRS_BAHU_VACHAN_PP, 0); }
		public TerminalNode MD_PRS_EK_VACHAN_PP() { return getToken(SanskritGrammarParser.MD_PRS_EK_VACHAN_PP, 0); }
		public TerminalNode MD_PRS_DWI_VACHAN_PP() { return getToken(SanskritGrammarParser.MD_PRS_DWI_VACHAN_PP, 0); }
		public TerminalNode MD_PRS_BAHU_VACHAN_PP() { return getToken(SanskritGrammarParser.MD_PRS_BAHU_VACHAN_PP, 0); }
		public TerminalNode UTM_PRS_EK_VACHAN_PP() { return getToken(SanskritGrammarParser.UTM_PRS_EK_VACHAN_PP, 0); }
		public TerminalNode UTM_DWI_VACHAN_PP() { return getToken(SanskritGrammarParser.UTM_DWI_VACHAN_PP, 0); }
		public TerminalNode UTM_BAHU_VACHAN_PP() { return getToken(SanskritGrammarParser.UTM_BAHU_VACHAN_PP, 0); }
		public ParasamaiPadamContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parasamaiPadam; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).enterParasamaiPadam(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).exitParasamaiPadam(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SanskritGrammarVisitor ) return ((SanskritGrammarVisitor<? extends T>)visitor).visitParasamaiPadam(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParasamaiPadamContext parasamaiPadam() throws RecognitionException {
		ParasamaiPadamContext _localctx = new ParasamaiPadamContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_parasamaiPadam);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(158);
			_la = _input.LA(1);
			if ( !(((((_la - 90)) & ~0x3f) == 0 && ((1L << (_la - 90)) & 511L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AtmnePadamContext extends ParserRuleContext {
		public TerminalNode PR_PRS_EK_VACHAN_AP() { return getToken(SanskritGrammarParser.PR_PRS_EK_VACHAN_AP, 0); }
		public TerminalNode PR_PRS_DWI_VACHAN_AP() { return getToken(SanskritGrammarParser.PR_PRS_DWI_VACHAN_AP, 0); }
		public TerminalNode PR_PRS_BAHU_VACHAN_AP() { return getToken(SanskritGrammarParser.PR_PRS_BAHU_VACHAN_AP, 0); }
		public TerminalNode MD_PRS_EK_VACHAN_AP() { return getToken(SanskritGrammarParser.MD_PRS_EK_VACHAN_AP, 0); }
		public TerminalNode MD_PRS_DWI_VACHAN_AP() { return getToken(SanskritGrammarParser.MD_PRS_DWI_VACHAN_AP, 0); }
		public TerminalNode MD_PRS_BAHU_VACHAN_AP() { return getToken(SanskritGrammarParser.MD_PRS_BAHU_VACHAN_AP, 0); }
		public TerminalNode UTM_PRS_EK_VACHAN_AP() { return getToken(SanskritGrammarParser.UTM_PRS_EK_VACHAN_AP, 0); }
		public TerminalNode UTM_DWI_VACHAN_AP() { return getToken(SanskritGrammarParser.UTM_DWI_VACHAN_AP, 0); }
		public TerminalNode UTM_BAHU_VACHAN_AP() { return getToken(SanskritGrammarParser.UTM_BAHU_VACHAN_AP, 0); }
		public AtmnePadamContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_atmnePadam; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).enterAtmnePadam(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).exitAtmnePadam(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SanskritGrammarVisitor ) return ((SanskritGrammarVisitor<? extends T>)visitor).visitAtmnePadam(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AtmnePadamContext atmnePadam() throws RecognitionException {
		AtmnePadamContext _localctx = new AtmnePadamContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_atmnePadam);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(160);
			_la = _input.LA(1);
			if ( !(((((_la - 99)) & ~0x3f) == 0 && ((1L << (_la - 99)) & 511L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class KritPrtayaContext extends ParserRuleContext {
		public TerminalNode TUMUN_KRIT_PRATYAYA() { return getToken(SanskritGrammarParser.TUMUN_KRIT_PRATYAYA, 0); }
		public TerminalNode ANEYYAR_KRIT_PRATYAYA() { return getToken(SanskritGrammarParser.ANEYYAR_KRIT_PRATYAYA, 0); }
		public TerminalNode TAVYAT_KRIT_PRATYAYA() { return getToken(SanskritGrammarParser.TAVYAT_KRIT_PRATYAYA, 0); }
		public TerminalNode KTVAA_KRIT_PRATYAYA() { return getToken(SanskritGrammarParser.KTVAA_KRIT_PRATYAYA, 0); }
		public TerminalNode SHAANACH_KRIT_PRATYAYA() { return getToken(SanskritGrammarParser.SHAANACH_KRIT_PRATYAYA, 0); }
		public TerminalNode SHATRU_KRIT_PRATYAYA() { return getToken(SanskritGrammarParser.SHATRU_KRIT_PRATYAYA, 0); }
		public TerminalNode LYUT_KRIT_PRATYAYA() { return getToken(SanskritGrammarParser.LYUT_KRIT_PRATYAYA, 0); }
		public TerminalNode NVUUL_KRIT_PRATYAYA() { return getToken(SanskritGrammarParser.NVUUL_KRIT_PRATYAYA, 0); }
		public TerminalNode NAMUL_KRIT_PRATYAYA() { return getToken(SanskritGrammarParser.NAMUL_KRIT_PRATYAYA, 0); }
		public TerminalNode TRACH_KRIT_PRATYAYA() { return getToken(SanskritGrammarParser.TRACH_KRIT_PRATYAYA, 0); }
		public TerminalNode KTA_KRIT_PRATYAYA() { return getToken(SanskritGrammarParser.KTA_KRIT_PRATYAYA, 0); }
		public TerminalNode KTAVATU_KRIT_PRATYAYA() { return getToken(SanskritGrammarParser.KTAVATU_KRIT_PRATYAYA, 0); }
		public TerminalNode LYAP_KRIT_PRATYAYA() { return getToken(SanskritGrammarParser.LYAP_KRIT_PRATYAYA, 0); }
		public TerminalNode KTIN_KRIT_PRATYAYA() { return getToken(SanskritGrammarParser.KTIN_KRIT_PRATYAYA, 0); }
		public TerminalNode KELIMER_KRIT_PRATYAYA() { return getToken(SanskritGrammarParser.KELIMER_KRIT_PRATYAYA, 0); }
		public TerminalNode KYAP_KRIT_PRATYAYA() { return getToken(SanskritGrammarParser.KYAP_KRIT_PRATYAYA, 0); }
		public TerminalNode KVASU_KRIT_PRATYAYA() { return getToken(SanskritGrammarParser.KVASU_KRIT_PRATYAYA, 0); }
		public TerminalNode KAANACH_KRIT_PRATYAYA() { return getToken(SanskritGrammarParser.KAANACH_KRIT_PRATYAYA, 0); }
		public TerminalNode SYATRU_KRIT_PRATYAYA() { return getToken(SanskritGrammarParser.SYATRU_KRIT_PRATYAYA, 0); }
		public TerminalNode SYAMAAN_KRIT_PRATYAYA() { return getToken(SanskritGrammarParser.SYAMAAN_KRIT_PRATYAYA, 0); }
		public TerminalNode GHYN_KRIT_PRATYAYA() { return getToken(SanskritGrammarParser.GHYN_KRIT_PRATYAYA, 0); }
		public KritPrtayaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_kritPrtaya; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).enterKritPrtaya(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SanskritGrammarListener ) ((SanskritGrammarListener)listener).exitKritPrtaya(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SanskritGrammarVisitor ) return ((SanskritGrammarVisitor<? extends T>)visitor).visitKritPrtaya(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KritPrtayaContext kritPrtaya() throws RecognitionException {
		KritPrtayaContext _localctx = new KritPrtayaContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_kritPrtaya);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(162);
			_la = _input.LA(1);
			if ( !(((((_la - 108)) & ~0x3f) == 0 && ((1L << (_la - 108)) & 2097151L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static final String _serializedATN =
		"\u0004\u0001\u035e\u00a5\u0002\u0000\u0007\u0000\u0002\u0001\u0007\u0001"+
		"\u0002\u0002\u0007\u0002\u0002\u0003\u0007\u0003\u0002\u0004\u0007\u0004"+
		"\u0002\u0005\u0007\u0005\u0002\u0006\u0007\u0006\u0002\u0007\u0007\u0007"+
		"\u0002\b\u0007\b\u0002\t\u0007\t\u0002\n\u0007\n\u0002\u000b\u0007\u000b"+
		"\u0002\f\u0007\f\u0002\r\u0007\r\u0002\u000e\u0007\u000e\u0002\u000f\u0007"+
		"\u000f\u0002\u0010\u0007\u0010\u0002\u0011\u0007\u0011\u0002\u0012\u0007"+
		"\u0012\u0002\u0013\u0007\u0013\u0002\u0014\u0007\u0014\u0002\u0015\u0007"+
		"\u0015\u0002\u0016\u0007\u0016\u0002\u0017\u0007\u0017\u0001\u0000\u0004"+
		"\u00002\b\u0000\u000b\u0000\f\u00003\u0001\u0001\u0004\u00017\b\u0001"+
		"\u000b\u0001\f\u00018\u0001\u0001\u0001\u0001\u0005\u0001=\b\u0001\n\u0001"+
		"\f\u0001@\t\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0005\u0001E\b\u0001"+
		"\n\u0001\f\u0001H\t\u0001\u0001\u0001\u0001\u0001\u0004\u0001L\b\u0001"+
		"\u000b\u0001\f\u0001M\u0001\u0001\u0001\u0001\u0003\u0001R\b\u0001\u0001"+
		"\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0003\u0001\u0003\u0001"+
		"\u0003\u0001\u0003\u0003\u0003\\\b\u0003\u0001\u0004\u0001\u0004\u0001"+
		"\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001"+
		"\u0005\u0001\u0005\u0001\u0005\u0004\u0005i\b\u0005\u000b\u0005\f\u0005"+
		"j\u0001\u0005\u0003\u0005n\b\u0005\u0001\u0006\u0001\u0006\u0001\u0006"+
		"\u0001\u0006\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\b\u0001"+
		"\b\u0001\b\u0001\b\u0001\t\u0001\t\u0001\n\u0001\n\u0001\u000b\u0001\u000b"+
		"\u0001\f\u0001\f\u0001\f\u0003\f\u0085\b\f\u0001\r\u0001\r\u0001\u000e"+
		"\u0001\u000e\u0001\u000f\u0001\u000f\u0001\u0010\u0001\u0010\u0001\u0010"+
		"\u0001\u0010\u0003\u0010\u0091\b\u0010\u0001\u0011\u0001\u0011\u0003\u0011"+
		"\u0095\b\u0011\u0001\u0012\u0001\u0012\u0001\u0013\u0001\u0013\u0001\u0014"+
		"\u0001\u0014\u0003\u0014\u009d\b\u0014\u0001\u0015\u0001\u0015\u0001\u0016"+
		"\u0001\u0016\u0001\u0017\u0001\u0017\u0001\u0017\u0000\u0000\u0018\u0000"+
		"\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c"+
		"\u001e \"$&(*,.\u0000\n\u0007\u0000\u0001\u0001\u0005\u0005\t\t\r\r\u0011"+
		"\u0011\u0015\u0015\u0019\u0019\u0001\u0000\u001d(\u0002\u0000))/1\u0001"+
		"\u000035\u0001\u00007D\u0001\u0000PU\u0001\u0000VY\u0001\u0000Zb\u0001"+
		"\u0000ck\u0001\u0000l\u0080\u009d\u00001\u0001\u0000\u0000\u0000\u0002"+
		"Q\u0001\u0000\u0000\u0000\u0004S\u0001\u0000\u0000\u0000\u0006[\u0001"+
		"\u0000\u0000\u0000\b]\u0001\u0000\u0000\u0000\nm\u0001\u0000\u0000\u0000"+
		"\fo\u0001\u0000\u0000\u0000\u000es\u0001\u0000\u0000\u0000\u0010w\u0001"+
		"\u0000\u0000\u0000\u0012{\u0001\u0000\u0000\u0000\u0014}\u0001\u0000\u0000"+
		"\u0000\u0016\u007f\u0001\u0000\u0000\u0000\u0018\u0084\u0001\u0000\u0000"+
		"\u0000\u001a\u0086\u0001\u0000\u0000\u0000\u001c\u0088\u0001\u0000\u0000"+
		"\u0000\u001e\u008a\u0001\u0000\u0000\u0000 \u0090\u0001\u0000\u0000\u0000"+
		"\"\u0094\u0001\u0000\u0000\u0000$\u0096\u0001\u0000\u0000\u0000&\u0098"+
		"\u0001\u0000\u0000\u0000(\u009c\u0001\u0000\u0000\u0000*\u009e\u0001\u0000"+
		"\u0000\u0000,\u00a0\u0001\u0000\u0000\u0000.\u00a2\u0001\u0000\u0000\u0000"+
		"02\u0003\u0002\u0001\u000010\u0001\u0000\u0000\u000023\u0001\u0000\u0000"+
		"\u000031\u0001\u0000\u0000\u000034\u0001\u0000\u0000\u00004\u0001\u0001"+
		"\u0000\u0000\u000057\u0003\u0004\u0002\u000065\u0001\u0000\u0000\u0000"+
		"78\u0001\u0000\u0000\u000086\u0001\u0000\u0000\u000089\u0001\u0000\u0000"+
		"\u00009:\u0001\u0000\u0000\u0000:>\u0003\b\u0004\u0000;=\u0003\u0004\u0002"+
		"\u0000<;\u0001\u0000\u0000\u0000=@\u0001\u0000\u0000\u0000><\u0001\u0000"+
		"\u0000\u0000>?\u0001\u0000\u0000\u0000?A\u0001\u0000\u0000\u0000@>\u0001"+
		"\u0000\u0000\u0000AB\u0005\u035c\u0000\u0000BR\u0001\u0000\u0000\u0000"+
		"CE\u0003\u0004\u0002\u0000DC\u0001\u0000\u0000\u0000EH\u0001\u0000\u0000"+
		"\u0000FD\u0001\u0000\u0000\u0000FG\u0001\u0000\u0000\u0000GI\u0001\u0000"+
		"\u0000\u0000HF\u0001\u0000\u0000\u0000IK\u0003\b\u0004\u0000JL\u0003\u0004"+
		"\u0002\u0000KJ\u0001\u0000\u0000\u0000LM\u0001\u0000\u0000\u0000MK\u0001"+
		"\u0000\u0000\u0000MN\u0001\u0000\u0000\u0000NO\u0001\u0000\u0000\u0000"+
		"OP\u0005\u035c\u0000\u0000PR\u0001\u0000\u0000\u0000Q6\u0001\u0000\u0000"+
		"\u0000QF\u0001\u0000\u0000\u0000R\u0003\u0001\u0000\u0000\u0000ST\u0003"+
		"\u0006\u0003\u0000TU\u0005\u035e\u0000\u0000UV\u0003\u0012\t\u0000V\u0005"+
		"\u0001\u0000\u0000\u0000W\\\u0003 \u0010\u0000XY\u00052\u0000\u0000YZ"+
		"\u0005\u035e\u0000\u0000Z\\\u0003\u0006\u0003\u0000[W\u0001\u0000\u0000"+
		"\u0000[X\u0001\u0000\u0000\u0000\\\u0007\u0001\u0000\u0000\u0000]^\u0003"+
		"\n\u0005\u0000^_\u0005\u035e\u0000\u0000_`\u0003\u0016\u000b\u0000`a\u0005"+
		"\u035e\u0000\u0000ab\u0003\"\u0011\u0000bc\u0005\u035e\u0000\u0000cd\u0003"+
		"(\u0014\u0000d\t\u0001\u0000\u0000\u0000en\u0005\u0081\u0000\u0000fn\u0003"+
		"\f\u0006\u0000gi\u00052\u0000\u0000hg\u0001\u0000\u0000\u0000ij\u0001"+
		"\u0000\u0000\u0000jh\u0001\u0000\u0000\u0000jk\u0001\u0000\u0000\u0000"+
		"kl\u0001\u0000\u0000\u0000ln\u0003\n\u0005\u0000me\u0001\u0000\u0000\u0000"+
		"mf\u0001\u0000\u0000\u0000mh\u0001\u0000\u0000\u0000n\u000b\u0001\u0000"+
		"\u0000\u0000op\u0003 \u0010\u0000pq\u0005\u035e\u0000\u0000qr\u0005F\u0000"+
		"\u0000r\r\u0001\u0000\u0000\u0000st\u0005\u0081\u0000\u0000tu\u0005\u035e"+
		"\u0000\u0000uv\u0003.\u0017\u0000v\u000f\u0001\u0000\u0000\u0000wx\u0003"+
		"\u000e\u0007\u0000xy\u0005\u035e\u0000\u0000yz\u0003\u001e\u000f\u0000"+
		"z\u0011\u0001\u0000\u0000\u0000{|\u0003\u0014\n\u0000|\u0013\u0001\u0000"+
		"\u0000\u0000}~\u0007\u0000\u0000\u0000~\u0015\u0001\u0000\u0000\u0000"+
		"\u007f\u0080\u0007\u0001\u0000\u0000\u0080\u0017\u0001\u0000\u0000\u0000"+
		"\u0081\u0085\u0003\u001a\r\u0000\u0082\u0085\u00052\u0000\u0000\u0083"+
		"\u0085\u0003\u001c\u000e\u0000\u0084\u0081\u0001\u0000\u0000\u0000\u0084"+
		"\u0082\u0001\u0000\u0000\u0000\u0084\u0083\u0001\u0000\u0000\u0000\u0085"+
		"\u0019\u0001\u0000\u0000\u0000\u0086\u0087\u0007\u0002\u0000\u0000\u0087"+
		"\u001b\u0001\u0000\u0000\u0000\u0088\u0089\u0007\u0003\u0000\u0000\u0089"+
		"\u001d\u0001\u0000\u0000\u0000\u008a\u008b\u0007\u0004\u0000\u0000\u008b"+
		"\u001f\u0001\u0000\u0000\u0000\u008c\u0091\u0005G\u0000\u0000\u008d\u0091"+
		"\u0005H\u0000\u0000\u008e\u0091\u0003\u000e\u0007\u0000\u008f\u0091\u0003"+
		"\u0010\b\u0000\u0090\u008c\u0001\u0000\u0000\u0000\u0090\u008d\u0001\u0000"+
		"\u0000\u0000\u0090\u008e\u0001\u0000\u0000\u0000\u0090\u008f\u0001\u0000"+
		"\u0000\u0000\u0091!\u0001\u0000\u0000\u0000\u0092\u0095\u0003$\u0012\u0000"+
		"\u0093\u0095\u0003&\u0013\u0000\u0094\u0092\u0001\u0000\u0000\u0000\u0094"+
		"\u0093\u0001\u0000\u0000\u0000\u0095#\u0001\u0000\u0000\u0000\u0096\u0097"+
		"\u0007\u0005\u0000\u0000\u0097%\u0001\u0000\u0000\u0000\u0098\u0099\u0007"+
		"\u0006\u0000\u0000\u0099\'\u0001\u0000\u0000\u0000\u009a\u009d\u0003*"+
		"\u0015\u0000\u009b\u009d\u0003,\u0016\u0000\u009c\u009a\u0001\u0000\u0000"+
		"\u0000\u009c\u009b\u0001\u0000\u0000\u0000\u009d)\u0001\u0000\u0000\u0000"+
		"\u009e\u009f\u0007\u0007\u0000\u0000\u009f+\u0001\u0000\u0000\u0000\u00a0"+
		"\u00a1\u0007\b\u0000\u0000\u00a1-\u0001\u0000\u0000\u0000\u00a2\u00a3"+
		"\u0007\t\u0000\u0000\u00a3/\u0001\u0000\u0000\u0000\r38>FMQ[jm\u0084\u0090"+
		"\u0094\u009c";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}